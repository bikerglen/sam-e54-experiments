
FATFS9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006408  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00006408  00006408  00016408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000006c  20000000  00006410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002006c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002006c  2**0
                  CONTENTS
  5 .bss          00000a04  20000070  00006480  0002006c  2**4
                  ALLOC
  6 .stack        00010004  20000a74  00006e84  0002006c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
  9 .debug_info   0003ede6  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000522f  00000000  00000000  0005eed9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000178aa  00000000  00000000  00064108  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001110  00000000  00000000  0007b9b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000010e8  00000000  00000000  0007cac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003a7ba  00000000  00000000  0007dbaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001f2f1  00000000  00000000  000b8364  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00129b1a  00000000  00000000  000d7655  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00003738  00000000  00000000  00201170  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 0a 01 20 75 09 00 00 71 09 00 00 71 09 00 00     x.. u...q...q...
      10:	71 09 00 00 71 09 00 00 71 09 00 00 00 00 00 00     q...q...q.......
	...
      2c:	71 09 00 00 71 09 00 00 00 00 00 00 71 09 00 00     q...q.......q...
      3c:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
      4c:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
      5c:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
      6c:	dd 30 00 00 71 09 00 00 71 09 00 00 71 09 00 00     .0..q...q...q...
      7c:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
      8c:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
      9c:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
      ac:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
      bc:	a5 08 00 00 dd 08 00 00 f9 08 00 00 15 09 00 00     ................
      cc:	31 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     1...q...q...q...
      dc:	71 09 00 00 71 09 00 00 71 09 00 00 00 00 00 00     q...q...q.......
	...
      f4:	89 2f 00 00 71 09 00 00 71 09 00 00 71 09 00 00     ./..q...q...q...
     104:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
     114:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
     124:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
     134:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
     144:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
     154:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
     164:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
     174:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
     184:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
     194:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
     1a4:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
     1b4:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
     1c4:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
     1d4:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
     1e4:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
     1f4:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
     204:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
     214:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
     224:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
     234:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
     244:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...
     254:	71 09 00 00 71 09 00 00 71 09 00 00 71 09 00 00     q...q...q...q...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000070 	.word	0x20000070
     280:	00000000 	.word	0x00000000
     284:	00006410 	.word	0x00006410

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00006410 	.word	0x00006410
     2c4:	20000074 	.word	0x20000074
     2c8:	00006410 	.word	0x00006410
     2cc:	00000000 	.word	0x00000000

000002d0 <main>:
COMPILER_ALIGNED(16) DmacDescriptor my_writebacks[2];

volatile int myFlag;

int main (void)
{
     2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;
	int endOfFile;
	int lastBlockStarted;
	
	atmel_start_init();
     2d2:	4b82      	ldr	r3, [pc, #520]	; (4dc <main+0x20c>)
     2d4:	4798      	blx	r3
	
	printf ("\n\rHello, world!\n\r\n\r");
     2d6:	4882      	ldr	r0, [pc, #520]	; (4e0 <main+0x210>)
     2d8:	4e82      	ldr	r6, [pc, #520]	; (4e4 <main+0x214>)
     2da:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2dc:	4b82      	ldr	r3, [pc, #520]	; (4e8 <main+0x218>)
     2de:	2502      	movs	r5, #2
     2e0:	f8c3 5108 	str.w	r5, [r3, #264]	; 0x108

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2e4:	4a81      	ldr	r2, [pc, #516]	; (4ec <main+0x21c>)
     2e6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     2ea:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
     2ee:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     2f2:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
     2f6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     2fa:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2fe:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	tmp &= ~PORT_PINCFG_PMUXEN;
     302:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     306:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     30a:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     30e:	f44f 6180 	mov.w	r1, #1024	; 0x400
     312:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     316:	4a76      	ldr	r2, [pc, #472]	; (4f0 <main+0x220>)
     318:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     31c:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     320:	f893 214a 	ldrb.w	r2, [r3, #330]	; 0x14a
     324:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     328:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     32c:	f893 214a 	ldrb.w	r2, [r3, #330]	; 0x14a
	tmp &= ~PORT_PINCFG_PMUXEN;
     330:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     334:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     338:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	gpio_set_pin_pull_mode (PC10, GPIO_PULL_OFF);
	gpio_set_pin_function (PC10, GPIO_PIN_FUNCTION_OFF);
	gpio_set_pin_level (PC10, false);

	//                  RRRRLLLL
	I2S->TXDATA.reg = 0x00018000;
     33c:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
     340:	4b6c      	ldr	r3, [pc, #432]	; (4f4 <main+0x224>)
     342:	631a      	str	r2, [r3, #48]	; 0x30
	
	do {
		
		printf ("Enabling DMA\n\r");
     344:	486c      	ldr	r0, [pc, #432]	; (4f8 <main+0x228>)
     346:	47b0      	blx	r6
		
		// ENABLE DMA
		MCLK->AHBMASK.bit.DMAC_ = 1;
     348:	4a6c      	ldr	r2, [pc, #432]	; (4fc <main+0x22c>)
     34a:	6913      	ldr	r3, [r2, #16]
     34c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     350:	6113      	str	r3, [r2, #16]
		DMAC->CTRL.bit.SWRST = 1;
     352:	4b6b      	ldr	r3, [pc, #428]	; (500 <main+0x230>)
     354:	8819      	ldrh	r1, [r3, #0]
     356:	f041 0201 	orr.w	r2, r1, #1
     35a:	801a      	strh	r2, [r3, #0]
		DMAC->CTRL.bit.DMAENABLE = 0;
     35c:	881a      	ldrh	r2, [r3, #0]
     35e:	f36f 0241 	bfc	r2, #1, #1
     362:	801a      	strh	r2, [r3, #0]
		DMAC->BASEADDR.bit.BASEADDR = (uint32_t)my_descriptors;
     364:	4867      	ldr	r0, [pc, #412]	; (504 <main+0x234>)
     366:	6358      	str	r0, [r3, #52]	; 0x34
		DMAC->WRBADDR.bit.WRBADDR = (uint32_t)my_writebacks;
     368:	4967      	ldr	r1, [pc, #412]	; (508 <main+0x238>)
     36a:	6399      	str	r1, [r3, #56]	; 0x38
		DMAC->CTRL.bit.LVLEN0 = 1;
     36c:	881c      	ldrh	r4, [r3, #0]
     36e:	f444 7280 	orr.w	r2, r4, #256	; 0x100
     372:	801a      	strh	r2, [r3, #0]
		DMAC->CTRL.bit.LVLEN1 = 1;
     374:	881c      	ldrh	r4, [r3, #0]
     376:	f444 7200 	orr.w	r2, r4, #512	; 0x200
     37a:	801a      	strh	r2, [r3, #0]
		DMAC->CTRL.bit.LVLEN2 = 1;
     37c:	881c      	ldrh	r4, [r3, #0]
     37e:	f444 6280 	orr.w	r2, r4, #1024	; 0x400
     382:	801a      	strh	r2, [r3, #0]
		DMAC->CTRL.bit.LVLEN3 = 1;
     384:	881c      	ldrh	r4, [r3, #0]
     386:	f444 6200 	orr.w	r2, r4, #2048	; 0x800
     38a:	801a      	strh	r2, [r3, #0]
		DMAC->CTRL.bit.DMAENABLE = 1;
     38c:	881c      	ldrh	r4, [r3, #0]
     38e:	ea44 0205 	orr.w	r2, r4, r5
     392:	801a      	strh	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     394:	4a5d      	ldr	r2, [pc, #372]	; (50c <main+0x23c>)
     396:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
     39a:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     39e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     3a2:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     3a6:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     3aa:	6014      	str	r4, [r2, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     3ac:	24e0      	movs	r4, #224	; 0xe0
     3ae:	f882 431f 	strb.w	r4, [r2, #799]	; 0x31f
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     3b2:	2701      	movs	r7, #1
     3b4:	f8c2 7084 	str.w	r7, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
     3b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     3bc:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     3c0:	f8c2 7184 	str.w	r7, [r2, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     3c4:	6057      	str	r7, [r2, #4]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     3c6:	f882 4320 	strb.w	r4, [r2, #800]	; 0x320
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     3ca:	f8c2 5084 	str.w	r5, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
     3ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     3d2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     3d6:	f8c2 5184 	str.w	r5, [r2, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     3da:	6055      	str	r5, [r2, #4]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     3dc:	f882 4321 	strb.w	r4, [r2, #801]	; 0x321
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     3e0:	f04f 0e04 	mov.w	lr, #4
     3e4:	f8c2 e084 	str.w	lr, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
     3e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     3ec:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     3f0:	f8c2 e184 	str.w	lr, [r2, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     3f4:	f8c2 e004 	str.w	lr, [r2, #4]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     3f8:	f882 4322 	strb.w	r4, [r2, #802]	; 0x322
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     3fc:	f04f 0e08 	mov.w	lr, #8
     400:	f8c2 e084 	str.w	lr, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
     404:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     408:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     40c:	f8c2 e184 	str.w	lr, [r2, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     410:	f8c2 e004 	str.w	lr, [r2, #4]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     414:	f882 4323 	strb.w	r4, [r2, #803]	; 0x323
		NVIC_ClearPendingIRQ(DMAC_4_IRQn);
		NVIC_EnableIRQ(DMAC_4_IRQn);
		NVIC_SetPriority(DMAC_4_IRQn, (1 << __NVIC_PRIO_BITS) - 1);

		// clear the channel 0 descriptor
		memset((void*)&my_descriptors[0], 0x00, sizeof(my_descriptors[0]));
     418:	2400      	movs	r4, #0
     41a:	6004      	str	r4, [r0, #0]
     41c:	6044      	str	r4, [r0, #4]
     41e:	6084      	str	r4, [r0, #8]
     420:	60c4      	str	r4, [r0, #12]
		memset((void*)&my_writebacks[0], 0x00, sizeof(my_writebacks[0]));
     422:	600c      	str	r4, [r1, #0]
     424:	604c      	str	r4, [r1, #4]
     426:	608c      	str	r4, [r1, #8]
     428:	60cc      	str	r4, [r1, #12]
	
		// disable then reset DMA channel 0
		DMAC->Channel[0].CHCTRLA.bit.ENABLE = 0;
     42a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     42c:	f364 0241 	bfi	r2, r4, #1, #1
     430:	641a      	str	r2, [r3, #64]	; 0x40
		DMAC->Channel[0].CHCTRLA.bit.SWRST = 1;	
     432:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     434:	433a      	orrs	r2, r7
     436:	641a      	str	r2, [r3, #64]	; 0x40
	
		// set priority level 0
		DMAC->Channel[0].CHPRILVL.bit.PRILVL = 0;
     438:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
     43c:	f364 0201 	bfi	r2, r4, #0, #2
     440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		// set trigger source
		DMAC->Channel[0].CHCTRLA.bit.TRIGSRC = I2S_DMAC_ID_TX_0;		// I2S Tx 0 Trigger
     444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     446:	214e      	movs	r1, #78	; 0x4e
     448:	f361 220e 	bfi	r2, r1, #8, #7
     44c:	641a      	str	r2, [r3, #64]	; 0x40
		DMAC->Channel[0].CHCTRLA.bit.TRIGACT = 2; //DMAC_CHCTRLA_TRIGACT_BLOCK_Val;  // one trigger per block
     44e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     450:	f365 5215 	bfi	r2, r5, #20, #2
     454:	641a      	str	r2, [r3, #64]	; 0x40
  	
		printf ("Mounting filesystem.\n\r");
     456:	482e      	ldr	r0, [pc, #184]	; (510 <main+0x240>)
     458:	47b0      	blx	r6
		memset (&fs, 0, sizeof (FATFS));
     45a:	4d2e      	ldr	r5, [pc, #184]	; (514 <main+0x244>)
     45c:	f44f 720d 	mov.w	r2, #564	; 0x234
     460:	4621      	mov	r1, r4
     462:	4628      	mov	r0, r5
     464:	4b2c      	ldr	r3, [pc, #176]	; (518 <main+0x248>)
     466:	4798      	blx	r3
		res = f_mount(&fs, "", 1);
     468:	463a      	mov	r2, r7
     46a:	492c      	ldr	r1, [pc, #176]	; (51c <main+0x24c>)
     46c:	4628      	mov	r0, r5
     46e:	4b2c      	ldr	r3, [pc, #176]	; (520 <main+0x250>)
     470:	4798      	blx	r3
     472:	4b2c      	ldr	r3, [pc, #176]	; (524 <main+0x254>)
     474:	7018      	strb	r0, [r3, #0]
		if (res != FR_OK) {
     476:	b118      	cbz	r0, 480 <main+0x1b0>
     478:	4601      	mov	r1, r0
			printf("-E- f_mount pb: 0x%X\n\r", res);
     47a:	482b      	ldr	r0, [pc, #172]	; (528 <main+0x258>)
     47c:	47b0      	blx	r6
     47e:	e7fe      	b.n	47e <main+0x1ae>
			break;
		}
		
		printf ("Opening audio file.\n\r");
     480:	482a      	ldr	r0, [pc, #168]	; (52c <main+0x25c>)
     482:	4b18      	ldr	r3, [pc, #96]	; (4e4 <main+0x214>)
     484:	4798      	blx	r3
		res = f_open(&file_object, (char const *)"0:/monster.wav", FA_OPEN_EXISTING | FA_READ);
     486:	2201      	movs	r2, #1
     488:	4929      	ldr	r1, [pc, #164]	; (530 <main+0x260>)
     48a:	482a      	ldr	r0, [pc, #168]	; (534 <main+0x264>)
     48c:	4b2a      	ldr	r3, [pc, #168]	; (538 <main+0x268>)
     48e:	4798      	blx	r3
     490:	4601      	mov	r1, r0
     492:	4b24      	ldr	r3, [pc, #144]	; (524 <main+0x254>)
     494:	7018      	strb	r0, [r3, #0]
		if (res != FR_OK) {
     496:	b118      	cbz	r0, 4a0 <main+0x1d0>
			printf("-E- f_open pb: 0x%X\n\r", res);
     498:	4828      	ldr	r0, [pc, #160]	; (53c <main+0x26c>)
     49a:	4b12      	ldr	r3, [pc, #72]	; (4e4 <main+0x214>)
     49c:	4798      	blx	r3
			break;
     49e:	e7ee      	b.n	47e <main+0x1ae>
		}
		
		printf ("Skipping WAV header.\n\r");
     4a0:	4827      	ldr	r0, [pc, #156]	; (540 <main+0x270>)
     4a2:	4b10      	ldr	r3, [pc, #64]	; (4e4 <main+0x214>)
     4a4:	4798      	blx	r3
		res = f_read(&file_object, soundBuffers[0], 44, &bytes_read);
     4a6:	4b27      	ldr	r3, [pc, #156]	; (544 <main+0x274>)
     4a8:	222c      	movs	r2, #44	; 0x2c
     4aa:	4927      	ldr	r1, [pc, #156]	; (548 <main+0x278>)
     4ac:	4821      	ldr	r0, [pc, #132]	; (534 <main+0x264>)
     4ae:	4c27      	ldr	r4, [pc, #156]	; (54c <main+0x27c>)
     4b0:	47a0      	blx	r4
     4b2:	4601      	mov	r1, r0
     4b4:	4b1b      	ldr	r3, [pc, #108]	; (524 <main+0x254>)
     4b6:	7018      	strb	r0, [r3, #0]
		if ((res != FR_OK) || (bytes_read != 44)) {
     4b8:	b918      	cbnz	r0, 4c2 <main+0x1f2>
     4ba:	4b22      	ldr	r3, [pc, #136]	; (544 <main+0x274>)
     4bc:	681b      	ldr	r3, [r3, #0]
     4be:	2b2c      	cmp	r3, #44	; 0x2c
     4c0:	d007      	beq.n	4d2 <main+0x202>
			printf("-E- f_read pb: 0x%X\n\r", res);
     4c2:	4823      	ldr	r0, [pc, #140]	; (550 <main+0x280>)
     4c4:	4c07      	ldr	r4, [pc, #28]	; (4e4 <main+0x214>)
     4c6:	47a0      	blx	r4
			printf("-E- f_read bytes: 0x%X\n\r", bytes_read);
     4c8:	4b1e      	ldr	r3, [pc, #120]	; (544 <main+0x274>)
     4ca:	6819      	ldr	r1, [r3, #0]
     4cc:	4821      	ldr	r0, [pc, #132]	; (554 <main+0x284>)
     4ce:	47a0      	blx	r4
			break;
     4d0:	e7d5      	b.n	47e <main+0x1ae>
		}

		printf ("WAV header:\n\r");		
     4d2:	4821      	ldr	r0, [pc, #132]	; (558 <main+0x288>)
     4d4:	4b03      	ldr	r3, [pc, #12]	; (4e4 <main+0x214>)
     4d6:	4798      	blx	r3
		for (i = 0; i < 44; i++) {
     4d8:	2400      	movs	r4, #0
     4da:	e04f      	b.n	57c <main+0x2ac>
     4dc:	0000094d 	.word	0x0000094d
     4e0:	00005e78 	.word	0x00005e78
     4e4:	00004dd1 	.word	0x00004dd1
     4e8:	41008000 	.word	0x41008000
     4ec:	40000002 	.word	0x40000002
     4f0:	40000400 	.word	0x40000400
     4f4:	43002800 	.word	0x43002800
     4f8:	00005e8c 	.word	0x00005e8c
     4fc:	40000800 	.word	0x40000800
     500:	4100a000 	.word	0x4100a000
     504:	200005b0 	.word	0x200005b0
     508:	200005e0 	.word	0x200005e0
     50c:	e000e100 	.word	0xe000e100
     510:	00005e9c 	.word	0x00005e9c
     514:	20000150 	.word	0x20000150
     518:	00004dc1 	.word	0x00004dc1
     51c:	00005fa8 	.word	0x00005fa8
     520:	00001fc1 	.word	0x00001fc1
     524:	20000a00 	.word	0x20000a00
     528:	00005eb4 	.word	0x00005eb4
     52c:	00005ecc 	.word	0x00005ecc
     530:	00005ee4 	.word	0x00005ee4
     534:	20000384 	.word	0x20000384
     538:	00002025 	.word	0x00002025
     53c:	00005ef4 	.word	0x00005ef4
     540:	00005f0c 	.word	0x00005f0c
     544:	200005d0 	.word	0x200005d0
     548:	20000600 	.word	0x20000600
     54c:	000021b5 	.word	0x000021b5
     550:	00005f24 	.word	0x00005f24
     554:	00005f3c 	.word	0x00005f3c
     558:	00005f58 	.word	0x00005f58
			printf ("%02x ", soundBuffers[0][i]);
     55c:	4b9a      	ldr	r3, [pc, #616]	; (7c8 <main+0x4f8>)
     55e:	5d19      	ldrb	r1, [r3, r4]
     560:	489a      	ldr	r0, [pc, #616]	; (7cc <main+0x4fc>)
     562:	4b9b      	ldr	r3, [pc, #620]	; (7d0 <main+0x500>)
     564:	4798      	blx	r3
			if ((i & 3) == 3) {
     566:	f004 0303 	and.w	r3, r4, #3
     56a:	2b03      	cmp	r3, #3
     56c:	f000 80e8 	beq.w	740 <main+0x470>
				printf (" ");
			}
			if ((i & 15) == 15) {
     570:	f004 030f 	and.w	r3, r4, #15
     574:	2b0f      	cmp	r3, #15
     576:	f000 80e7 	beq.w	748 <main+0x478>
		for (i = 0; i < 44; i++) {
     57a:	3401      	adds	r4, #1
     57c:	2c2b      	cmp	r4, #43	; 0x2b
     57e:	dded      	ble.n	55c <main+0x28c>
				printf ("\n\r");
			}
		}
		printf ("\n\r");
     580:	4894      	ldr	r0, [pc, #592]	; (7d4 <main+0x504>)
     582:	4c93      	ldr	r4, [pc, #588]	; (7d0 <main+0x500>)
     584:	47a0      	blx	r4
		
		printf ("Clearing audio buffers.\n\r");
     586:	4894      	ldr	r0, [pc, #592]	; (7d8 <main+0x508>)
     588:	47a0      	blx	r4
		memset (soundBuffers[0], 0, BUFFER_SIZE_BYTES);
     58a:	4d8f      	ldr	r5, [pc, #572]	; (7c8 <main+0x4f8>)
     58c:	f44f 7600 	mov.w	r6, #512	; 0x200
     590:	4632      	mov	r2, r6
     592:	2100      	movs	r1, #0
     594:	4628      	mov	r0, r5
     596:	4c91      	ldr	r4, [pc, #580]	; (7dc <main+0x50c>)
     598:	47a0      	blx	r4
		memset (soundBuffers[1], 0, BUFFER_SIZE_BYTES);
     59a:	4632      	mov	r2, r6
     59c:	2100      	movs	r1, #0
     59e:	19a8      	adds	r0, r5, r6
     5a0:	47a0      	blx	r4
		
		// clear end of file flag
		endOfFile = false;
		lastBlockStarted = false;
     5a2:	2500      	movs	r5, #0
		endOfFile = false;
     5a4:	462c      	mov	r4, r5

		do {
		
			if (!lastBlockStarted) {
     5a6:	2d00      	cmp	r5, #0
     5a8:	d14e      	bne.n	648 <main+0x378>
				// configure descriptor 0
				my_descriptors[0].DESCADDR.bit.DESCADDR = 0x00000000;
     5aa:	4b8d      	ldr	r3, [pc, #564]	; (7e0 <main+0x510>)
     5ac:	2200      	movs	r2, #0
     5ae:	60da      	str	r2, [r3, #12]
				my_descriptors[0].DSTADDR.bit.DSTADDR = (uint32_t)&(I2S->TXDATA.reg);
     5b0:	498c      	ldr	r1, [pc, #560]	; (7e4 <main+0x514>)
     5b2:	6099      	str	r1, [r3, #8]
				my_descriptors[0].SRCADDR.bit.SRCADDR = soundBuffers[0];
     5b4:	4984      	ldr	r1, [pc, #528]	; (7c8 <main+0x4f8>)
     5b6:	6059      	str	r1, [r3, #4]
				my_descriptors[0].SRCADDR.bit.SRCADDR += 512;
     5b8:	6859      	ldr	r1, [r3, #4]
     5ba:	f501 7100 	add.w	r1, r1, #512	; 0x200
     5be:	6059      	str	r1, [r3, #4]
				my_descriptors[0].BTCTRL.bit.BEATSIZE = DMAC_BTCTRL_BEATSIZE_WORD_Val;
     5c0:	8819      	ldrh	r1, [r3, #0]
     5c2:	2002      	movs	r0, #2
     5c4:	f360 2109 	bfi	r1, r0, #8, #2
     5c8:	8019      	strh	r1, [r3, #0]
				my_descriptors[0].BTCTRL.bit.STEPSEL = DMAC_BTCTRL_STEPSEL_SRC_Val;
     5ca:	8818      	ldrh	r0, [r3, #0]
     5cc:	f440 5180 	orr.w	r1, r0, #4096	; 0x1000
     5d0:	8019      	strh	r1, [r3, #0]
				my_descriptors[0].BTCTRL.bit.SRCINC = 1;
     5d2:	8818      	ldrh	r0, [r3, #0]
     5d4:	f440 6180 	orr.w	r1, r0, #1024	; 0x400
     5d8:	8019      	strh	r1, [r3, #0]
				my_descriptors[0].BTCTRL.bit.DSTINC = 0;
     5da:	8819      	ldrh	r1, [r3, #0]
     5dc:	f362 21cb 	bfi	r1, r2, #11, #1
     5e0:	8019      	strh	r1, [r3, #0]
				my_descriptors[0].BTCTRL.bit.EVOSEL = DMAC_BTCTRL_EVOSEL_DISABLE_Val;
     5e2:	8819      	ldrh	r1, [r3, #0]
     5e4:	f362 0142 	bfi	r1, r2, #1, #2
     5e8:	8019      	strh	r1, [r3, #0]
				my_descriptors[0].BTCTRL.bit.BLOCKACT = DMAC_BTCTRL_BLOCKACT_INT_Val;
     5ea:	8819      	ldrh	r1, [r3, #0]
     5ec:	2001      	movs	r0, #1
     5ee:	f360 01c4 	bfi	r1, r0, #3, #2
     5f2:	8019      	strh	r1, [r3, #0]
				my_descriptors[0].BTCTRL.bit.STEPSIZE = DMAC_BTCTRL_STEPSIZE_X1_Val;
     5f4:	8819      	ldrh	r1, [r3, #0]
     5f6:	f362 314f 	bfi	r1, r2, #13, #3
     5fa:	8019      	strh	r1, [r3, #0]
				my_descriptors[0].BTCNT.bit.BTCNT = 512 / 4;
     5fc:	2180      	movs	r1, #128	; 0x80
     5fe:	8059      	strh	r1, [r3, #2]
				my_descriptors[0].BTCTRL.bit.VALID = 1;
     600:	8818      	ldrh	r0, [r3, #0]
     602:	f040 0101 	orr.w	r1, r0, #1
     606:	8019      	strh	r1, [r3, #0]

				// start dma playback of buffer 0
				myFlag = false;
     608:	4b77      	ldr	r3, [pc, #476]	; (7e8 <main+0x518>)
     60a:	601a      	str	r2, [r3, #0]
				DMAC->Channel[0].CHINTFLAG.bit.TCMPL = 1;
     60c:	4b77      	ldr	r3, [pc, #476]	; (7ec <main+0x51c>)
     60e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
     612:	f042 0202 	orr.w	r2, r2, #2
     616:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
				DMAC->Channel[0].CHINTENSET.bit.TERR = 1;
     61a:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
     61e:	f042 0201 	orr.w	r2, r2, #1
     622:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				DMAC->Channel[0].CHINTENSET.bit.TCMPL = 1;
     626:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
     62a:	f042 0202 	orr.w	r2, r2, #2
     62e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     632:	f44f 6180 	mov.w	r1, #1024	; 0x400
     636:	4a6e      	ldr	r2, [pc, #440]	; (7f0 <main+0x520>)
     638:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
			    gpio_set_pin_level (PC10, true);
				DMAC->Channel[0].CHCTRLA.bit.ENABLE = 1;
     63c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     63e:	f042 0202 	orr.w	r2, r2, #2
     642:	641a      	str	r2, [r3, #64]	; 0x40
		
				// update last block started flag
				if (endOfFile) {
     644:	b104      	cbz	r4, 648 <main+0x378>
					lastBlockStarted = true;
     646:	4625      	mov	r5, r4
				}
			}
		
			if (!endOfFile) {
     648:	2c00      	cmp	r4, #0
     64a:	f000 8081 	beq.w	750 <main+0x480>
					lastBlockStarted = false;
				}
			}

			// wait for dma playback of buffer 0 to complete
			while (!myFlag) {
     64e:	4b66      	ldr	r3, [pc, #408]	; (7e8 <main+0x518>)
     650:	681b      	ldr	r3, [r3, #0]
     652:	2b00      	cmp	r3, #0
     654:	d0fb      	beq.n	64e <main+0x37e>
			}
			DMAC->Channel[0].CHCTRLA.bit.ENABLE = 0;
     656:	4b65      	ldr	r3, [pc, #404]	; (7ec <main+0x51c>)
     658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     65a:	f36f 0241 	bfc	r2, #1, #1
     65e:	641a      	str	r2, [r3, #64]	; 0x40
			
			if (endOfFile && lastBlockStarted) {
     660:	b10c      	cbz	r4, 666 <main+0x396>
     662:	2d00      	cmp	r5, #0
     664:	d15c      	bne.n	720 <main+0x450>
				break;
			}
		
			if (!lastBlockStarted) {
     666:	2d00      	cmp	r5, #0
     668:	d149      	bne.n	6fe <main+0x42e>
				// configure descriptor 0
				my_descriptors[0].DESCADDR.bit.DESCADDR = 0x00000000;
     66a:	4b5d      	ldr	r3, [pc, #372]	; (7e0 <main+0x510>)
     66c:	2200      	movs	r2, #0
     66e:	60da      	str	r2, [r3, #12]
				my_descriptors[0].DSTADDR.bit.DSTADDR = &(I2S->TXDATA.reg);
     670:	495c      	ldr	r1, [pc, #368]	; (7e4 <main+0x514>)
     672:	6099      	str	r1, [r3, #8]
				my_descriptors[0].SRCADDR.bit.SRCADDR = soundBuffers[1];
     674:	495f      	ldr	r1, [pc, #380]	; (7f4 <main+0x524>)
     676:	6059      	str	r1, [r3, #4]
				my_descriptors[0].SRCADDR.bit.SRCADDR += 512;
     678:	6859      	ldr	r1, [r3, #4]
     67a:	f501 7100 	add.w	r1, r1, #512	; 0x200
     67e:	6059      	str	r1, [r3, #4]
				my_descriptors[0].BTCTRL.bit.BEATSIZE = DMAC_BTCTRL_BEATSIZE_WORD_Val;
     680:	8819      	ldrh	r1, [r3, #0]
     682:	2002      	movs	r0, #2
     684:	f360 2109 	bfi	r1, r0, #8, #2
     688:	8019      	strh	r1, [r3, #0]
				my_descriptors[0].BTCTRL.bit.STEPSEL = DMAC_BTCTRL_STEPSEL_SRC_Val;
     68a:	8818      	ldrh	r0, [r3, #0]
     68c:	f440 5180 	orr.w	r1, r0, #4096	; 0x1000
     690:	8019      	strh	r1, [r3, #0]
				my_descriptors[0].BTCTRL.bit.SRCINC = 1;
     692:	8818      	ldrh	r0, [r3, #0]
     694:	f440 6180 	orr.w	r1, r0, #1024	; 0x400
     698:	8019      	strh	r1, [r3, #0]
				my_descriptors[0].BTCTRL.bit.DSTINC = 0;
     69a:	8819      	ldrh	r1, [r3, #0]
     69c:	f362 21cb 	bfi	r1, r2, #11, #1
     6a0:	8019      	strh	r1, [r3, #0]
				my_descriptors[0].BTCTRL.bit.EVOSEL = DMAC_BTCTRL_EVOSEL_DISABLE_Val;
     6a2:	8819      	ldrh	r1, [r3, #0]
     6a4:	f362 0142 	bfi	r1, r2, #1, #2
     6a8:	8019      	strh	r1, [r3, #0]
				my_descriptors[0].BTCTRL.bit.BLOCKACT = DMAC_BTCTRL_BLOCKACT_INT_Val;
     6aa:	8819      	ldrh	r1, [r3, #0]
     6ac:	2001      	movs	r0, #1
     6ae:	f360 01c4 	bfi	r1, r0, #3, #2
     6b2:	8019      	strh	r1, [r3, #0]
				my_descriptors[0].BTCTRL.bit.STEPSIZE = DMAC_BTCTRL_STEPSIZE_X1_Val;
     6b4:	8819      	ldrh	r1, [r3, #0]
     6b6:	f362 314f 	bfi	r1, r2, #13, #3
     6ba:	8019      	strh	r1, [r3, #0]
				my_descriptors[0].BTCNT.bit.BTCNT = 512 / 4;
     6bc:	2180      	movs	r1, #128	; 0x80
     6be:	8059      	strh	r1, [r3, #2]
				my_descriptors[0].BTCTRL.bit.VALID = 1;
     6c0:	8818      	ldrh	r0, [r3, #0]
     6c2:	f040 0101 	orr.w	r1, r0, #1
     6c6:	8019      	strh	r1, [r3, #0]

				// start dma playback of buffer 1
				myFlag = false;
     6c8:	4b47      	ldr	r3, [pc, #284]	; (7e8 <main+0x518>)
     6ca:	601a      	str	r2, [r3, #0]
				DMAC->Channel[0].CHINTFLAG.bit.TCMPL = 1;
     6cc:	4b47      	ldr	r3, [pc, #284]	; (7ec <main+0x51c>)
     6ce:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
     6d2:	f042 0202 	orr.w	r2, r2, #2
     6d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
				DMAC->Channel[0].CHINTENSET.bit.TERR = 1;
     6da:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
     6de:	f042 0201 	orr.w	r2, r2, #1
     6e2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				DMAC->Channel[0].CHINTENSET.bit.TCMPL = 1;
     6e6:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
     6ea:	f042 0202 	orr.w	r2, r2, #2
     6ee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				DMAC->Channel[0].CHCTRLA.bit.ENABLE = 1;
     6f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     6f4:	f042 0202 	orr.w	r2, r2, #2
     6f8:	641a      	str	r2, [r3, #64]	; 0x40

				// update last block started flag
				if (endOfFile) {
     6fa:	b104      	cbz	r4, 6fe <main+0x42e>
					lastBlockStarted = true;
     6fc:	4625      	mov	r5, r4
				}
			}
		
			if (!endOfFile) {
     6fe:	2c00      	cmp	r4, #0
     700:	d045      	beq.n	78e <main+0x4be>
					lastBlockStarted = false;
				}
			}

			// wait for dma playback of buffer 1 to complete
			while (!myFlag) {
     702:	4b39      	ldr	r3, [pc, #228]	; (7e8 <main+0x518>)
     704:	681b      	ldr	r3, [r3, #0]
     706:	2b00      	cmp	r3, #0
     708:	d0fb      	beq.n	702 <main+0x432>
			}
			DMAC->Channel[0].CHCTRLA.bit.ENABLE = 0;
     70a:	4b38      	ldr	r3, [pc, #224]	; (7ec <main+0x51c>)
     70c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     70e:	f36f 0241 	bfc	r2, #1, #1
     712:	641a      	str	r2, [r3, #64]	; 0x40

			if (endOfFile && lastBlockStarted) {
     714:	2c00      	cmp	r4, #0
     716:	f43f af46 	beq.w	5a6 <main+0x2d6>
     71a:	2d00      	cmp	r5, #0
     71c:	f43f af43 	beq.w	5a6 <main+0x2d6>
				break;
			}
			
		} while (1);

		printf ("\n\r\n\r");
     720:	4835      	ldr	r0, [pc, #212]	; (7f8 <main+0x528>)
     722:	4c2b      	ldr	r4, [pc, #172]	; (7d0 <main+0x500>)
     724:	47a0      	blx	r4
		
		printf ("Closing audio file.\n\r");
     726:	4835      	ldr	r0, [pc, #212]	; (7fc <main+0x52c>)
     728:	47a0      	blx	r4
		res = f_close(&file_object);
     72a:	4835      	ldr	r0, [pc, #212]	; (800 <main+0x530>)
     72c:	4b35      	ldr	r3, [pc, #212]	; (804 <main+0x534>)
     72e:	4798      	blx	r3
     730:	4601      	mov	r1, r0
     732:	4b35      	ldr	r3, [pc, #212]	; (808 <main+0x538>)
     734:	7018      	strb	r0, [r3, #0]
		if (res != FR_OK) {
     736:	2800      	cmp	r0, #0
     738:	d072      	beq.n	820 <main+0x550>
			printf("-E- f_close pb: 0x%X\n\r", res);
     73a:	4834      	ldr	r0, [pc, #208]	; (80c <main+0x53c>)
     73c:	47a0      	blx	r4
			break;
     73e:	e69e      	b.n	47e <main+0x1ae>
				printf (" ");
     740:	2020      	movs	r0, #32
     742:	4b33      	ldr	r3, [pc, #204]	; (810 <main+0x540>)
     744:	4798      	blx	r3
     746:	e713      	b.n	570 <main+0x2a0>
				printf ("\n\r");
     748:	4822      	ldr	r0, [pc, #136]	; (7d4 <main+0x504>)
     74a:	4b21      	ldr	r3, [pc, #132]	; (7d0 <main+0x500>)
     74c:	4798      	blx	r3
     74e:	e714      	b.n	57a <main+0x2aa>
				res = f_read(&file_object, soundBuffers[1], 512, &bytes_read);
     750:	4e30      	ldr	r6, [pc, #192]	; (814 <main+0x544>)
     752:	4633      	mov	r3, r6
     754:	f44f 7200 	mov.w	r2, #512	; 0x200
     758:	4926      	ldr	r1, [pc, #152]	; (7f4 <main+0x524>)
     75a:	4829      	ldr	r0, [pc, #164]	; (800 <main+0x530>)
     75c:	4f2e      	ldr	r7, [pc, #184]	; (818 <main+0x548>)
     75e:	47b8      	blx	r7
     760:	4b29      	ldr	r3, [pc, #164]	; (808 <main+0x538>)
     762:	7018      	strb	r0, [r3, #0]
				if (bytes_read < 512) {
     764:	6831      	ldr	r1, [r6, #0]
     766:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
     76a:	f4bf af70 	bcs.w	64e <main+0x37e>
					printf ("only read %d bytes\n\r", bytes_read);
     76e:	482b      	ldr	r0, [pc, #172]	; (81c <main+0x54c>)
     770:	4b17      	ldr	r3, [pc, #92]	; (7d0 <main+0x500>)
     772:	4798      	blx	r3
					memset (&soundBuffers[1][bytes_read], 0, 512 - bytes_read);
     774:	6832      	ldr	r2, [r6, #0]
     776:	f502 7300 	add.w	r3, r2, #512	; 0x200
     77a:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
     77e:	2100      	movs	r1, #0
     780:	4811      	ldr	r0, [pc, #68]	; (7c8 <main+0x4f8>)
     782:	4418      	add	r0, r3
     784:	4b15      	ldr	r3, [pc, #84]	; (7dc <main+0x50c>)
     786:	4798      	blx	r3
					lastBlockStarted = false;
     788:	4625      	mov	r5, r4
					endOfFile = true;
     78a:	2401      	movs	r4, #1
     78c:	e75f      	b.n	64e <main+0x37e>
				res = f_read(&file_object, soundBuffers[0], 512, &bytes_read);
     78e:	4e21      	ldr	r6, [pc, #132]	; (814 <main+0x544>)
     790:	4633      	mov	r3, r6
     792:	f44f 7200 	mov.w	r2, #512	; 0x200
     796:	490c      	ldr	r1, [pc, #48]	; (7c8 <main+0x4f8>)
     798:	4819      	ldr	r0, [pc, #100]	; (800 <main+0x530>)
     79a:	4f1f      	ldr	r7, [pc, #124]	; (818 <main+0x548>)
     79c:	47b8      	blx	r7
     79e:	4b1a      	ldr	r3, [pc, #104]	; (808 <main+0x538>)
     7a0:	7018      	strb	r0, [r3, #0]
				if (bytes_read < 512) {
     7a2:	6831      	ldr	r1, [r6, #0]
     7a4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
     7a8:	d2ab      	bcs.n	702 <main+0x432>
					printf ("only read %d bytes\n\r", bytes_read);
     7aa:	481c      	ldr	r0, [pc, #112]	; (81c <main+0x54c>)
     7ac:	4b08      	ldr	r3, [pc, #32]	; (7d0 <main+0x500>)
     7ae:	4798      	blx	r3
					memset (&soundBuffers[0][bytes_read], 0, 512 - bytes_read);
     7b0:	6833      	ldr	r3, [r6, #0]
     7b2:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
     7b6:	2100      	movs	r1, #0
     7b8:	4803      	ldr	r0, [pc, #12]	; (7c8 <main+0x4f8>)
     7ba:	4418      	add	r0, r3
     7bc:	4b07      	ldr	r3, [pc, #28]	; (7dc <main+0x50c>)
     7be:	4798      	blx	r3
					lastBlockStarted = false;
     7c0:	4625      	mov	r5, r4
					endOfFile = true;
     7c2:	2401      	movs	r4, #1
     7c4:	e79d      	b.n	702 <main+0x432>
     7c6:	bf00      	nop
     7c8:	20000600 	.word	0x20000600
     7cc:	00005f68 	.word	0x00005f68
     7d0:	00004dd1 	.word	0x00004dd1
     7d4:	00005eb0 	.word	0x00005eb0
     7d8:	00005f70 	.word	0x00005f70
     7dc:	00004dc1 	.word	0x00004dc1
     7e0:	200005b0 	.word	0x200005b0
     7e4:	43002830 	.word	0x43002830
     7e8:	2000008c 	.word	0x2000008c
     7ec:	4100a000 	.word	0x4100a000
     7f0:	41008000 	.word	0x41008000
     7f4:	20000800 	.word	0x20000800
     7f8:	00005fa4 	.word	0x00005fa4
     7fc:	00005fac 	.word	0x00005fac
     800:	20000384 	.word	0x20000384
     804:	0000242d 	.word	0x0000242d
     808:	20000a00 	.word	0x20000a00
     80c:	00005fc4 	.word	0x00005fc4
     810:	00004e01 	.word	0x00004e01
     814:	200005d0 	.word	0x200005d0
     818:	000021b5 	.word	0x000021b5
     81c:	00005f8c 	.word	0x00005f8c
		}
		
		printf ("Disabling DMA\n\r");
     820:	481b      	ldr	r0, [pc, #108]	; (890 <main+0x5c0>)
     822:	4b1c      	ldr	r3, [pc, #112]	; (894 <main+0x5c4>)
     824:	4798      	blx	r3

		// disable channel 0
		DMAC->Channel[0].CHCTRLA.bit.ENABLE = 0;
     826:	4a1c      	ldr	r2, [pc, #112]	; (898 <main+0x5c8>)
     828:	6c13      	ldr	r3, [r2, #64]	; 0x40
     82a:	f36f 0341 	bfc	r3, #1, #1
     82e:	6413      	str	r3, [r2, #64]	; 0x40
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     830:	4b1a      	ldr	r3, [pc, #104]	; (89c <main+0x5cc>)
     832:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     836:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     83a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     83e:	f3bf 8f6f 	isb	sy
     842:	2101      	movs	r1, #1
     844:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
     848:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     84c:	f3bf 8f6f 	isb	sy
     850:	2102      	movs	r1, #2
     852:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
     856:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     85a:	f3bf 8f6f 	isb	sy
     85e:	2104      	movs	r1, #4
     860:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
     864:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     868:	f3bf 8f6f 	isb	sy
     86c:	2108      	movs	r1, #8
     86e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
     872:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     876:	f3bf 8f6f 	isb	sy
		NVIC_DisableIRQ(DMAC_0_IRQn);
		NVIC_DisableIRQ(DMAC_1_IRQn);
		NVIC_DisableIRQ(DMAC_2_IRQn);
		NVIC_DisableIRQ(DMAC_3_IRQn);
		NVIC_DisableIRQ(DMAC_4_IRQn);
		DMAC->CTRL.bit.DMAENABLE = 0;
     87a:	8813      	ldrh	r3, [r2, #0]
     87c:	f36f 0341 	bfc	r3, #1, #1
     880:	8013      	strh	r3, [r2, #0]
		MCLK->AHBMASK.bit.DMAC_ = 0;
     882:	4b07      	ldr	r3, [pc, #28]	; (8a0 <main+0x5d0>)
     884:	691a      	ldr	r2, [r3, #16]
     886:	f36f 2249 	bfc	r2, #9, #1
     88a:	611a      	str	r2, [r3, #16]
     88c:	e5f7      	b.n	47e <main+0x1ae>
     88e:	bf00      	nop
     890:	00005fdc 	.word	0x00005fdc
     894:	00004dd1 	.word	0x00004dd1
     898:	4100a000 	.word	0x4100a000
     89c:	e000e100 	.word	0xe000e100
     8a0:	40000800 	.word	0x40000800

000008a4 <DMAC_0_Handler>:
}
#endif

void DMAC_0_Handler (void)
{
	DMAC->Channel[0].CHINTFLAG.bit.TCMPL = 1;
     8a4:	4a0a      	ldr	r2, [pc, #40]	; (8d0 <DMAC_0_Handler+0x2c>)
     8a6:	f892 304e 	ldrb.w	r3, [r2, #78]	; 0x4e
     8aa:	f043 0302 	orr.w	r3, r3, #2
     8ae:	f882 304e 	strb.w	r3, [r2, #78]	; 0x4e
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8b2:	4b08      	ldr	r3, [pc, #32]	; (8d4 <DMAC_0_Handler+0x30>)
     8b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
     8b8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8bc:	2202      	movs	r2, #2
     8be:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    gpio_set_pin_level (PC10, false);
    gpio_set_pin_level (PC01, true);
	myFlag = true;
     8c2:	2001      	movs	r0, #1
     8c4:	4904      	ldr	r1, [pc, #16]	; (8d8 <DMAC_0_Handler+0x34>)
     8c6:	6008      	str	r0, [r1, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8c8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     8cc:	4770      	bx	lr
     8ce:	bf00      	nop
     8d0:	4100a000 	.word	0x4100a000
     8d4:	41008000 	.word	0x41008000
     8d8:	2000008c 	.word	0x2000008c

000008dc <DMAC_1_Handler>:

	// printf ("DMAC_0_Handler: %08x\n\r", DMAC->Channel[0].CHINTFLAG.reg);
}

void DMAC_1_Handler (void)
{
     8dc:	b508      	push	{r3, lr}
	printf ("DMAC_0_Handler: %08x\n\r", DMAC->Channel[0].CHINTFLAG.reg);
     8de:	4b03      	ldr	r3, [pc, #12]	; (8ec <DMAC_1_Handler+0x10>)
     8e0:	f893 104e 	ldrb.w	r1, [r3, #78]	; 0x4e
     8e4:	4802      	ldr	r0, [pc, #8]	; (8f0 <DMAC_1_Handler+0x14>)
     8e6:	4b03      	ldr	r3, [pc, #12]	; (8f4 <DMAC_1_Handler+0x18>)
     8e8:	4798      	blx	r3
     8ea:	bd08      	pop	{r3, pc}
     8ec:	4100a000 	.word	0x4100a000
     8f0:	00005fec 	.word	0x00005fec
     8f4:	00004dd1 	.word	0x00004dd1

000008f8 <DMAC_2_Handler>:
}

void DMAC_2_Handler (void)
{
     8f8:	b508      	push	{r3, lr}
	printf ("DMAC_0_Handler: %08x\n\r", DMAC->Channel[0].CHINTFLAG.reg);
     8fa:	4b03      	ldr	r3, [pc, #12]	; (908 <DMAC_2_Handler+0x10>)
     8fc:	f893 104e 	ldrb.w	r1, [r3, #78]	; 0x4e
     900:	4802      	ldr	r0, [pc, #8]	; (90c <DMAC_2_Handler+0x14>)
     902:	4b03      	ldr	r3, [pc, #12]	; (910 <DMAC_2_Handler+0x18>)
     904:	4798      	blx	r3
     906:	bd08      	pop	{r3, pc}
     908:	4100a000 	.word	0x4100a000
     90c:	00005fec 	.word	0x00005fec
     910:	00004dd1 	.word	0x00004dd1

00000914 <DMAC_3_Handler>:
}

void DMAC_3_Handler (void)
{
     914:	b508      	push	{r3, lr}
	printf ("DMAC_0_Handler: %08x\n\r", DMAC->Channel[0].CHINTFLAG.reg);
     916:	4b03      	ldr	r3, [pc, #12]	; (924 <DMAC_3_Handler+0x10>)
     918:	f893 104e 	ldrb.w	r1, [r3, #78]	; 0x4e
     91c:	4802      	ldr	r0, [pc, #8]	; (928 <DMAC_3_Handler+0x14>)
     91e:	4b03      	ldr	r3, [pc, #12]	; (92c <DMAC_3_Handler+0x18>)
     920:	4798      	blx	r3
     922:	bd08      	pop	{r3, pc}
     924:	4100a000 	.word	0x4100a000
     928:	00005fec 	.word	0x00005fec
     92c:	00004dd1 	.word	0x00004dd1

00000930 <DMAC_4_Handler>:
}

void DMAC_4_Handler (void)
{
     930:	b508      	push	{r3, lr}
	printf ("DMAC_0_Handler: %08x\n\r", DMAC->Channel[0].CHINTFLAG.reg);
     932:	4b03      	ldr	r3, [pc, #12]	; (940 <DMAC_4_Handler+0x10>)
     934:	f893 104e 	ldrb.w	r1, [r3, #78]	; 0x4e
     938:	4802      	ldr	r0, [pc, #8]	; (944 <DMAC_4_Handler+0x14>)
     93a:	4b03      	ldr	r3, [pc, #12]	; (948 <DMAC_4_Handler+0x18>)
     93c:	4798      	blx	r3
     93e:	bd08      	pop	{r3, pc}
     940:	4100a000 	.word	0x4100a000
     944:	00005fec 	.word	0x00005fec
     948:	00004dd1 	.word	0x00004dd1

0000094c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     94c:	b508      	push	{r3, lr}
	system_init();
     94e:	4b04      	ldr	r3, [pc, #16]	; (960 <atmel_start_init+0x14>)
     950:	4798      	blx	r3
	stdio_redirect_init();
     952:	4b04      	ldr	r3, [pc, #16]	; (964 <atmel_start_init+0x18>)
     954:	4798      	blx	r3
	sd_mmc_stack_init();
     956:	4b04      	ldr	r3, [pc, #16]	; (968 <atmel_start_init+0x1c>)
     958:	4798      	blx	r3
	diskio_init();
     95a:	4b04      	ldr	r3, [pc, #16]	; (96c <atmel_start_init+0x20>)
     95c:	4798      	blx	r3
     95e:	bd08      	pop	{r3, pc}
     960:	00001039 	.word	0x00001039
     964:	00004a49 	.word	0x00004a49
     968:	0000496d 	.word	0x0000496d
     96c:	00000c0d 	.word	0x00000c0d

00000970 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     970:	e7fe      	b.n	970 <Dummy_Handler>
	...

00000974 <Reset_Handler>:
{
     974:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     976:	4b15      	ldr	r3, [pc, #84]	; (9cc <Reset_Handler+0x58>)
     978:	4a15      	ldr	r2, [pc, #84]	; (9d0 <Reset_Handler+0x5c>)
     97a:	429a      	cmp	r2, r3
     97c:	d009      	beq.n	992 <Reset_Handler+0x1e>
     97e:	4b13      	ldr	r3, [pc, #76]	; (9cc <Reset_Handler+0x58>)
     980:	4a13      	ldr	r2, [pc, #76]	; (9d0 <Reset_Handler+0x5c>)
     982:	e003      	b.n	98c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     984:	6811      	ldr	r1, [r2, #0]
     986:	6019      	str	r1, [r3, #0]
     988:	3304      	adds	r3, #4
     98a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     98c:	4911      	ldr	r1, [pc, #68]	; (9d4 <Reset_Handler+0x60>)
     98e:	428b      	cmp	r3, r1
     990:	d3f8      	bcc.n	984 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     992:	4b11      	ldr	r3, [pc, #68]	; (9d8 <Reset_Handler+0x64>)
     994:	e002      	b.n	99c <Reset_Handler+0x28>
                *pDest++ = 0;
     996:	2200      	movs	r2, #0
     998:	601a      	str	r2, [r3, #0]
     99a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     99c:	4a0f      	ldr	r2, [pc, #60]	; (9dc <Reset_Handler+0x68>)
     99e:	4293      	cmp	r3, r2
     9a0:	d3f9      	bcc.n	996 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     9a2:	4b0f      	ldr	r3, [pc, #60]	; (9e0 <Reset_Handler+0x6c>)
     9a4:	4a0f      	ldr	r2, [pc, #60]	; (9e4 <Reset_Handler+0x70>)
     9a6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     9aa:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     9ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     9b0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     9b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
     9b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     9bc:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     9c0:	4b09      	ldr	r3, [pc, #36]	; (9e8 <Reset_Handler+0x74>)
     9c2:	4798      	blx	r3
        main();
     9c4:	4b09      	ldr	r3, [pc, #36]	; (9ec <Reset_Handler+0x78>)
     9c6:	4798      	blx	r3
     9c8:	e7fe      	b.n	9c8 <Reset_Handler+0x54>
     9ca:	bf00      	nop
     9cc:	20000000 	.word	0x20000000
     9d0:	00006410 	.word	0x00006410
     9d4:	2000006c 	.word	0x2000006c
     9d8:	20000070 	.word	0x20000070
     9dc:	20000a74 	.word	0x20000a74
     9e0:	e000ed00 	.word	0xe000ed00
     9e4:	00000000 	.word	0x00000000
     9e8:	00004d79 	.word	0x00004d79
     9ec:	000002d1 	.word	0x000002d1

000009f0 <sd_mmc_test_unit_ready>:
 *
 * \return CTRL_GOOD or card status like CTRL_NO_PRESENT, CTRL_BUSY, CTRL_FAIL.
 *
 */
static ctrl_status_t sd_mmc_test_unit_ready(uint8_t slot)
{
     9f0:	b510      	push	{r4, lr}
     9f2:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot)) {
     9f4:	4b0b      	ldr	r3, [pc, #44]	; (a24 <sd_mmc_test_unit_ready+0x34>)
     9f6:	4798      	blx	r3
     9f8:	2801      	cmp	r0, #1
     9fa:	d004      	beq.n	a06 <sd_mmc_test_unit_ready+0x16>
     9fc:	b128      	cbz	r0, a0a <sd_mmc_test_unit_ready+0x1a>
     9fe:	2802      	cmp	r0, #2
     a00:	d00d      	beq.n	a1e <sd_mmc_test_unit_ready+0x2e>
		return CTRL_BUSY;

	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     a02:	2001      	movs	r0, #1
     a04:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
     a06:	2003      	movs	r0, #3
     a08:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
     a0a:	4620      	mov	r0, r4
     a0c:	4b06      	ldr	r3, [pc, #24]	; (a28 <sd_mmc_test_unit_ready+0x38>)
     a0e:	4798      	blx	r3
     a10:	f010 0f03 	tst.w	r0, #3
     a14:	d101      	bne.n	a1a <sd_mmc_test_unit_ready+0x2a>
			return CTRL_NO_PRESENT;
     a16:	2002      	movs	r0, #2
	}
}
     a18:	bd10      	pop	{r4, pc}
			return CTRL_GOOD;
     a1a:	2000      	movs	r0, #0
     a1c:	bd10      	pop	{r4, pc}
		return CTRL_NO_PRESENT;
     a1e:	2002      	movs	r0, #2
     a20:	bd10      	pop	{r4, pc}
     a22:	bf00      	nop
     a24:	000045b9 	.word	0x000045b9
     a28:	00004601 	.word	0x00004601

00000a2c <sd_mmc_read_capacity>:
 *
 * \return CTRL_GOOD or card status like CTRL_NO_PRESENT, CTRL_BUSY, CTRL_FAIL.
 *
 */
static ctrl_status_t sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
     a2c:	b538      	push	{r3, r4, r5, lr}
     a2e:	4604      	mov	r4, r0
     a30:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
     a32:	4b04      	ldr	r3, [pc, #16]	; (a44 <sd_mmc_read_capacity+0x18>)
     a34:	4798      	blx	r3
     a36:	0040      	lsls	r0, r0, #1
     a38:	3801      	subs	r0, #1
     a3a:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
     a3c:	4620      	mov	r0, r4
     a3e:	4b02      	ldr	r3, [pc, #8]	; (a48 <sd_mmc_read_capacity+0x1c>)
     a40:	4798      	blx	r3
}
     a42:	bd38      	pop	{r3, r4, r5, pc}
     a44:	00004625 	.word	0x00004625
     a48:	000009f1 	.word	0x000009f1

00000a4c <sd_mmc_mem_2_ram>:
 *
 * \return CTRL_GOOD or card status like CTRL_NO_PRESENT, CTRL_FAIL
 *
 */
static ctrl_status_t sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
     a4c:	b510      	push	{r4, lr}
     a4e:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
     a50:	2201      	movs	r2, #1
     a52:	4b0b      	ldr	r3, [pc, #44]	; (a80 <sd_mmc_mem_2_ram+0x34>)
     a54:	4798      	blx	r3
     a56:	b118      	cbz	r0, a60 <sd_mmc_mem_2_ram+0x14>
     a58:	2802      	cmp	r0, #2
     a5a:	d10f      	bne.n	a7c <sd_mmc_mem_2_ram+0x30>
		if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false))
			return CTRL_FAIL;
		break;
	}
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
     a5c:	2002      	movs	r0, #2
     a5e:	bd10      	pop	{r4, pc}
		if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1))
     a60:	2101      	movs	r1, #1
     a62:	4620      	mov	r0, r4
     a64:	4b07      	ldr	r3, [pc, #28]	; (a84 <sd_mmc_mem_2_ram+0x38>)
     a66:	4798      	blx	r3
     a68:	b108      	cbz	r0, a6e <sd_mmc_mem_2_ram+0x22>
			return CTRL_FAIL;
     a6a:	2001      	movs	r0, #1
     a6c:	bd10      	pop	{r4, pc}
		if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false))
     a6e:	4b06      	ldr	r3, [pc, #24]	; (a88 <sd_mmc_mem_2_ram+0x3c>)
     a70:	4798      	blx	r3
     a72:	b908      	cbnz	r0, a78 <sd_mmc_mem_2_ram+0x2c>
	default:
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
     a74:	2000      	movs	r0, #0
}
     a76:	bd10      	pop	{r4, pc}
			return CTRL_FAIL;
     a78:	2001      	movs	r0, #1
     a7a:	bd10      	pop	{r4, pc}
		return CTRL_FAIL;
     a7c:	2001      	movs	r0, #1
     a7e:	bd10      	pop	{r4, pc}
     a80:	000046c1 	.word	0x000046c1
     a84:	0000475d 	.word	0x0000475d
     a88:	000047a9 	.word	0x000047a9

00000a8c <sd_mmc_ram_2_mem>:
 *
 * \return CTRL_GOOD or card status like CTRL_NO_PRESENT, CTRL_FAIL
 *
 */
static ctrl_status_t sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
     a8c:	b510      	push	{r4, lr}
     a8e:	4614      	mov	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
     a90:	2201      	movs	r2, #1
     a92:	4b0b      	ldr	r3, [pc, #44]	; (ac0 <sd_mmc_ram_2_mem+0x34>)
     a94:	4798      	blx	r3
     a96:	b118      	cbz	r0, aa0 <sd_mmc_ram_2_mem+0x14>
     a98:	2802      	cmp	r0, #2
     a9a:	d10f      	bne.n	abc <sd_mmc_ram_2_mem+0x30>
		if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false))
			return CTRL_FAIL;
		break;
	}
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
     a9c:	2002      	movs	r0, #2
     a9e:	bd10      	pop	{r4, pc}
		if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1))
     aa0:	2101      	movs	r1, #1
     aa2:	4620      	mov	r0, r4
     aa4:	4b07      	ldr	r3, [pc, #28]	; (ac4 <sd_mmc_ram_2_mem+0x38>)
     aa6:	4798      	blx	r3
     aa8:	b108      	cbz	r0, aae <sd_mmc_ram_2_mem+0x22>
			return CTRL_FAIL;
     aaa:	2001      	movs	r0, #1
     aac:	bd10      	pop	{r4, pc}
		if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false))
     aae:	4b06      	ldr	r3, [pc, #24]	; (ac8 <sd_mmc_ram_2_mem+0x3c>)
     ab0:	4798      	blx	r3
     ab2:	b908      	cbnz	r0, ab8 <sd_mmc_ram_2_mem+0x2c>
	default:
		return CTRL_FAIL;
	}

	return CTRL_GOOD;
     ab4:	2000      	movs	r0, #0
}
     ab6:	bd10      	pop	{r4, pc}
			return CTRL_FAIL;
     ab8:	2001      	movs	r0, #1
     aba:	bd10      	pop	{r4, pc}
		return CTRL_FAIL;
     abc:	2001      	movs	r0, #1
     abe:	bd10      	pop	{r4, pc}
     ac0:	00004819 	.word	0x00004819
     ac4:	000048b9 	.word	0x000048b9
     ac8:	00004905 	.word	0x00004905

00000acc <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
dstatus_t disk_initialize(uint8_t drv)
{
     acc:	b538      	push	{r3, r4, r5, lr}
     ace:	4605      	mov	r5, r0
	int           i;
	ctrl_status_t mem_status;

	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i++) {
     ad0:	2400      	movs	r4, #0
     ad2:	2c01      	cmp	r4, #1
     ad4:	dc07      	bgt.n	ae6 <disk_initialize+0x1a>
		mem_status = sd_mmc_test_unit_ready(drv);
     ad6:	4628      	mov	r0, r5
     ad8:	4b08      	ldr	r3, [pc, #32]	; (afc <disk_initialize+0x30>)
     ada:	4798      	blx	r3
     adc:	4603      	mov	r3, r0
		if (CTRL_BUSY != mem_status) {
     ade:	2803      	cmp	r0, #3
     ae0:	d101      	bne.n	ae6 <disk_initialize+0x1a>
	for (i = 0; i < 2; i++) {
     ae2:	3401      	adds	r4, #1
     ae4:	e7f5      	b.n	ad2 <disk_initialize+0x6>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
     ae6:	b10b      	cbz	r3, aec <disk_initialize+0x20>
		return STA_NOINIT;
     ae8:	2001      	movs	r0, #1
     aea:	bd38      	pop	{r3, r4, r5, pc}
	}

	/* Check Write Protection Status */
	if (sd_mmc_is_write_protected(drv)) {
     aec:	4628      	mov	r0, r5
     aee:	4b04      	ldr	r3, [pc, #16]	; (b00 <disk_initialize+0x34>)
     af0:	4798      	blx	r3
     af2:	b108      	cbz	r0, af8 <disk_initialize+0x2c>
		return STA_PROTECT;
     af4:	2004      	movs	r0, #4
     af6:	bd38      	pop	{r3, r4, r5, pc}
	}

	/* The memory should already be initialized */
	return 0;
     af8:	2000      	movs	r0, #0
}
     afa:	bd38      	pop	{r3, r4, r5, pc}
     afc:	000009f1 	.word	0x000009f1
     b00:	00004649 	.word	0x00004649

00000b04 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
dstatus_t disk_status(uint8_t drv)
{
     b04:	b508      	push	{r3, lr}
	switch (sd_mmc_test_unit_ready(drv)) {
     b06:	4b05      	ldr	r3, [pc, #20]	; (b1c <disk_status+0x18>)
     b08:	4798      	blx	r3
     b0a:	b118      	cbz	r0, b14 <disk_status+0x10>
     b0c:	2802      	cmp	r0, #2
     b0e:	d003      	beq.n	b18 <disk_status+0x14>
	case CTRL_GOOD:
		return ERR_NONE;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
     b10:	2001      	movs	r0, #1
     b12:	bd08      	pop	{r3, pc}
		return ERR_NONE;
     b14:	2000      	movs	r0, #0
     b16:	bd08      	pop	{r3, pc}
		return STA_NOINIT | STA_NODISK;
     b18:	2003      	movs	r0, #3
	}
}
     b1a:	bd08      	pop	{r3, pc}
     b1c:	000009f1 	.word	0x000009f1

00000b20 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return ERR_NONE for success, otherwise DRESULT error code.
 */
dstatus_t disk_read(uint8_t drv, uint8_t *buff, uint32_t sector, uint8_t count)
{
     b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     b24:	b082      	sub	sp, #8
     b26:	4607      	mov	r7, r0
     b28:	4688      	mov	r8, r1
     b2a:	4615      	mov	r5, r2
     b2c:	461c      	mov	r4, r3
	uint8_t  uc_sector_size = SECTOR_SIZE_512;
	uint32_t i;
	uint32_t ul_last_sector_num;

	/* Check valid address */
	sd_mmc_read_capacity(drv, &ul_last_sector_num);
     b2e:	a901      	add	r1, sp, #4
     b30:	4b0d      	ldr	r3, [pc, #52]	; (b68 <disk_read+0x48>)
     b32:	4798      	blx	r3
	if ((sector + count * uc_sector_size) > (ul_last_sector_num + 1) * uc_sector_size) {
     b34:	4626      	mov	r6, r4
     b36:	442c      	add	r4, r5
     b38:	9b01      	ldr	r3, [sp, #4]
     b3a:	3301      	adds	r3, #1
     b3c:	429c      	cmp	r4, r3
     b3e:	d903      	bls.n	b48 <disk_read+0x28>
		return ERR_INVALID_ARG;
     b40:	20f3      	movs	r0, #243	; 0xf3
			return ERR_INVALID_DATA;
		}
	}

	return ERR_NONE;
}
     b42:	b002      	add	sp, #8
     b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     b48:	2400      	movs	r4, #0
	for (i = 0; i < count; i++) {
     b4a:	42b4      	cmp	r4, r6
     b4c:	d208      	bcs.n	b60 <disk_read+0x40>
		if (sd_mmc_mem_2_ram(drv, sector + uc_sector_size * i, buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i)
     b4e:	eb08 2244 	add.w	r2, r8, r4, lsl #9
     b52:	1961      	adds	r1, r4, r5
     b54:	4638      	mov	r0, r7
     b56:	4b05      	ldr	r3, [pc, #20]	; (b6c <disk_read+0x4c>)
     b58:	4798      	blx	r3
     b5a:	b918      	cbnz	r0, b64 <disk_read+0x44>
	for (i = 0; i < count; i++) {
     b5c:	3401      	adds	r4, #1
     b5e:	e7f4      	b.n	b4a <disk_read+0x2a>
	return ERR_NONE;
     b60:	2000      	movs	r0, #0
     b62:	e7ee      	b.n	b42 <disk_read+0x22>
			return ERR_INVALID_DATA;
     b64:	20ff      	movs	r0, #255	; 0xff
     b66:	e7ec      	b.n	b42 <disk_read+0x22>
     b68:	00000a2d 	.word	0x00000a2d
     b6c:	00000a4d 	.word	0x00000a4d

00000b70 <disk_write>:
 * \param count Number of sectors to read (1..255).
 *
 * \return ERR_NONE for success, otherwise DRESULT error code.
 */
dstatus_t disk_write(uint8_t drv, uint8_t const *buff, uint32_t sector, uint8_t count)
{
     b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     b74:	b082      	sub	sp, #8
     b76:	4607      	mov	r7, r0
     b78:	4688      	mov	r8, r1
     b7a:	4615      	mov	r5, r2
     b7c:	461c      	mov	r4, r3
	uint8_t  uc_sector_size = SECTOR_SIZE_512;
	uint32_t i;
	uint32_t ul_last_sector_num;

	/* Check valid address */
	sd_mmc_read_capacity(drv, &ul_last_sector_num);
     b7e:	a901      	add	r1, sp, #4
     b80:	4b0d      	ldr	r3, [pc, #52]	; (bb8 <disk_write+0x48>)
     b82:	4798      	blx	r3
	if ((sector + count * uc_sector_size) > (ul_last_sector_num + 1) * uc_sector_size) {
     b84:	4626      	mov	r6, r4
     b86:	442c      	add	r4, r5
     b88:	9b01      	ldr	r3, [sp, #4]
     b8a:	3301      	adds	r3, #1
     b8c:	429c      	cmp	r4, r3
     b8e:	d903      	bls.n	b98 <disk_write+0x28>
		return ERR_INVALID_ARG;
     b90:	20f3      	movs	r0, #243	; 0xf3
			return ERR_INVALID_DATA;
		}
	}

	return ERR_NONE;
}
     b92:	b002      	add	sp, #8
     b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     b98:	2400      	movs	r4, #0
	for (i = 0; i < count; i++) {
     b9a:	42b4      	cmp	r4, r6
     b9c:	d208      	bcs.n	bb0 <disk_write+0x40>
		if (sd_mmc_ram_2_mem(drv, sector + uc_sector_size * i, buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i)
     b9e:	eb08 2244 	add.w	r2, r8, r4, lsl #9
     ba2:	1961      	adds	r1, r4, r5
     ba4:	4638      	mov	r0, r7
     ba6:	4b05      	ldr	r3, [pc, #20]	; (bbc <disk_write+0x4c>)
     ba8:	4798      	blx	r3
     baa:	b918      	cbnz	r0, bb4 <disk_write+0x44>
	for (i = 0; i < count; i++) {
     bac:	3401      	adds	r4, #1
     bae:	e7f4      	b.n	b9a <disk_write+0x2a>
	return ERR_NONE;
     bb0:	2000      	movs	r0, #0
     bb2:	e7ee      	b.n	b92 <disk_write+0x22>
			return ERR_INVALID_DATA;
     bb4:	20ff      	movs	r0, #255	; 0xff
     bb6:	e7ec      	b.n	b92 <disk_write+0x22>
     bb8:	00000a2d 	.word	0x00000a2d
     bbc:	00000a8d 	.word	0x00000a8d

00000bc0 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return ERR_NONE for success, otherwise DRESULT error code.
 */
dstatus_t disk_ioctl(uint8_t drv, uint8_t ctrl, void *buff)
{
     bc0:	b510      	push	{r4, lr}
     bc2:	b082      	sub	sp, #8
     bc4:	4614      	mov	r4, r2
	dstatus_t res = ERR_INVALID_ARG;

	switch (ctrl) {
     bc6:	2903      	cmp	r1, #3
     bc8:	d819      	bhi.n	bfe <disk_ioctl+0x3e>
     bca:	e8df f001 	tbb	[pc, r1]
     bce:	0712      	.short	0x0712
     bd0:	020f      	.short	0x020f
	case GET_BLOCK_SIZE:
		*(unsigned long *)buff = 1;
     bd2:	2301      	movs	r3, #1
     bd4:	6013      	str	r3, [r2, #0]
		res                    = ERR_NONE;
     bd6:	2000      	movs	r0, #0
	default:
		res = ERR_INVALID_ARG;
	}

	return res;
}
     bd8:	b002      	add	sp, #8
     bda:	bd10      	pop	{r4, pc}
		sd_mmc_read_capacity(drv, &ul_last_sector_num);
     bdc:	a901      	add	r1, sp, #4
     bde:	4b09      	ldr	r3, [pc, #36]	; (c04 <disk_ioctl+0x44>)
     be0:	4798      	blx	r3
		*(unsigned long *)buff = ul_last_sector_num + 1;
     be2:	9b01      	ldr	r3, [sp, #4]
     be4:	3301      	adds	r3, #1
     be6:	6023      	str	r3, [r4, #0]
		res = ERR_NONE;
     be8:	2000      	movs	r0, #0
	} break;
     bea:	e7f5      	b.n	bd8 <disk_ioctl+0x18>
		*(uint8_t *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
     bec:	2000      	movs	r0, #0
     bee:	7010      	strb	r0, [r2, #0]
	} break;
     bf0:	e7f2      	b.n	bd8 <disk_ioctl+0x18>
		if (sd_mmc_test_unit_ready(drv) == CTRL_GOOD) {
     bf2:	4b05      	ldr	r3, [pc, #20]	; (c08 <disk_ioctl+0x48>)
     bf4:	4798      	blx	r3
     bf6:	2800      	cmp	r0, #0
     bf8:	d0ee      	beq.n	bd8 <disk_ioctl+0x18>
			res = ERR_NOT_READY;
     bfa:	20e3      	movs	r0, #227	; 0xe3
     bfc:	e7ec      	b.n	bd8 <disk_ioctl+0x18>
		res = ERR_INVALID_ARG;
     bfe:	20f3      	movs	r0, #243	; 0xf3
     c00:	e7ea      	b.n	bd8 <disk_ioctl+0x18>
     c02:	bf00      	nop
     c04:	00000a2d 	.word	0x00000a2d
     c08:	000009f1 	.word	0x000009f1

00000c0c <diskio_init>:
 */

#include "diskio_start.h"

void diskio_init(void)
{
     c0c:	4770      	bx	lr
	...

00000c10 <I2S_0_PORT_init>:
struct usart_sync_descriptor TARGET_IO;

struct mci_sync_desc IO_BUS;

void I2S_0_PORT_init(void)
{
     c10:	b410      	push	{r4}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c12:	4b42      	ldr	r3, [pc, #264]	; (d1c <I2S_0_PORT_init+0x10c>)
     c14:	f44f 7200 	mov.w	r2, #512	; 0x200
     c18:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c1a:	4941      	ldr	r1, [pc, #260]	; (d20 <I2S_0_PORT_init+0x110>)
     c1c:	6299      	str	r1, [r3, #40]	; 0x28
     c1e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     c22:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c24:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c26:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     c2a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c2e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c32:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     c36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c3e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c42:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c46:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c4a:	f042 0290 	orr.w	r2, r2, #144	; 0x90
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     c56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c5a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     c5e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     c62:	4c30      	ldr	r4, [pc, #192]	; (d24 <I2S_0_PORT_init+0x114>)
     c64:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c6c:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
     c70:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c74:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c78:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
	tmp &= ~PORT_PINCFG_PMUXEN;
     c7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c80:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c84:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c88:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c8c:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c90:	f042 0290 	orr.w	r2, r2, #144	; 0x90
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c94:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ca0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     ca4:	4820      	ldr	r0, [pc, #128]	; (d28 <I2S_0_PORT_init+0x118>)
     ca6:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     caa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     cae:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
     cb2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     cb6:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cba:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     cbe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     cc2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cc6:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     cca:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     cce:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     cd2:	f042 0209 	orr.w	r2, r2, #9
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     cd6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     cda:	f44f 6200 	mov.w	r2, #2048	; 0x800
     cde:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ce0:	4812      	ldr	r0, [pc, #72]	; (d2c <I2S_0_PORT_init+0x11c>)
     ce2:	6298      	str	r0, [r3, #40]	; 0x28
     ce4:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ce6:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ce8:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     cec:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     cf0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cf4:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     cf8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     cfc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d00:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d04:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d08:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     d0c:	f042 0290 	orr.w	r2, r2, #144	; 0x90
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11J_I2S_SDO);
}
     d14:	f85d 4b04 	ldr.w	r4, [sp], #4
     d18:	4770      	bx	lr
     d1a:	bf00      	nop
     d1c:	41008000 	.word	0x41008000
     d20:	40000200 	.word	0x40000200
     d24:	c0000002 	.word	0xc0000002
     d28:	c0000001 	.word	0xc0000001
     d2c:	40000800 	.word	0x40000800

00000d30 <I2S_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_I2S_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_I2S;
     d30:	4a05      	ldr	r2, [pc, #20]	; (d48 <I2S_0_CLOCK_init+0x18>)
     d32:	6a13      	ldr	r3, [r2, #32]
     d34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     d38:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     d3a:	4b04      	ldr	r3, [pc, #16]	; (d4c <I2S_0_CLOCK_init+0x1c>)
     d3c:	2242      	movs	r2, #66	; 0x42
     d3e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
     d42:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
     d46:	4770      	bx	lr
     d48:	40000800 	.word	0x40000800
     d4c:	40001c00 	.word	0x40001c00

00000d50 <I2S_0_init>:
	hri_gclk_write_PCHCTRL_reg(GCLK, I2S_GCLK_ID_0, CONF_GCLK_I2S_SRC_0 | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, I2S_GCLK_ID_1, CONF_GCLK_I2S_SRC_1 | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void I2S_0_init(void)
{
     d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	I2S_0_CLOCK_init();
     d52:	4b0b      	ldr	r3, [pc, #44]	; (d80 <I2S_0_init+0x30>)
     d54:	4798      	blx	r3
	i2s_c_sync_init(&I2S_0_0, I2S, I2S_C_IFACE_0);
     d56:	4f0b      	ldr	r7, [pc, #44]	; (d84 <I2S_0_init+0x34>)
     d58:	4c0b      	ldr	r4, [pc, #44]	; (d88 <I2S_0_init+0x38>)
     d5a:	2200      	movs	r2, #0
     d5c:	4639      	mov	r1, r7
     d5e:	4620      	mov	r0, r4
     d60:	4e0a      	ldr	r6, [pc, #40]	; (d8c <I2S_0_init+0x3c>)
     d62:	47b0      	blx	r6
	i2s_c_sync_enable(&I2S_0_0);
     d64:	4620      	mov	r0, r4
     d66:	4c0a      	ldr	r4, [pc, #40]	; (d90 <I2S_0_init+0x40>)
     d68:	47a0      	blx	r4
	i2s_c_sync_init(&I2S_0_1, I2S, I2S_C_IFACE_1);
     d6a:	4d0a      	ldr	r5, [pc, #40]	; (d94 <I2S_0_init+0x44>)
     d6c:	2201      	movs	r2, #1
     d6e:	4639      	mov	r1, r7
     d70:	4628      	mov	r0, r5
     d72:	47b0      	blx	r6
	i2s_c_sync_enable(&I2S_0_1);
     d74:	4628      	mov	r0, r5
     d76:	47a0      	blx	r4
	I2S_0_PORT_init();
     d78:	4b07      	ldr	r3, [pc, #28]	; (d98 <I2S_0_init+0x48>)
     d7a:	4798      	blx	r3
     d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d7e:	bf00      	nop
     d80:	00000d31 	.word	0x00000d31
     d84:	43002800 	.word	0x43002800
     d88:	20000a58 	.word	0x20000a58
     d8c:	0000267d 	.word	0x0000267d
     d90:	000026b9 	.word	0x000026b9
     d94:	20000a50 	.word	0x20000a50
     d98:	00000c11 	.word	0x00000c11

00000d9c <CALENDER_INTERFACE_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     d9c:	4a02      	ldr	r2, [pc, #8]	; (da8 <CALENDER_INTERFACE_CLOCK_init+0xc>)
     d9e:	6953      	ldr	r3, [r2, #20]
     da0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     da4:	6153      	str	r3, [r2, #20]
     da6:	4770      	bx	lr
     da8:	40000800 	.word	0x40000800

00000dac <CALENDER_INTERFACE_init>:
{
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
}

void CALENDER_INTERFACE_init(void)
{
     dac:	b508      	push	{r3, lr}
	CALENDER_INTERFACE_CLOCK_init();
     dae:	4b03      	ldr	r3, [pc, #12]	; (dbc <CALENDER_INTERFACE_init+0x10>)
     db0:	4798      	blx	r3
	calendar_init(&CALENDER_INTERFACE, RTC);
     db2:	4903      	ldr	r1, [pc, #12]	; (dc0 <CALENDER_INTERFACE_init+0x14>)
     db4:	4803      	ldr	r0, [pc, #12]	; (dc4 <CALENDER_INTERFACE_init+0x18>)
     db6:	4b04      	ldr	r3, [pc, #16]	; (dc8 <CALENDER_INTERFACE_init+0x1c>)
     db8:	4798      	blx	r3
     dba:	bd08      	pop	{r3, pc}
     dbc:	00000d9d 	.word	0x00000d9d
     dc0:	40002400 	.word	0x40002400
     dc4:	20000a30 	.word	0x20000a30
     dc8:	000025dd 	.word	0x000025dd

00000dcc <TARGET_IO_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dcc:	4b10      	ldr	r3, [pc, #64]	; (e10 <TARGET_IO_PORT_init+0x44>)
     dce:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     dd2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     dd6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dda:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     dde:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     de2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     de6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     dea:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dee:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     df2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     df6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dfa:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     dfe:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     e02:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     e06:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e0a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     e0e:	4770      	bx	lr
     e10:	41008000 	.word	0x41008000

00000e14 <TARGET_IO_CLOCK_init>:
     e14:	4b06      	ldr	r3, [pc, #24]	; (e30 <TARGET_IO_CLOCK_init+0x1c>)
     e16:	2241      	movs	r2, #65	; 0x41
     e18:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     e1c:	2243      	movs	r2, #67	; 0x43
     e1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     e22:	4a04      	ldr	r2, [pc, #16]	; (e34 <TARGET_IO_CLOCK_init+0x20>)
     e24:	6993      	ldr	r3, [r2, #24]
     e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     e2a:	6193      	str	r3, [r2, #24]
     e2c:	4770      	bx	lr
     e2e:	bf00      	nop
     e30:	40001c00 	.word	0x40001c00
     e34:	40000800 	.word	0x40000800

00000e38 <TARGET_IO_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void TARGET_IO_init(void)
{
     e38:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
     e3a:	4b05      	ldr	r3, [pc, #20]	; (e50 <TARGET_IO_init+0x18>)
     e3c:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM2, (void *)NULL);
     e3e:	2200      	movs	r2, #0
     e40:	4904      	ldr	r1, [pc, #16]	; (e54 <TARGET_IO_init+0x1c>)
     e42:	4805      	ldr	r0, [pc, #20]	; (e58 <TARGET_IO_init+0x20>)
     e44:	4b05      	ldr	r3, [pc, #20]	; (e5c <TARGET_IO_init+0x24>)
     e46:	4798      	blx	r3
	TARGET_IO_PORT_init();
     e48:	4b05      	ldr	r3, [pc, #20]	; (e60 <TARGET_IO_init+0x28>)
     e4a:	4798      	blx	r3
     e4c:	bd08      	pop	{r3, pc}
     e4e:	bf00      	nop
     e50:	00000e15 	.word	0x00000e15
     e54:	41012000 	.word	0x41012000
     e58:	20000a08 	.word	0x20000a08
     e5c:	00002abd 	.word	0x00002abd
     e60:	00000dcd 	.word	0x00000dcd

00000e64 <IO_BUS_PORT_init>:
}

void IO_BUS_PORT_init(void)
{
     e64:	b4f0      	push	{r4, r5, r6, r7}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e66:	4b5e      	ldr	r3, [pc, #376]	; (fe0 <IO_BUS_PORT_init+0x17c>)
     e68:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     e6c:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     e72:	629a      	str	r2, [r3, #40]	; 0x28
     e74:	4c5b      	ldr	r4, [pc, #364]	; (fe4 <IO_BUS_PORT_init+0x180>)
     e76:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e78:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e7a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     e7e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e82:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e86:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     e8a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e8e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e92:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e96:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     e9a:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     e9e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ea2:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ea6:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
     eaa:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     eac:	629a      	str	r2, [r3, #40]	; 0x28
     eae:	4e4e      	ldr	r6, [pc, #312]	; (fe8 <IO_BUS_PORT_init+0x184>)
     eb0:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     eb2:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     eb4:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
     eb8:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     ebc:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ec0:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     ec4:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ec8:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ecc:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ed0:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ed4:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     ed8:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     edc:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ee0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
     ee4:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ee8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     eec:	4f3f      	ldr	r7, [pc, #252]	; (fec <IO_BUS_PORT_init+0x188>)
     eee:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ef2:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ef6:	f893 10d2 	ldrb.w	r1, [r3, #210]	; 0xd2
     efa:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     efe:	f883 10d2 	strb.w	r1, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f02:	f893 10d2 	ldrb.w	r1, [r3, #210]	; 0xd2
	tmp &= ~PORT_PINCFG_PMUXEN;
     f06:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f0a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f0e:	f883 10d2 	strb.w	r1, [r3, #210]	; 0xd2
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f12:	f893 10b9 	ldrb.w	r1, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     f16:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     f1a:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f1e:	f883 10b9 	strb.w	r1, [r3, #185]	; 0xb9
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f22:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     f26:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f2a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     f2e:	3704      	adds	r7, #4
     f30:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f34:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f38:	f893 10d3 	ldrb.w	r1, [r3, #211]	; 0xd3
     f3c:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     f40:	f883 10d3 	strb.w	r1, [r3, #211]	; 0xd3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f44:	f893 10d3 	ldrb.w	r1, [r3, #211]	; 0xd3
	tmp &= ~PORT_PINCFG_PMUXEN;
     f48:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f4c:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f50:	f883 10d3 	strb.w	r1, [r3, #211]	; 0xd3
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f54:	f893 10b9 	ldrb.w	r1, [r3, #185]	; 0xb9
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     f58:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     f5c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f60:	f883 10b9 	strb.w	r1, [r3, #185]	; 0xb9
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f64:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f68:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     f6c:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f70:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f74:	f893 10d4 	ldrb.w	r1, [r3, #212]	; 0xd4
     f78:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     f7c:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f80:	f893 10d4 	ldrb.w	r1, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     f84:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f88:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f8c:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f90:	f893 10ba 	ldrb.w	r1, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     f94:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     f98:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f9c:	f883 10ba 	strb.w	r1, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fa0:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fa4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     fa8:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fac:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     fb0:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
     fb4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     fb8:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fbc:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     fc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     fc4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fc8:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     fcc:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     fd0:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     fd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     fd8:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PB21I_SDHC1_SDDAT3);
}
     fdc:	bcf0      	pop	{r4, r5, r6, r7}
     fde:	4770      	bx	lr
     fe0:	41008000 	.word	0x41008000
     fe4:	c0000020 	.word	0xc0000020
     fe8:	c0000010 	.word	0xc0000010
     fec:	c0000004 	.word	0xc0000004

00000ff0 <IO_BUS_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_SDHC1;
     ff0:	4a05      	ldr	r2, [pc, #20]	; (1008 <IO_BUS_CLOCK_init+0x18>)
     ff2:	6913      	ldr	r3, [r2, #16]
     ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     ff8:	6113      	str	r3, [r2, #16]
     ffa:	4b04      	ldr	r3, [pc, #16]	; (100c <IO_BUS_CLOCK_init+0x1c>)
     ffc:	2241      	movs	r2, #65	; 0x41
     ffe:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    1002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1006:	4770      	bx	lr
    1008:	40000800 	.word	0x40000800
    100c:	40001c00 	.word	0x40001c00

00001010 <IO_BUS_init>:
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC1_GCLK_ID, CONF_GCLK_SDHC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC1_GCLK_ID_SLOW, CONF_GCLK_SDHC1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void IO_BUS_init(void)
{
    1010:	b508      	push	{r3, lr}
	IO_BUS_CLOCK_init();
    1012:	4b05      	ldr	r3, [pc, #20]	; (1028 <IO_BUS_init+0x18>)
    1014:	4798      	blx	r3
	mci_sync_init(&IO_BUS, SDHC1);
    1016:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
    101a:	4804      	ldr	r0, [pc, #16]	; (102c <IO_BUS_init+0x1c>)
    101c:	4b04      	ldr	r3, [pc, #16]	; (1030 <IO_BUS_init+0x20>)
    101e:	4798      	blx	r3
	IO_BUS_PORT_init();
    1020:	4b04      	ldr	r3, [pc, #16]	; (1034 <IO_BUS_init+0x24>)
    1022:	4798      	blx	r3
    1024:	bd08      	pop	{r3, pc}
    1026:	bf00      	nop
    1028:	00000ff1 	.word	0x00000ff1
    102c:	20000a18 	.word	0x20000a18
    1030:	00002749 	.word	0x00002749
    1034:	00000e65 	.word	0x00000e65

00001038 <system_init>:
}

void system_init(void)
{
    1038:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    103a:	4b1b      	ldr	r3, [pc, #108]	; (10a8 <system_init+0x70>)
    103c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    103e:	4b1b      	ldr	r3, [pc, #108]	; (10ac <system_init+0x74>)
    1040:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    1044:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1048:	4919      	ldr	r1, [pc, #100]	; (10b0 <system_init+0x78>)
    104a:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
    104e:	4a19      	ldr	r2, [pc, #100]	; (10b4 <system_init+0x7c>)
    1050:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1054:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
    1058:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    105c:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1060:	f893 21d4 	ldrb.w	r2, [r3, #468]	; 0x1d4
	tmp &= ~PORT_PINCFG_PMUXEN;
    1064:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1068:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    106c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1070:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1074:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
    1078:	4a0f      	ldr	r2, [pc, #60]	; (10b8 <system_init+0x80>)
    107a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    107e:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
    1082:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1086:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    108a:	f893 21d5 	ldrb.w	r2, [r3, #469]	; 0x1d5
	tmp &= ~PORT_PINCFG_PMUXEN;
    108e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1092:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(WRITE_PROTECT_0, GPIO_PIN_FUNCTION_OFF);

	I2S_0_init();
    1096:	4b09      	ldr	r3, [pc, #36]	; (10bc <system_init+0x84>)
    1098:	4798      	blx	r3

	CALENDER_INTERFACE_init();
    109a:	4b09      	ldr	r3, [pc, #36]	; (10c0 <system_init+0x88>)
    109c:	4798      	blx	r3

	TARGET_IO_init();
    109e:	4b09      	ldr	r3, [pc, #36]	; (10c4 <system_init+0x8c>)
    10a0:	4798      	blx	r3

	IO_BUS_init();
    10a2:	4b09      	ldr	r3, [pc, #36]	; (10c8 <system_init+0x90>)
    10a4:	4798      	blx	r3
    10a6:	bd08      	pop	{r3, pc}
    10a8:	00002b99 	.word	0x00002b99
    10ac:	41008000 	.word	0x41008000
    10b0:	40020000 	.word	0x40020000
    10b4:	c0020010 	.word	0xc0020010
    10b8:	c0020020 	.word	0xc0020020
    10bc:	00000d51 	.word	0x00000d51
    10c0:	00000dad 	.word	0x00000dad
    10c4:	00000e39 	.word	0x00000e39
    10c8:	00001011 	.word	0x00001011

000010cc <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
    10cc:	e004      	b.n	10d8 <mem_cpy+0xc>
		*d++ = *s++;
    10ce:	780a      	ldrb	r2, [r1, #0]
    10d0:	7002      	strb	r2, [r0, #0]
    10d2:	3101      	adds	r1, #1
    10d4:	3001      	adds	r0, #1
	while (cnt--)
    10d6:	461a      	mov	r2, r3
    10d8:	1e53      	subs	r3, r2, #1
    10da:	2a00      	cmp	r2, #0
    10dc:	d1f7      	bne.n	10ce <mem_cpy+0x2>
}
    10de:	4770      	bx	lr

000010e0 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    10e0:	e002      	b.n	10e8 <mem_set+0x8>
		*d++ = (BYTE)val;
    10e2:	7001      	strb	r1, [r0, #0]
    10e4:	3001      	adds	r0, #1
	while (cnt--)
    10e6:	461a      	mov	r2, r3
    10e8:	1e53      	subs	r3, r2, #1
    10ea:	2a00      	cmp	r2, #0
    10ec:	d1f9      	bne.n	10e2 <mem_set+0x2>
}
    10ee:	4770      	bx	lr

000010f0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
    10f0:	b470      	push	{r4, r5, r6}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    10f2:	4603      	mov	r3, r0
	int r = 0;
    10f4:	2000      	movs	r0, #0

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    10f6:	e001      	b.n	10fc <mem_cmp+0xc>
    10f8:	4629      	mov	r1, r5
    10fa:	4633      	mov	r3, r6
    10fc:	1e54      	subs	r4, r2, #1
    10fe:	b132      	cbz	r2, 110e <mem_cmp+0x1e>
    1100:	1c5e      	adds	r6, r3, #1
    1102:	7818      	ldrb	r0, [r3, #0]
    1104:	1c4d      	adds	r5, r1, #1
    1106:	780b      	ldrb	r3, [r1, #0]
    1108:	4622      	mov	r2, r4
    110a:	1ac0      	subs	r0, r0, r3
    110c:	d0f4      	beq.n	10f8 <mem_cmp+0x8>
	return r;
}
    110e:	bc70      	pop	{r4, r5, r6}
    1110:	4770      	bx	lr

00001112 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    1112:	e000      	b.n	1116 <chk_chr+0x4>
    1114:	3001      	adds	r0, #1
    1116:	7803      	ldrb	r3, [r0, #0]
    1118:	b10b      	cbz	r3, 111e <chk_chr+0xc>
    111a:	428b      	cmp	r3, r1
    111c:	d1fa      	bne.n	1114 <chk_chr+0x2>
	return *str;
}
    111e:	4618      	mov	r0, r3
    1120:	4770      	bx	lr

00001122 <ld_clust>:
	const BYTE* dir	/* Pointer to the SFN entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
    1122:	7eca      	ldrb	r2, [r1, #27]
    1124:	7e8b      	ldrb	r3, [r1, #26]
    1126:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (fs->fs_type == FS_FAT32)
    112a:	7802      	ldrb	r2, [r0, #0]
    112c:	2a03      	cmp	r2, #3
    112e:	d001      	beq.n	1134 <ld_clust+0x12>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;

	return cl;
}
    1130:	4618      	mov	r0, r3
    1132:	4770      	bx	lr
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
    1134:	7d48      	ldrb	r0, [r1, #21]
    1136:	7d0a      	ldrb	r2, [r1, #20]
    1138:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    113c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return cl;
    1140:	e7f6      	b.n	1130 <ld_clust+0xe>

00001142 <st_clust>:
void st_clust (
	BYTE* dir,	/* Pointer to the SFN entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir + DIR_FstClusLO, cl);
    1142:	7681      	strb	r1, [r0, #26]
    1144:	f3c1 2307 	ubfx	r3, r1, #8, #8
    1148:	76c3      	strb	r3, [r0, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
    114a:	0c09      	lsrs	r1, r1, #16
    114c:	7501      	strb	r1, [r0, #20]
    114e:	0a09      	lsrs	r1, r1, #8
    1150:	7541      	strb	r1, [r0, #21]
    1152:	4770      	bx	lr

00001154 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
    1154:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1158:	4689      	mov	r9, r1
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Skip duplicated separator */
    115a:	680c      	ldr	r4, [r1, #0]
    115c:	e000      	b.n	1160 <create_name+0xc>
    115e:	3401      	adds	r4, #1
    1160:	7823      	ldrb	r3, [r4, #0]
    1162:	2b2f      	cmp	r3, #47	; 0x2f
    1164:	d0fb      	beq.n	115e <create_name+0xa>
    1166:	2b5c      	cmp	r3, #92	; 0x5c
    1168:	d0f9      	beq.n	115e <create_name+0xa>
	sfn = dp->fn;
    116a:	6987      	ldr	r7, [r0, #24]
	mem_set(sfn, ' ', 11);
    116c:	220b      	movs	r2, #11
    116e:	2120      	movs	r1, #32
    1170:	4638      	mov	r0, r7
    1172:	4b4e      	ldr	r3, [pc, #312]	; (12ac <create_name+0x158>)
    1174:	4798      	blx	r3
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    1176:	7823      	ldrb	r3, [r4, #0]
    1178:	2b2e      	cmp	r3, #46	; 0x2e
    117a:	d019      	beq.n	11b0 <create_name+0x5c>
    117c:	2600      	movs	r6, #0
    117e:	4633      	mov	r3, r6
    1180:	f04f 0808 	mov.w	r8, #8
    1184:	46b2      	mov	sl, r6
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    1186:	f103 0b01 	add.w	fp, r3, #1
    118a:	5ce5      	ldrb	r5, [r4, r3]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    118c:	2d20      	cmp	r5, #32
    118e:	d95a      	bls.n	1246 <create_name+0xf2>
    1190:	2d2f      	cmp	r5, #47	; 0x2f
    1192:	d058      	beq.n	1246 <create_name+0xf2>
    1194:	2d5c      	cmp	r5, #92	; 0x5c
    1196:	d056      	beq.n	1246 <create_name+0xf2>
		if (c == '.' || i >= ni) {
    1198:	2d2e      	cmp	r5, #46	; 0x2e
    119a:	d001      	beq.n	11a0 <create_name+0x4c>
    119c:	45b0      	cmp	r8, r6
    119e:	d82e      	bhi.n	11fe <create_name+0xaa>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    11a0:	f1b8 0f08 	cmp.w	r8, #8
    11a4:	d17c      	bne.n	12a0 <create_name+0x14c>
    11a6:	2d2e      	cmp	r5, #46	; 0x2e
    11a8:	d021      	beq.n	11ee <create_name+0x9a>
    11aa:	2006      	movs	r0, #6
    11ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11b0:	2200      	movs	r2, #0
			c = (BYTE)p[si++];
    11b2:	1c51      	adds	r1, r2, #1
    11b4:	5ca3      	ldrb	r3, [r4, r2]
			if (c != '.' || si >= 3) break;
    11b6:	2b2e      	cmp	r3, #46	; 0x2e
    11b8:	d104      	bne.n	11c4 <create_name+0x70>
    11ba:	2902      	cmp	r1, #2
    11bc:	d802      	bhi.n	11c4 <create_name+0x70>
			sfn[i++] = c;
    11be:	54bb      	strb	r3, [r7, r2]
			c = (BYTE)p[si++];
    11c0:	460a      	mov	r2, r1
    11c2:	e7f6      	b.n	11b2 <create_name+0x5e>
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    11c4:	2b2f      	cmp	r3, #47	; 0x2f
    11c6:	d006      	beq.n	11d6 <create_name+0x82>
    11c8:	2b5c      	cmp	r3, #92	; 0x5c
    11ca:	d004      	beq.n	11d6 <create_name+0x82>
    11cc:	2b20      	cmp	r3, #32
    11ce:	d902      	bls.n	11d6 <create_name+0x82>
    11d0:	2006      	movs	r0, #6
    11d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*path = &p[si];									/* Return pointer to the next segment */
    11d6:	4421      	add	r1, r4
    11d8:	f8c9 1000 	str.w	r1, [r9]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    11dc:	2b20      	cmp	r3, #32
    11de:	d904      	bls.n	11ea <create_name+0x96>
    11e0:	2320      	movs	r3, #32
    11e2:	72fb      	strb	r3, [r7, #11]
		return FR_OK;
    11e4:	2000      	movs	r0, #0
    11e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    11ea:	2324      	movs	r3, #36	; 0x24
    11ec:	e7f9      	b.n	11e2 <create_name+0x8e>
			i = 8; ni = 11;
			b <<= 2; continue;
    11ee:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    11f2:	fa5f fa8a 	uxtb.w	sl, sl
			i = 8; ni = 11;
    11f6:	4646      	mov	r6, r8
    11f8:	f04f 080b 	mov.w	r8, #11
			b <<= 2; continue;
    11fc:	e011      	b.n	1222 <create_name+0xce>
		}
		if (c >= 0x80) {				/* Extended character? */
    11fe:	f015 0f80 	tst.w	r5, #128	; 0x80
    1202:	d110      	bne.n	1226 <create_name+0xd2>
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    1204:	4629      	mov	r1, r5
    1206:	482a      	ldr	r0, [pc, #168]	; (12b0 <create_name+0x15c>)
    1208:	4b2a      	ldr	r3, [pc, #168]	; (12b4 <create_name+0x160>)
    120a:	4798      	blx	r3
    120c:	2800      	cmp	r0, #0
    120e:	d14a      	bne.n	12a6 <create_name+0x152>
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    1210:	f1a5 0341 	sub.w	r3, r5, #65	; 0x41
    1214:	b2db      	uxtb	r3, r3
    1216:	2b19      	cmp	r3, #25
    1218:	d80b      	bhi.n	1232 <create_name+0xde>
				b |= 2;
    121a:	f04a 0a02 	orr.w	sl, sl, #2
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
					b |= 1; c -= 0x20;
				}
			}
			sfn[i++] = c;
    121e:	55bd      	strb	r5, [r7, r6]
    1220:	3601      	adds	r6, #1
    1222:	465b      	mov	r3, fp
    1224:	e7af      	b.n	1186 <create_name+0x32>
			b |= 3;						/* Eliminate NT flag */
    1226:	f04a 0a03 	orr.w	sl, sl, #3
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
    122a:	3d80      	subs	r5, #128	; 0x80
    122c:	4b22      	ldr	r3, [pc, #136]	; (12b8 <create_name+0x164>)
    122e:	5d5d      	ldrb	r5, [r3, r5]
    1230:	e7e8      	b.n	1204 <create_name+0xb0>
				if (IsLower(c)) {		/* ASCII small capital? */
    1232:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
    1236:	b2db      	uxtb	r3, r3
    1238:	2b19      	cmp	r3, #25
    123a:	d8f0      	bhi.n	121e <create_name+0xca>
					b |= 1; c -= 0x20;
    123c:	f04a 0a01 	orr.w	sl, sl, #1
    1240:	3d20      	subs	r5, #32
    1242:	b2ed      	uxtb	r5, r5
    1244:	e7eb      	b.n	121e <create_name+0xca>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    1246:	445c      	add	r4, fp
    1248:	f8c9 4000 	str.w	r4, [r9]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    124c:	2d20      	cmp	r5, #32
    124e:	d804      	bhi.n	125a <create_name+0x106>
    1250:	2304      	movs	r3, #4

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    1252:	b926      	cbnz	r6, 125e <create_name+0x10a>
    1254:	2006      	movs	r0, #6

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
    1256:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    125a:	2300      	movs	r3, #0
    125c:	e7f9      	b.n	1252 <create_name+0xfe>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
    125e:	783a      	ldrb	r2, [r7, #0]
    1260:	2ae5      	cmp	r2, #229	; 0xe5
    1262:	d00f      	beq.n	1284 <create_name+0x130>
	if (ni == 8) b <<= 2;
    1264:	f1b8 0f08 	cmp.w	r8, #8
    1268:	d00f      	beq.n	128a <create_name+0x136>
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    126a:	f00a 0203 	and.w	r2, sl, #3
    126e:	2a01      	cmp	r2, #1
    1270:	d010      	beq.n	1294 <create_name+0x140>
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    1272:	f00a 0a0c 	and.w	sl, sl, #12
    1276:	f1ba 0f04 	cmp.w	sl, #4
    127a:	d00e      	beq.n	129a <create_name+0x146>
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
    127c:	72fb      	strb	r3, [r7, #11]
	return FR_OK;
    127e:	2000      	movs	r0, #0
    1280:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
    1284:	2205      	movs	r2, #5
    1286:	703a      	strb	r2, [r7, #0]
    1288:	e7ec      	b.n	1264 <create_name+0x110>
	if (ni == 8) b <<= 2;
    128a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    128e:	fa5f fa8a 	uxtb.w	sl, sl
    1292:	e7ea      	b.n	126a <create_name+0x116>
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    1294:	f043 0310 	orr.w	r3, r3, #16
    1298:	e7eb      	b.n	1272 <create_name+0x11e>
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    129a:	f043 0308 	orr.w	r3, r3, #8
    129e:	e7ed      	b.n	127c <create_name+0x128>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    12a0:	2006      	movs	r0, #6
    12a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return FR_INVALID_NAME;
    12a6:	2006      	movs	r0, #6
    12a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12ac:	000010e1 	.word	0x000010e1
    12b0:	000060b4 	.word	0x000060b4
    12b4:	00001113 	.word	0x00001113
    12b8:	00006004 	.word	0x00006004

000012bc <get_ldnumber>:
	const char *sp;
	char c;
	TCHAR tc;
#endif

	if (*path) {	/* If the pointer is not a null */
    12bc:	6801      	ldr	r1, [r0, #0]
    12be:	b109      	cbz	r1, 12c4 <get_ldnumber+0x8>
    12c0:	460a      	mov	r2, r1
    12c2:	e003      	b.n	12cc <get_ldnumber+0x10>
	int vol = -1;
    12c4:	f04f 33ff 	mov.w	r3, #4294967295
    12c8:	e009      	b.n	12de <get_ldnumber+0x22>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
    12ca:	3201      	adds	r2, #1
    12cc:	7813      	ldrb	r3, [r2, #0]
    12ce:	2b20      	cmp	r3, #32
    12d0:	d901      	bls.n	12d6 <get_ldnumber+0x1a>
    12d2:	2b3a      	cmp	r3, #58	; 0x3a
    12d4:	d1f9      	bne.n	12ca <get_ldnumber+0xe>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
    12d6:	2b3a      	cmp	r3, #58	; 0x3a
    12d8:	d003      	beq.n	12e2 <get_ldnumber+0x26>
			}
#endif
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
    12da:	4b0e      	ldr	r3, [pc, #56]	; (1314 <get_ldnumber+0x58>)
    12dc:	781b      	ldrb	r3, [r3, #0]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
    12de:	4618      	mov	r0, r3
    12e0:	4770      	bx	lr
{
    12e2:	b410      	push	{r4}
			i = *tp++ - '0'; 
    12e4:	1c4c      	adds	r4, r1, #1
    12e6:	780b      	ldrb	r3, [r1, #0]
    12e8:	3b30      	subs	r3, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
    12ea:	2b09      	cmp	r3, #9
    12ec:	d809      	bhi.n	1302 <get_ldnumber+0x46>
    12ee:	42a2      	cmp	r2, r4
    12f0:	d10a      	bne.n	1308 <get_ldnumber+0x4c>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
    12f2:	2b04      	cmp	r3, #4
    12f4:	d80b      	bhi.n	130e <get_ldnumber+0x52>
					*path = ++tt;
    12f6:	3201      	adds	r2, #1
    12f8:	6002      	str	r2, [r0, #0]
}
    12fa:	4618      	mov	r0, r3
    12fc:	f85d 4b04 	ldr.w	r4, [sp], #4
    1300:	4770      	bx	lr
	int vol = -1;
    1302:	f04f 33ff 	mov.w	r3, #4294967295
    1306:	e7f8      	b.n	12fa <get_ldnumber+0x3e>
    1308:	f04f 33ff 	mov.w	r3, #4294967295
    130c:	e7f5      	b.n	12fa <get_ldnumber+0x3e>
    130e:	f04f 33ff 	mov.w	r3, #4294967295
    1312:	e7f2      	b.n	12fa <get_ldnumber+0x3e>
    1314:	200000d0 	.word	0x200000d0

00001318 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
    1318:	7903      	ldrb	r3, [r0, #4]
    131a:	b90b      	cbnz	r3, 1320 <sync_window+0x8>
	FRESULT res = FR_OK;
    131c:	2000      	movs	r0, #0
    131e:	4770      	bx	lr
{
    1320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1324:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
    1326:	6b07      	ldr	r7, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
    1328:	f100 0834 	add.w	r8, r0, #52	; 0x34
    132c:	2301      	movs	r3, #1
    132e:	463a      	mov	r2, r7
    1330:	4641      	mov	r1, r8
    1332:	7840      	ldrb	r0, [r0, #1]
    1334:	4d0f      	ldr	r5, [pc, #60]	; (1374 <sync_window+0x5c>)
    1336:	47a8      	blx	r5
    1338:	b9b0      	cbnz	r0, 1368 <sync_window+0x50>
			fs->wflag = 0;
    133a:	2300      	movs	r3, #0
    133c:	7123      	strb	r3, [r4, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
    133e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1340:	1afb      	subs	r3, r7, r3
    1342:	69e2      	ldr	r2, [r4, #28]
    1344:	4293      	cmp	r3, r2
    1346:	d212      	bcs.n	136e <sync_window+0x56>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
    1348:	78e5      	ldrb	r5, [r4, #3]
    134a:	e008      	b.n	135e <sync_window+0x46>
					wsect += fs->fsize;
    134c:	69e3      	ldr	r3, [r4, #28]
    134e:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
    1350:	2301      	movs	r3, #1
    1352:	463a      	mov	r2, r7
    1354:	4641      	mov	r1, r8
    1356:	7860      	ldrb	r0, [r4, #1]
    1358:	4e06      	ldr	r6, [pc, #24]	; (1374 <sync_window+0x5c>)
    135a:	47b0      	blx	r6
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
    135c:	3d01      	subs	r5, #1
    135e:	2d01      	cmp	r5, #1
    1360:	d8f4      	bhi.n	134c <sync_window+0x34>
	FRESULT res = FR_OK;
    1362:	2000      	movs	r0, #0
    1364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = FR_DISK_ERR;
    1368:	2001      	movs	r0, #1
    136a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	FRESULT res = FR_OK;
    136e:	2000      	movs	r0, #0
}
    1370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1374:	00000b71 	.word	0x00000b71

00001378 <move_window>:
{
    1378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
    137a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    137c:	428b      	cmp	r3, r1
    137e:	d014      	beq.n	13aa <move_window+0x32>
    1380:	4604      	mov	r4, r0
    1382:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
    1384:	4b0a      	ldr	r3, [pc, #40]	; (13b0 <move_window+0x38>)
    1386:	4798      	blx	r3
		if (res == FR_OK) {			/* Fill sector window with new data */
    1388:	4606      	mov	r6, r0
    138a:	b108      	cbz	r0, 1390 <move_window+0x18>
}
    138c:	4630      	mov	r0, r6
    138e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
    1390:	2301      	movs	r3, #1
    1392:	462a      	mov	r2, r5
    1394:	f104 0134 	add.w	r1, r4, #52	; 0x34
    1398:	7860      	ldrb	r0, [r4, #1]
    139a:	4f06      	ldr	r7, [pc, #24]	; (13b4 <move_window+0x3c>)
    139c:	47b8      	blx	r7
    139e:	b110      	cbz	r0, 13a6 <move_window+0x2e>
				res = FR_DISK_ERR;
    13a0:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
    13a2:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
    13a6:	6325      	str	r5, [r4, #48]	; 0x30
    13a8:	e7f0      	b.n	138c <move_window+0x14>
	FRESULT res = FR_OK;
    13aa:	2600      	movs	r6, #0
    13ac:	e7ee      	b.n	138c <move_window+0x14>
    13ae:	bf00      	nop
    13b0:	00001319 	.word	0x00001319
    13b4:	00000b21 	.word	0x00000b21

000013b8 <check_fs>:
static
BYTE check_fs (	/* 0:Valid FAT-BS, 1:Valid BS but not FAT, 2:Not a BS, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    13b8:	b510      	push	{r4, lr}
    13ba:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
    13bc:	2300      	movs	r3, #0
    13be:	7103      	strb	r3, [r0, #4]
    13c0:	f04f 33ff 	mov.w	r3, #4294967295
    13c4:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
    13c6:	4b1e      	ldr	r3, [pc, #120]	; (1440 <check_fs+0x88>)
    13c8:	4798      	blx	r3
    13ca:	b108      	cbz	r0, 13d0 <check_fs+0x18>
		return 3;
    13cc:	2003      	movs	r0, #3
    13ce:	bd10      	pop	{r4, pc}

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
    13d0:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
    13d4:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
    13d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    13dc:	b21b      	sxth	r3, r3
    13de:	4a19      	ldr	r2, [pc, #100]	; (1444 <check_fs+0x8c>)
    13e0:	4293      	cmp	r3, r2
    13e2:	d001      	beq.n	13e8 <check_fs+0x30>
		return 2;
    13e4:	2002      	movs	r0, #2
    13e6:	bd10      	pop	{r4, pc}

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
    13e8:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
    13ec:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    13f0:	041b      	lsls	r3, r3, #16
    13f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    13f6:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    13fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    13fe:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
    1402:	4313      	orrs	r3, r2
    1404:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1408:	4a0f      	ldr	r2, [pc, #60]	; (1448 <check_fs+0x90>)
    140a:	4293      	cmp	r3, r2
    140c:	d015      	beq.n	143a <check_fs+0x82>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    140e:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
    1412:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    1416:	041b      	lsls	r3, r3, #16
    1418:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    141c:	f894 2087 	ldrb.w	r2, [r4, #135]	; 0x87
    1420:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1424:	f894 2086 	ldrb.w	r2, [r4, #134]	; 0x86
    1428:	4313      	orrs	r3, r2
    142a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    142e:	4a06      	ldr	r2, [pc, #24]	; (1448 <check_fs+0x90>)
    1430:	4293      	cmp	r3, r2
    1432:	d001      	beq.n	1438 <check_fs+0x80>
		return 0;

	return 1;
    1434:	2001      	movs	r0, #1
}
    1436:	bd10      	pop	{r4, pc}
    1438:	bd10      	pop	{r4, pc}
		return 0;
    143a:	2000      	movs	r0, #0
    143c:	bd10      	pop	{r4, pc}
    143e:	bf00      	nop
    1440:	00001379 	.word	0x00001379
    1444:	ffffaa55 	.word	0xffffaa55
    1448:	00544146 	.word	0x00544146

0000144c <validate>:
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */

	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
    144c:	b1b0      	cbz	r0, 147c <validate+0x30>
{
    144e:	b508      	push	{r3, lr}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
    1450:	6803      	ldr	r3, [r0, #0]
    1452:	b1ab      	cbz	r3, 1480 <validate+0x34>
    1454:	7819      	ldrb	r1, [r3, #0]
    1456:	b909      	cbnz	r1, 145c <validate+0x10>
		return FR_INVALID_OBJECT;
    1458:	2009      	movs	r0, #9
    145a:	bd08      	pop	{r3, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
    145c:	88d9      	ldrh	r1, [r3, #6]
    145e:	8882      	ldrh	r2, [r0, #4]
    1460:	4291      	cmp	r1, r2
    1462:	d001      	beq.n	1468 <validate+0x1c>
		return FR_INVALID_OBJECT;
    1464:	2009      	movs	r0, #9
    1466:	bd08      	pop	{r3, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
    1468:	7858      	ldrb	r0, [r3, #1]
    146a:	4b06      	ldr	r3, [pc, #24]	; (1484 <validate+0x38>)
    146c:	4798      	blx	r3
    146e:	f010 0f01 	tst.w	r0, #1
    1472:	d001      	beq.n	1478 <validate+0x2c>
		return FR_INVALID_OBJECT;
    1474:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
    1476:	bd08      	pop	{r3, pc}
	return FR_OK;
    1478:	2000      	movs	r0, #0
    147a:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
    147c:	2009      	movs	r0, #9
    147e:	4770      	bx	lr
    1480:	2009      	movs	r0, #9
    1482:	bd08      	pop	{r3, pc}
    1484:	00000b05 	.word	0x00000b05

00001488 <find_volume>:
{
    1488:	b5f0      	push	{r4, r5, r6, r7, lr}
    148a:	b085      	sub	sp, #20
    148c:	4606      	mov	r6, r0
    148e:	4617      	mov	r7, r2
	*rfs = 0;
    1490:	2300      	movs	r3, #0
    1492:	6003      	str	r3, [r0, #0]
	vol = get_ldnumber(path);
    1494:	4608      	mov	r0, r1
    1496:	4bc5      	ldr	r3, [pc, #788]	; (17ac <find_volume+0x324>)
    1498:	4798      	blx	r3
	if (vol < 0) return FR_INVALID_DRIVE;
    149a:	1e05      	subs	r5, r0, #0
    149c:	f2c0 8198 	blt.w	17d0 <find_volume+0x348>
	fs = FatFs[vol];					/* Get pointer to the file system object */
    14a0:	4bc3      	ldr	r3, [pc, #780]	; (17b0 <find_volume+0x328>)
    14a2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    14a6:	685c      	ldr	r4, [r3, #4]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    14a8:	2c00      	cmp	r4, #0
    14aa:	f000 8194 	beq.w	17d6 <find_volume+0x34e>
	*rfs = fs;							/* Return pointer to the file system object */
    14ae:	6034      	str	r4, [r6, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
    14b0:	7823      	ldrb	r3, [r4, #0]
    14b2:	b17b      	cbz	r3, 14d4 <find_volume+0x4c>
		stat = disk_status(fs->drv);
    14b4:	7860      	ldrb	r0, [r4, #1]
    14b6:	4bbf      	ldr	r3, [pc, #764]	; (17b4 <find_volume+0x32c>)
    14b8:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    14ba:	f010 0f01 	tst.w	r0, #1
    14be:	d109      	bne.n	14d4 <find_volume+0x4c>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
    14c0:	2f00      	cmp	r7, #0
    14c2:	f000 818a 	beq.w	17da <find_volume+0x352>
    14c6:	f010 0f04 	tst.w	r0, #4
    14ca:	d001      	beq.n	14d0 <find_volume+0x48>
				return FR_WRITE_PROTECTED;
    14cc:	200a      	movs	r0, #10
    14ce:	e180      	b.n	17d2 <find_volume+0x34a>
			return FR_OK;				/* The file system object is valid */
    14d0:	2000      	movs	r0, #0
    14d2:	e17e      	b.n	17d2 <find_volume+0x34a>
	fs->fs_type = 0;					/* Clear the file system object */
    14d4:	2300      	movs	r3, #0
    14d6:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    14d8:	b2e8      	uxtb	r0, r5
    14da:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
    14dc:	4bb6      	ldr	r3, [pc, #728]	; (17b8 <find_volume+0x330>)
    14de:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    14e0:	f010 0f01 	tst.w	r0, #1
    14e4:	d001      	beq.n	14ea <find_volume+0x62>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    14e6:	2003      	movs	r0, #3
    14e8:	e173      	b.n	17d2 <find_volume+0x34a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    14ea:	b127      	cbz	r7, 14f6 <find_volume+0x6e>
    14ec:	f010 0f04 	tst.w	r0, #4
    14f0:	d001      	beq.n	14f6 <find_volume+0x6e>
		return FR_WRITE_PROTECTED;
    14f2:	200a      	movs	r0, #10
    14f4:	e16d      	b.n	17d2 <find_volume+0x34a>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
    14f6:	2100      	movs	r1, #0
    14f8:	4620      	mov	r0, r4
    14fa:	4bb0      	ldr	r3, [pc, #704]	; (17bc <find_volume+0x334>)
    14fc:	4798      	blx	r3
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
    14fe:	2801      	cmp	r0, #1
    1500:	d024      	beq.n	154c <find_volume+0xc4>
	bsect = 0;
    1502:	2600      	movs	r6, #0
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    1504:	2803      	cmp	r0, #3
    1506:	f000 816a 	beq.w	17de <find_volume+0x356>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    150a:	2800      	cmp	r0, #0
    150c:	d034      	beq.n	1578 <find_volume+0xf0>
    150e:	200d      	movs	r0, #13
    1510:	e15f      	b.n	17d2 <find_volume+0x34a>
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
    1512:	2300      	movs	r3, #0
    1514:	aa04      	add	r2, sp, #16
    1516:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    151a:	f842 3c10 	str.w	r3, [r2, #-16]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
    151e:	3101      	adds	r1, #1
    1520:	2903      	cmp	r1, #3
    1522:	d815      	bhi.n	1550 <find_volume+0xc8>
			pt = fs->win + MBR_Table + i * SZ_PTE;
    1524:	f104 0334 	add.w	r3, r4, #52	; 0x34
    1528:	010a      	lsls	r2, r1, #4
    152a:	f502 72df 	add.w	r2, r2, #446	; 0x1be
    152e:	4413      	add	r3, r2
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
    1530:	791a      	ldrb	r2, [r3, #4]
    1532:	2a00      	cmp	r2, #0
    1534:	d0ed      	beq.n	1512 <find_volume+0x8a>
    1536:	7ad8      	ldrb	r0, [r3, #11]
    1538:	7a9a      	ldrb	r2, [r3, #10]
    153a:	0412      	lsls	r2, r2, #16
    153c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
    1540:	7a58      	ldrb	r0, [r3, #9]
    1542:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    1546:	7a1b      	ldrb	r3, [r3, #8]
    1548:	4313      	orrs	r3, r2
    154a:	e7e3      	b.n	1514 <find_volume+0x8c>
    154c:	2100      	movs	r1, #0
    154e:	e7e7      	b.n	1520 <find_volume+0x98>
    1550:	2500      	movs	r5, #0
    1552:	e008      	b.n	1566 <find_volume+0xde>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
    1554:	4631      	mov	r1, r6
    1556:	4620      	mov	r0, r4
    1558:	4b98      	ldr	r3, [pc, #608]	; (17bc <find_volume+0x334>)
    155a:	4798      	blx	r3
		} while (!LD2PT(vol) && fmt && ++i < 4);
    155c:	2800      	cmp	r0, #0
    155e:	d0d1      	beq.n	1504 <find_volume+0x7c>
    1560:	3501      	adds	r5, #1
    1562:	2d03      	cmp	r5, #3
    1564:	d8ce      	bhi.n	1504 <find_volume+0x7c>
			bsect = br[i];
    1566:	ab04      	add	r3, sp, #16
    1568:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    156c:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
    1570:	2e00      	cmp	r6, #0
    1572:	d1ef      	bne.n	1554 <find_volume+0xcc>
    1574:	2002      	movs	r0, #2
    1576:	e7f1      	b.n	155c <find_volume+0xd4>
	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    1578:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    157c:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    1580:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1584:	b21b      	sxth	r3, r3
    1586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    158a:	d001      	beq.n	1590 <find_volume+0x108>
		return FR_NO_FILESYSTEM;
    158c:	200d      	movs	r0, #13
    158e:	e120      	b.n	17d2 <find_volume+0x34a>
	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
    1590:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    1594:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
    1598:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
    159c:	d10d      	bne.n	15ba <find_volume+0x132>
    159e:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
    15a2:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
    15a6:	0412      	lsls	r2, r2, #16
    15a8:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    15ac:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    15b0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    15b4:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    15b8:	431a      	orrs	r2, r3
	fs->fsize = fasize;
    15ba:	61e2      	str	r2, [r4, #28]
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    15bc:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    15c0:	70e1      	strb	r1, [r4, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
    15c2:	1e4b      	subs	r3, r1, #1
    15c4:	b2db      	uxtb	r3, r3
    15c6:	2b01      	cmp	r3, #1
    15c8:	d901      	bls.n	15ce <find_volume+0x146>
		return FR_NO_FILESYSTEM;
    15ca:	200d      	movs	r0, #13
    15cc:	e101      	b.n	17d2 <find_volume+0x34a>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
    15ce:	fb01 f102 	mul.w	r1, r1, r2
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    15d2:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
    15d6:	70a5      	strb	r5, [r4, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
    15d8:	b90d      	cbnz	r5, 15de <find_volume+0x156>
		return FR_NO_FILESYSTEM;
    15da:	200d      	movs	r0, #13
    15dc:	e0f9      	b.n	17d2 <find_volume+0x34a>
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
    15de:	1e6b      	subs	r3, r5, #1
    15e0:	421d      	tst	r5, r3
    15e2:	d001      	beq.n	15e8 <find_volume+0x160>
		return FR_NO_FILESYSTEM;
    15e4:	200d      	movs	r0, #13
    15e6:	e0f4      	b.n	17d2 <find_volume+0x34a>
	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    15e8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    15ec:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
    15f0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    15f4:	8120      	strh	r0, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
    15f6:	f010 0f0f 	tst.w	r0, #15
    15fa:	f040 80f2 	bne.w	17e2 <find_volume+0x35a>
	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
    15fe:	f894 7048 	ldrb.w	r7, [r4, #72]	; 0x48
    1602:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
    1606:	ea53 2307 	orrs.w	r3, r3, r7, lsl #8
    160a:	d10d      	bne.n	1628 <find_volume+0x1a0>
    160c:	f894 7057 	ldrb.w	r7, [r4, #87]	; 0x57
    1610:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
    1614:	041b      	lsls	r3, r3, #16
    1616:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
    161a:	f894 7055 	ldrb.w	r7, [r4, #85]	; 0x55
    161e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    1622:	f894 7054 	ldrb.w	r7, [r4, #84]	; 0x54
    1626:	433b      	orrs	r3, r7
	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
    1628:	f894 e043 	ldrb.w	lr, [r4, #67]	; 0x43
    162c:	f894 7042 	ldrb.w	r7, [r4, #66]	; 0x42
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
    1630:	ea57 270e 	orrs.w	r7, r7, lr, lsl #8
    1634:	f000 80d7 	beq.w	17e6 <find_volume+0x35e>
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
    1638:	eb01 0e07 	add.w	lr, r1, r7
    163c:	eb0e 1e10 	add.w	lr, lr, r0, lsr #4
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    1640:	4573      	cmp	r3, lr
    1642:	f0c0 80d2 	bcc.w	17ea <find_volume+0x362>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    1646:	eba3 030e 	sub.w	r3, r3, lr
    164a:	fbb3 f3f5 	udiv	r3, r3, r5
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    164e:	2b00      	cmp	r3, #0
    1650:	f000 80cd 	beq.w	17ee <find_volume+0x366>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    1654:	f640 75f5 	movw	r5, #4085	; 0xff5
    1658:	42ab      	cmp	r3, r5
    165a:	f200 8097 	bhi.w	178c <find_volume+0x304>
	fmt = FS_FAT12;
    165e:	2501      	movs	r5, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    1660:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
    1664:	4563      	cmp	r3, ip
    1666:	d900      	bls.n	166a <find_volume+0x1e2>
    1668:	2503      	movs	r5, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    166a:	3302      	adds	r3, #2
    166c:	61a3      	str	r3, [r4, #24]
	fs->volbase = bsect;								/* Volume start sector */
    166e:	6226      	str	r6, [r4, #32]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    1670:	4437      	add	r7, r6
    1672:	6267      	str	r7, [r4, #36]	; 0x24
	fs->database = bsect + sysect;						/* Data start sector */
    1674:	44b6      	add	lr, r6
    1676:	f8c4 e02c 	str.w	lr, [r4, #44]	; 0x2c
	if (fmt == FS_FAT32) {
    167a:	2d03      	cmp	r5, #3
    167c:	f040 8088 	bne.w	1790 <find_volume+0x308>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    1680:	2800      	cmp	r0, #0
    1682:	f040 80b6 	bne.w	17f2 <find_volume+0x36a>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
    1686:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    168a:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
    168e:	0409      	lsls	r1, r1, #16
    1690:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
    1694:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    1698:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    169c:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    16a0:	4301      	orrs	r1, r0
    16a2:	62a1      	str	r1, [r4, #40]	; 0x28
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
    16a4:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
    16a6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
    16aa:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    16ae:	f0c0 80a4 	bcc.w	17fa <find_volume+0x372>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
    16b2:	f04f 33ff 	mov.w	r3, #4294967295
    16b6:	6123      	str	r3, [r4, #16]
    16b8:	60e3      	str	r3, [r4, #12]
	fs->fsi_flag = 0x80;
    16ba:	2380      	movs	r3, #128	; 0x80
    16bc:	7163      	strb	r3, [r4, #5]
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo == 1 */
    16be:	2d03      	cmp	r5, #3
    16c0:	d15a      	bne.n	1778 <find_volume+0x2f0>
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
    16c2:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
    16c6:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    16ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    16ce:	b21b      	sxth	r3, r3
    16d0:	2b01      	cmp	r3, #1
    16d2:	d151      	bne.n	1778 <find_volume+0x2f0>
		&& move_window(fs, bsect + 1) == FR_OK)
    16d4:	1c71      	adds	r1, r6, #1
    16d6:	4620      	mov	r0, r4
    16d8:	4b39      	ldr	r3, [pc, #228]	; (17c0 <find_volume+0x338>)
    16da:	4798      	blx	r3
    16dc:	2800      	cmp	r0, #0
    16de:	d14b      	bne.n	1778 <find_volume+0x2f0>
		fs->fsi_flag = 0;
    16e0:	2300      	movs	r3, #0
    16e2:	7163      	strb	r3, [r4, #5]
		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
    16e4:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
    16e8:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
    16ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    16f0:	b21b      	sxth	r3, r3
    16f2:	4a34      	ldr	r2, [pc, #208]	; (17c4 <find_volume+0x33c>)
    16f4:	4293      	cmp	r3, r2
    16f6:	d13f      	bne.n	1778 <find_volume+0x2f0>
			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
    16f8:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
    16fc:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    1700:	041b      	lsls	r3, r3, #16
    1702:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    1706:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
    170a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    170e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    1712:	4313      	orrs	r3, r2
    1714:	4a2c      	ldr	r2, [pc, #176]	; (17c8 <find_volume+0x340>)
    1716:	4293      	cmp	r3, r2
    1718:	d12e      	bne.n	1778 <find_volume+0x2f0>
			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
    171a:	f894 221b 	ldrb.w	r2, [r4, #539]	; 0x21b
    171e:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
    1722:	041b      	lsls	r3, r3, #16
    1724:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    1728:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
    172c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1730:	f894 2218 	ldrb.w	r2, [r4, #536]	; 0x218
    1734:	4313      	orrs	r3, r2
    1736:	4a25      	ldr	r2, [pc, #148]	; (17cc <find_volume+0x344>)
    1738:	4293      	cmp	r3, r2
    173a:	d11d      	bne.n	1778 <find_volume+0x2f0>
			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
    173c:	f894 221f 	ldrb.w	r2, [r4, #543]	; 0x21f
    1740:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
    1744:	041b      	lsls	r3, r3, #16
    1746:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    174a:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
    174e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1752:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
    1756:	4313      	orrs	r3, r2
    1758:	6123      	str	r3, [r4, #16]
			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
    175a:	f894 2223 	ldrb.w	r2, [r4, #547]	; 0x223
    175e:	f894 3222 	ldrb.w	r3, [r4, #546]	; 0x222
    1762:	041b      	lsls	r3, r3, #16
    1764:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    1768:	f894 2221 	ldrb.w	r2, [r4, #545]	; 0x221
    176c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1770:	f894 2220 	ldrb.w	r2, [r4, #544]	; 0x220
    1774:	4313      	orrs	r3, r2
    1776:	60e3      	str	r3, [r4, #12]
	fs->fs_type = fmt;	/* FAT sub-type */
    1778:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;	/* File system mount ID */
    177a:	4a0d      	ldr	r2, [pc, #52]	; (17b0 <find_volume+0x328>)
    177c:	8b13      	ldrh	r3, [r2, #24]
    177e:	3301      	adds	r3, #1
    1780:	b29b      	uxth	r3, r3
    1782:	8313      	strh	r3, [r2, #24]
    1784:	80e3      	strh	r3, [r4, #6]
	fs->cdir = 0;		/* Set current directory to root */
    1786:	2000      	movs	r0, #0
    1788:	6160      	str	r0, [r4, #20]
	return FR_OK;
    178a:	e022      	b.n	17d2 <find_volume+0x34a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    178c:	2502      	movs	r5, #2
    178e:	e767      	b.n	1660 <find_volume+0x1d8>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    1790:	b388      	cbz	r0, 17f6 <find_volume+0x36e>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    1792:	4439      	add	r1, r7
    1794:	62a1      	str	r1, [r4, #40]	; 0x28
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    1796:	2d02      	cmp	r5, #2
    1798:	d101      	bne.n	179e <find_volume+0x316>
    179a:	005b      	lsls	r3, r3, #1
    179c:	e783      	b.n	16a6 <find_volume+0x21e>
    179e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    17a2:	f003 0301 	and.w	r3, r3, #1
    17a6:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    17aa:	e77c      	b.n	16a6 <find_volume+0x21e>
    17ac:	000012bd 	.word	0x000012bd
    17b0:	200000d0 	.word	0x200000d0
    17b4:	00000b05 	.word	0x00000b05
    17b8:	00000acd 	.word	0x00000acd
    17bc:	000013b9 	.word	0x000013b9
    17c0:	00001379 	.word	0x00001379
    17c4:	ffffaa55 	.word	0xffffaa55
    17c8:	41615252 	.word	0x41615252
    17cc:	61417272 	.word	0x61417272
	if (vol < 0) return FR_INVALID_DRIVE;
    17d0:	200b      	movs	r0, #11
}
    17d2:	b005      	add	sp, #20
    17d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    17d6:	200c      	movs	r0, #12
    17d8:	e7fb      	b.n	17d2 <find_volume+0x34a>
			return FR_OK;				/* The file system object is valid */
    17da:	2000      	movs	r0, #0
    17dc:	e7f9      	b.n	17d2 <find_volume+0x34a>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    17de:	2001      	movs	r0, #1
    17e0:	e7f7      	b.n	17d2 <find_volume+0x34a>
		return FR_NO_FILESYSTEM;
    17e2:	200d      	movs	r0, #13
    17e4:	e7f5      	b.n	17d2 <find_volume+0x34a>
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
    17e6:	200d      	movs	r0, #13
    17e8:	e7f3      	b.n	17d2 <find_volume+0x34a>
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    17ea:	200d      	movs	r0, #13
    17ec:	e7f1      	b.n	17d2 <find_volume+0x34a>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    17ee:	200d      	movs	r0, #13
    17f0:	e7ef      	b.n	17d2 <find_volume+0x34a>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    17f2:	200d      	movs	r0, #13
    17f4:	e7ed      	b.n	17d2 <find_volume+0x34a>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    17f6:	200d      	movs	r0, #13
    17f8:	e7eb      	b.n	17d2 <find_volume+0x34a>
		return FR_NO_FILESYSTEM;
    17fa:	200d      	movs	r0, #13
    17fc:	e7e9      	b.n	17d2 <find_volume+0x34a>
    17fe:	bf00      	nop

00001800 <sync_fs>:
{
    1800:	b570      	push	{r4, r5, r6, lr}
    1802:	4604      	mov	r4, r0
	res = sync_window(fs);
    1804:	4b2d      	ldr	r3, [pc, #180]	; (18bc <sync_fs+0xbc>)
    1806:	4798      	blx	r3
	if (res == FR_OK) {
    1808:	4605      	mov	r5, r0
    180a:	b948      	cbnz	r0, 1820 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    180c:	7823      	ldrb	r3, [r4, #0]
    180e:	2b03      	cmp	r3, #3
    1810:	d008      	beq.n	1824 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    1812:	2200      	movs	r2, #0
    1814:	4611      	mov	r1, r2
    1816:	7860      	ldrb	r0, [r4, #1]
    1818:	4b29      	ldr	r3, [pc, #164]	; (18c0 <sync_fs+0xc0>)
    181a:	4798      	blx	r3
    181c:	b100      	cbz	r0, 1820 <sync_fs+0x20>
			res = FR_DISK_ERR;
    181e:	2501      	movs	r5, #1
}
    1820:	4628      	mov	r0, r5
    1822:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    1824:	7963      	ldrb	r3, [r4, #5]
    1826:	2b01      	cmp	r3, #1
    1828:	d1f3      	bne.n	1812 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
    182a:	f104 0634 	add.w	r6, r4, #52	; 0x34
    182e:	f44f 7200 	mov.w	r2, #512	; 0x200
    1832:	2100      	movs	r1, #0
    1834:	4630      	mov	r0, r6
    1836:	4b23      	ldr	r3, [pc, #140]	; (18c4 <sync_fs+0xc4>)
    1838:	4798      	blx	r3
			ST_WORD(fs->win + BS_55AA, 0xAA55);
    183a:	2355      	movs	r3, #85	; 0x55
    183c:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
    1840:	23aa      	movs	r3, #170	; 0xaa
    1842:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
    1846:	2352      	movs	r3, #82	; 0x52
    1848:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    184c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    1850:	2361      	movs	r3, #97	; 0x61
    1852:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    1856:	2241      	movs	r2, #65	; 0x41
    1858:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
    185c:	2172      	movs	r1, #114	; 0x72
    185e:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
    1862:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
    1866:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
    186a:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
    186e:	6923      	ldr	r3, [r4, #16]
    1870:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
    1874:	f3c3 2207 	ubfx	r2, r3, #8, #8
    1878:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
    187c:	f3c3 4207 	ubfx	r2, r3, #16, #8
    1880:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
    1884:	0e1b      	lsrs	r3, r3, #24
    1886:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
    188a:	68e3      	ldr	r3, [r4, #12]
    188c:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
    1890:	f3c3 2207 	ubfx	r2, r3, #8, #8
    1894:	f884 2221 	strb.w	r2, [r4, #545]	; 0x221
    1898:	f3c3 4207 	ubfx	r2, r3, #16, #8
    189c:	f884 2222 	strb.w	r2, [r4, #546]	; 0x222
    18a0:	0e1b      	lsrs	r3, r3, #24
    18a2:	f884 3223 	strb.w	r3, [r4, #547]	; 0x223
			fs->winsect = fs->volbase + 1;
    18a6:	6a22      	ldr	r2, [r4, #32]
    18a8:	3201      	adds	r2, #1
    18aa:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
    18ac:	2301      	movs	r3, #1
    18ae:	4631      	mov	r1, r6
    18b0:	7860      	ldrb	r0, [r4, #1]
    18b2:	4e05      	ldr	r6, [pc, #20]	; (18c8 <sync_fs+0xc8>)
    18b4:	47b0      	blx	r6
			fs->fsi_flag = 0;
    18b6:	2300      	movs	r3, #0
    18b8:	7163      	strb	r3, [r4, #5]
    18ba:	e7aa      	b.n	1812 <sync_fs+0x12>
    18bc:	00001319 	.word	0x00001319
    18c0:	00000bc1 	.word	0x00000bc1
    18c4:	000010e1 	.word	0x000010e1
    18c8:	00000b71 	.word	0x00000b71

000018cc <clust2sect>:
	clst -= 2;
    18cc:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    18ce:	6983      	ldr	r3, [r0, #24]
    18d0:	3b02      	subs	r3, #2
    18d2:	4299      	cmp	r1, r3
    18d4:	d204      	bcs.n	18e0 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
    18d6:	7883      	ldrb	r3, [r0, #2]
    18d8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    18da:	fb03 0001 	mla	r0, r3, r1, r0
    18de:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    18e0:	2000      	movs	r0, #0
}
    18e2:	4770      	bx	lr

000018e4 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    18e4:	2901      	cmp	r1, #1
    18e6:	d96d      	bls.n	19c4 <get_fat+0xe0>
{
    18e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    18ea:	6983      	ldr	r3, [r0, #24]
    18ec:	4299      	cmp	r1, r3
    18ee:	d26b      	bcs.n	19c8 <get_fat+0xe4>
    18f0:	460c      	mov	r4, r1
    18f2:	4606      	mov	r6, r0
		switch (fs->fs_type) {
    18f4:	7803      	ldrb	r3, [r0, #0]
    18f6:	2b02      	cmp	r3, #2
    18f8:	d02f      	beq.n	195a <get_fat+0x76>
    18fa:	2b03      	cmp	r3, #3
    18fc:	d043      	beq.n	1986 <get_fat+0xa2>
    18fe:	2b01      	cmp	r3, #1
    1900:	d001      	beq.n	1906 <get_fat+0x22>
			val = 1;	/* Internal error */
    1902:	2001      	movs	r0, #1
    1904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bc = (UINT)clst; bc += bc / 2;
    1906:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    190a:	6a41      	ldr	r1, [r0, #36]	; 0x24
    190c:	eb01 2155 	add.w	r1, r1, r5, lsr #9
    1910:	4b2e      	ldr	r3, [pc, #184]	; (19cc <get_fat+0xe8>)
    1912:	4798      	blx	r3
    1914:	b110      	cbz	r0, 191c <get_fat+0x38>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    1916:	f04f 30ff 	mov.w	r0, #4294967295
    191a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
    191c:	1c6f      	adds	r7, r5, #1
    191e:	f3c5 0508 	ubfx	r5, r5, #0, #9
    1922:	4435      	add	r5, r6
    1924:	f895 5034 	ldrb.w	r5, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    1928:	6a71      	ldr	r1, [r6, #36]	; 0x24
    192a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
    192e:	4630      	mov	r0, r6
    1930:	4b26      	ldr	r3, [pc, #152]	; (19cc <get_fat+0xe8>)
    1932:	4798      	blx	r3
    1934:	b110      	cbz	r0, 193c <get_fat+0x58>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    1936:	f04f 30ff 	mov.w	r0, #4294967295
    193a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc |= fs->win[bc % SS(fs)] << 8;
    193c:	f3c7 0008 	ubfx	r0, r7, #0, #9
    1940:	4430      	add	r0, r6
    1942:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    1946:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
    194a:	f014 0f01 	tst.w	r4, #1
    194e:	d001      	beq.n	1954 <get_fat+0x70>
    1950:	0900      	lsrs	r0, r0, #4
    1952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1954:	f3c0 000b 	ubfx	r0, r0, #0, #12
    1958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    195a:	6a41      	ldr	r1, [r0, #36]	; 0x24
    195c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
    1960:	4b1a      	ldr	r3, [pc, #104]	; (19cc <get_fat+0xe8>)
    1962:	4798      	blx	r3
    1964:	b110      	cbz	r0, 196c <get_fat+0x88>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    1966:	f04f 30ff 	mov.w	r0, #4294967295
    196a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p = &fs->win[clst * 2 % SS(fs)];
    196c:	0061      	lsls	r1, r4, #1
    196e:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
    1972:	f101 0330 	add.w	r3, r1, #48	; 0x30
    1976:	4433      	add	r3, r6
			val = LD_WORD(p);
    1978:	795b      	ldrb	r3, [r3, #5]
    197a:	1870      	adds	r0, r6, r1
    197c:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    1980:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
    1984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    1986:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1988:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    198c:	4b0f      	ldr	r3, [pc, #60]	; (19cc <get_fat+0xe8>)
    198e:	4798      	blx	r3
    1990:	b110      	cbz	r0, 1998 <get_fat+0xb4>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    1992:	f04f 30ff 	mov.w	r0, #4294967295
}
    1996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p = &fs->win[clst * 4 % SS(fs)];
    1998:	00a0      	lsls	r0, r4, #2
    199a:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
    199e:	f100 0230 	add.w	r2, r0, #48	; 0x30
    19a2:	4432      	add	r2, r6
			val = LD_DWORD(p) & 0x0FFFFFFF;
    19a4:	79d1      	ldrb	r1, [r2, #7]
    19a6:	7993      	ldrb	r3, [r2, #6]
			p = &fs->win[clst * 4 % SS(fs)];
    19a8:	3204      	adds	r2, #4
			val = LD_DWORD(p) & 0x0FFFFFFF;
    19aa:	041b      	lsls	r3, r3, #16
    19ac:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    19b0:	7852      	ldrb	r2, [r2, #1]
    19b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    19b6:	4430      	add	r0, r6
    19b8:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    19bc:	4318      	orrs	r0, r3
    19be:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
    19c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
    19c4:	2001      	movs	r0, #1
    19c6:	4770      	bx	lr
    19c8:	2001      	movs	r0, #1
    19ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19cc:	00001379 	.word	0x00001379

000019d0 <dir_sdi>:
{
    19d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19d2:	4605      	mov	r5, r0
	dp->index = (WORD)idx;	/* Current index */
    19d4:	80c1      	strh	r1, [r0, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
    19d6:	6884      	ldr	r4, [r0, #8]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
    19d8:	2c01      	cmp	r4, #1
    19da:	d03c      	beq.n	1a56 <dir_sdi+0x86>
    19dc:	460e      	mov	r6, r1
    19de:	6803      	ldr	r3, [r0, #0]
    19e0:	699a      	ldr	r2, [r3, #24]
    19e2:	4294      	cmp	r4, r2
    19e4:	d301      	bcc.n	19ea <dir_sdi+0x1a>
		return FR_INT_ERR;
    19e6:	2002      	movs	r0, #2
    19e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    19ea:	b914      	cbnz	r4, 19f2 <dir_sdi+0x22>
    19ec:	781a      	ldrb	r2, [r3, #0]
    19ee:	2a03      	cmp	r2, #3
    19f0:	d005      	beq.n	19fe <dir_sdi+0x2e>
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
    19f2:	b95c      	cbnz	r4, 1a0c <dir_sdi+0x3c>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
    19f4:	891a      	ldrh	r2, [r3, #8]
    19f6:	4296      	cmp	r6, r2
    19f8:	d303      	bcc.n	1a02 <dir_sdi+0x32>
			return FR_INT_ERR;
    19fa:	2002      	movs	r0, #2
    19fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dp->fs->dirbase;
    19fe:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    1a00:	e7f7      	b.n	19f2 <dir_sdi+0x22>
		sect = dp->fs->dirbase;
    1a02:	6a98      	ldr	r0, [r3, #40]	; 0x28
	dp->clust = clst;	/* Current cluster# */
    1a04:	60ec      	str	r4, [r5, #12]
	if (!sect) return FR_INT_ERR;
    1a06:	b9d0      	cbnz	r0, 1a3e <dir_sdi+0x6e>
    1a08:	2002      	movs	r0, #2
}
    1a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
    1a0c:	789f      	ldrb	r7, [r3, #2]
    1a0e:	013f      	lsls	r7, r7, #4
		while (idx >= ic) {	/* Follow cluster chain */
    1a10:	42be      	cmp	r6, r7
    1a12:	d30f      	bcc.n	1a34 <dir_sdi+0x64>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
    1a14:	4621      	mov	r1, r4
    1a16:	6828      	ldr	r0, [r5, #0]
    1a18:	4b13      	ldr	r3, [pc, #76]	; (1a68 <dir_sdi+0x98>)
    1a1a:	4798      	blx	r3
    1a1c:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1a1e:	f1b0 3fff 	cmp.w	r0, #4294967295
    1a22:	d01a      	beq.n	1a5a <dir_sdi+0x8a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
    1a24:	2801      	cmp	r0, #1
    1a26:	d91a      	bls.n	1a5e <dir_sdi+0x8e>
    1a28:	682b      	ldr	r3, [r5, #0]
    1a2a:	699b      	ldr	r3, [r3, #24]
    1a2c:	4298      	cmp	r0, r3
    1a2e:	d218      	bcs.n	1a62 <dir_sdi+0x92>
			idx -= ic;
    1a30:	1bf6      	subs	r6, r6, r7
    1a32:	e7ed      	b.n	1a10 <dir_sdi+0x40>
		sect = clust2sect(dp->fs, clst);
    1a34:	4621      	mov	r1, r4
    1a36:	6828      	ldr	r0, [r5, #0]
    1a38:	4b0c      	ldr	r3, [pc, #48]	; (1a6c <dir_sdi+0x9c>)
    1a3a:	4798      	blx	r3
    1a3c:	e7e2      	b.n	1a04 <dir_sdi+0x34>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
    1a3e:	eb00 1016 	add.w	r0, r0, r6, lsr #4
    1a42:	6128      	str	r0, [r5, #16]
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
    1a44:	682b      	ldr	r3, [r5, #0]
    1a46:	3334      	adds	r3, #52	; 0x34
    1a48:	f006 060f 	and.w	r6, r6, #15
    1a4c:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1a50:	616e      	str	r6, [r5, #20]
	return FR_OK;
    1a52:	2000      	movs	r0, #0
    1a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_INT_ERR;
    1a56:	2002      	movs	r0, #2
    1a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1a5a:	2001      	movs	r0, #1
    1a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return FR_INT_ERR;
    1a5e:	2002      	movs	r0, #2
    1a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a62:	2002      	movs	r0, #2
    1a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a66:	bf00      	nop
    1a68:	000018e5 	.word	0x000018e5
    1a6c:	000018cd 	.word	0x000018cd

00001a70 <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    1a70:	2901      	cmp	r1, #1
    1a72:	f240 8091 	bls.w	1b98 <put_fat+0x128>
    1a76:	6983      	ldr	r3, [r0, #24]
    1a78:	4299      	cmp	r1, r3
    1a7a:	d301      	bcc.n	1a80 <put_fat+0x10>
		res = FR_INT_ERR;
    1a7c:	2302      	movs	r3, #2
    1a7e:	e08c      	b.n	1b9a <put_fat+0x12a>
{
    1a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a84:	4616      	mov	r6, r2
    1a86:	460c      	mov	r4, r1
    1a88:	4605      	mov	r5, r0
		switch (fs->fs_type) {
    1a8a:	7803      	ldrb	r3, [r0, #0]
    1a8c:	2b02      	cmp	r3, #2
    1a8e:	d048      	beq.n	1b22 <put_fat+0xb2>
    1a90:	2b03      	cmp	r3, #3
    1a92:	d05d      	beq.n	1b50 <put_fat+0xe0>
    1a94:	2b01      	cmp	r3, #1
    1a96:	d003      	beq.n	1aa0 <put_fat+0x30>
			res = FR_INT_ERR;
    1a98:	2302      	movs	r3, #2
}
    1a9a:	4618      	mov	r0, r3
    1a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bc = (UINT)clst; bc += bc / 2;
    1aa0:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1aa4:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1aa6:	eb01 2157 	add.w	r1, r1, r7, lsr #9
    1aaa:	4b3d      	ldr	r3, [pc, #244]	; (1ba0 <put_fat+0x130>)
    1aac:	4798      	blx	r3
			if (res != FR_OK) break;
    1aae:	4603      	mov	r3, r0
    1ab0:	2800      	cmp	r0, #0
    1ab2:	d1f2      	bne.n	1a9a <put_fat+0x2a>
			p = &fs->win[bc++ % SS(fs)];
    1ab4:	f107 0801 	add.w	r8, r7, #1
    1ab8:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1abc:	f014 0401 	ands.w	r4, r4, #1
    1ac0:	d022      	beq.n	1b08 <put_fat+0x98>
    1ac2:	19eb      	adds	r3, r5, r7
    1ac4:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
    1ac8:	f003 030f 	and.w	r3, r3, #15
    1acc:	0132      	lsls	r2, r6, #4
    1ace:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    1ad2:	4313      	orrs	r3, r2
    1ad4:	b2db      	uxtb	r3, r3
    1ad6:	442f      	add	r7, r5
    1ad8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			fs->wflag = 1;
    1adc:	2301      	movs	r3, #1
    1ade:	712b      	strb	r3, [r5, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1ae0:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1ae2:	eb01 2158 	add.w	r1, r1, r8, lsr #9
    1ae6:	4628      	mov	r0, r5
    1ae8:	4b2d      	ldr	r3, [pc, #180]	; (1ba0 <put_fat+0x130>)
    1aea:	4798      	blx	r3
			if (res != FR_OK) break;
    1aec:	4603      	mov	r3, r0
    1aee:	2800      	cmp	r0, #0
    1af0:	d1d3      	bne.n	1a9a <put_fat+0x2a>
			p = &fs->win[bc % SS(fs)];
    1af2:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1af6:	b14c      	cbz	r4, 1b0c <put_fat+0x9c>
    1af8:	f3c6 1207 	ubfx	r2, r6, #4, #8
    1afc:	44a8      	add	r8, r5
    1afe:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
			fs->wflag = 1;
    1b02:	2201      	movs	r2, #1
    1b04:	712a      	strb	r2, [r5, #4]
			break;
    1b06:	e7c8      	b.n	1a9a <put_fat+0x2a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1b08:	b2f3      	uxtb	r3, r6
    1b0a:	e7e4      	b.n	1ad6 <put_fat+0x66>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1b0c:	eb05 0208 	add.w	r2, r5, r8
    1b10:	f992 2034 	ldrsb.w	r2, [r2, #52]	; 0x34
    1b14:	f022 020f 	bic.w	r2, r2, #15
    1b18:	f3c6 2603 	ubfx	r6, r6, #8, #4
    1b1c:	4332      	orrs	r2, r6
    1b1e:	b2d2      	uxtb	r2, r2
    1b20:	e7ec      	b.n	1afc <put_fat+0x8c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    1b22:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1b24:	eb01 2114 	add.w	r1, r1, r4, lsr #8
    1b28:	4b1d      	ldr	r3, [pc, #116]	; (1ba0 <put_fat+0x130>)
    1b2a:	4798      	blx	r3
			if (res != FR_OK) break;
    1b2c:	4603      	mov	r3, r0
    1b2e:	2800      	cmp	r0, #0
    1b30:	d1b3      	bne.n	1a9a <put_fat+0x2a>
			p = &fs->win[clst * 2 % SS(fs)];
    1b32:	0061      	lsls	r1, r4, #1
    1b34:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
    1b38:	f101 0030 	add.w	r0, r1, #48	; 0x30
    1b3c:	4428      	add	r0, r5
			ST_WORD(p, (WORD)val);
    1b3e:	4429      	add	r1, r5
    1b40:	f881 6034 	strb.w	r6, [r1, #52]	; 0x34
    1b44:	f3c6 2207 	ubfx	r2, r6, #8, #8
    1b48:	7142      	strb	r2, [r0, #5]
			fs->wflag = 1;
    1b4a:	2201      	movs	r2, #1
    1b4c:	712a      	strb	r2, [r5, #4]
			break;
    1b4e:	e7a4      	b.n	1a9a <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    1b50:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1b52:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    1b56:	4b12      	ldr	r3, [pc, #72]	; (1ba0 <put_fat+0x130>)
    1b58:	4798      	blx	r3
			if (res != FR_OK) break;
    1b5a:	4603      	mov	r3, r0
    1b5c:	2800      	cmp	r0, #0
    1b5e:	d19c      	bne.n	1a9a <put_fat+0x2a>
			p = &fs->win[clst * 4 % SS(fs)];
    1b60:	00a1      	lsls	r1, r4, #2
    1b62:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
    1b66:	f101 0030 	add.w	r0, r1, #48	; 0x30
    1b6a:	4428      	add	r0, r5
			val |= LD_DWORD(p) & 0xF0000000;
    1b6c:	79c4      	ldrb	r4, [r0, #7]
    1b6e:	7982      	ldrb	r2, [r0, #6]
    1b70:	0412      	lsls	r2, r2, #16
    1b72:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    1b76:	4429      	add	r1, r5
    1b78:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    1b7c:	4332      	orrs	r2, r6
			ST_DWORD(p, val);
    1b7e:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
    1b82:	f3c2 2107 	ubfx	r1, r2, #8, #8
    1b86:	7141      	strb	r1, [r0, #5]
    1b88:	f3c2 4107 	ubfx	r1, r2, #16, #8
    1b8c:	7181      	strb	r1, [r0, #6]
    1b8e:	0e12      	lsrs	r2, r2, #24
    1b90:	71c2      	strb	r2, [r0, #7]
			fs->wflag = 1;
    1b92:	2201      	movs	r2, #1
    1b94:	712a      	strb	r2, [r5, #4]
			break;
    1b96:	e780      	b.n	1a9a <put_fat+0x2a>
		res = FR_INT_ERR;
    1b98:	2302      	movs	r3, #2
}
    1b9a:	4618      	mov	r0, r3
    1b9c:	4770      	bx	lr
    1b9e:	bf00      	nop
    1ba0:	00001379 	.word	0x00001379

00001ba4 <create_chain>:
{
    1ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ba6:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
    1ba8:	460f      	mov	r7, r1
    1baa:	b931      	cbnz	r1, 1bba <create_chain+0x16>
		scl = fs->last_clust;			/* Get suggested start point */
    1bac:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1bae:	b18e      	cbz	r6, 1bd4 <create_chain+0x30>
    1bb0:	6983      	ldr	r3, [r0, #24]
    1bb2:	429e      	cmp	r6, r3
    1bb4:	d30f      	bcc.n	1bd6 <create_chain+0x32>
    1bb6:	2601      	movs	r6, #1
    1bb8:	e00d      	b.n	1bd6 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1bba:	4b29      	ldr	r3, [pc, #164]	; (1c60 <create_chain+0xbc>)
    1bbc:	4798      	blx	r3
    1bbe:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* Invalid value */
    1bc0:	2801      	cmp	r0, #1
    1bc2:	d944      	bls.n	1c4e <create_chain+0xaa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
    1bc4:	f1b0 3fff 	cmp.w	r0, #4294967295
    1bc8:	d046      	beq.n	1c58 <create_chain+0xb4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    1bca:	69aa      	ldr	r2, [r5, #24]
    1bcc:	4290      	cmp	r0, r2
    1bce:	d343      	bcc.n	1c58 <create_chain+0xb4>
		scl = clst;
    1bd0:	463e      	mov	r6, r7
    1bd2:	e000      	b.n	1bd6 <create_chain+0x32>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1bd4:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    1bd6:	4634      	mov	r4, r6
    1bd8:	e00c      	b.n	1bf4 <create_chain+0x50>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1bda:	4621      	mov	r1, r4
    1bdc:	4628      	mov	r0, r5
    1bde:	4b20      	ldr	r3, [pc, #128]	; (1c60 <create_chain+0xbc>)
    1be0:	4798      	blx	r3
		if (cs == 0) break;				/* Found a free cluster */
    1be2:	4603      	mov	r3, r0
    1be4:	b170      	cbz	r0, 1c04 <create_chain+0x60>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1be6:	f1b0 3fff 	cmp.w	r0, #4294967295
    1bea:	d035      	beq.n	1c58 <create_chain+0xb4>
    1bec:	2801      	cmp	r0, #1
    1bee:	d033      	beq.n	1c58 <create_chain+0xb4>
		if (ncl == scl) return 0;		/* No free cluster */
    1bf0:	42b4      	cmp	r4, r6
    1bf2:	d030      	beq.n	1c56 <create_chain+0xb2>
		ncl++;							/* Next cluster */
    1bf4:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
    1bf6:	69ab      	ldr	r3, [r5, #24]
    1bf8:	429c      	cmp	r4, r3
    1bfa:	d3ee      	bcc.n	1bda <create_chain+0x36>
			if (ncl > scl) return 0;	/* No free cluster */
    1bfc:	2e01      	cmp	r6, #1
    1bfe:	d928      	bls.n	1c52 <create_chain+0xae>
			ncl = 2;
    1c00:	2402      	movs	r4, #2
    1c02:	e7ea      	b.n	1bda <create_chain+0x36>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    1c04:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    1c08:	4621      	mov	r1, r4
    1c0a:	4628      	mov	r0, r5
    1c0c:	4b15      	ldr	r3, [pc, #84]	; (1c64 <create_chain+0xc0>)
    1c0e:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    1c10:	4603      	mov	r3, r0
    1c12:	b900      	cbnz	r0, 1c16 <create_chain+0x72>
    1c14:	b96f      	cbnz	r7, 1c32 <create_chain+0x8e>
	if (res == FR_OK) {
    1c16:	b99b      	cbnz	r3, 1c40 <create_chain+0x9c>
		fs->last_clust = ncl;			/* Update FSINFO */
    1c18:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    1c1a:	692b      	ldr	r3, [r5, #16]
    1c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
    1c20:	d01c      	beq.n	1c5c <create_chain+0xb8>
			fs->free_clust--;
    1c22:	3b01      	subs	r3, #1
    1c24:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
    1c26:	796b      	ldrb	r3, [r5, #5]
    1c28:	f043 0301 	orr.w	r3, r3, #1
    1c2c:	716b      	strb	r3, [r5, #5]
    1c2e:	4623      	mov	r3, r4
    1c30:	e012      	b.n	1c58 <create_chain+0xb4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    1c32:	4622      	mov	r2, r4
    1c34:	4639      	mov	r1, r7
    1c36:	4628      	mov	r0, r5
    1c38:	4b0a      	ldr	r3, [pc, #40]	; (1c64 <create_chain+0xc0>)
    1c3a:	4798      	blx	r3
    1c3c:	4603      	mov	r3, r0
    1c3e:	e7ea      	b.n	1c16 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    1c40:	2b01      	cmp	r3, #1
    1c42:	d001      	beq.n	1c48 <create_chain+0xa4>
    1c44:	2301      	movs	r3, #1
    1c46:	e007      	b.n	1c58 <create_chain+0xb4>
    1c48:	f04f 33ff 	mov.w	r3, #4294967295
    1c4c:	e004      	b.n	1c58 <create_chain+0xb4>
		if (cs < 2) return 1;			/* Invalid value */
    1c4e:	2301      	movs	r3, #1
    1c50:	e002      	b.n	1c58 <create_chain+0xb4>
			if (ncl > scl) return 0;	/* No free cluster */
    1c52:	2300      	movs	r3, #0
    1c54:	e000      	b.n	1c58 <create_chain+0xb4>
		if (ncl == scl) return 0;		/* No free cluster */
    1c56:	2300      	movs	r3, #0
}
    1c58:	4618      	mov	r0, r3
    1c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c5c:	4623      	mov	r3, r4
    1c5e:	e7fb      	b.n	1c58 <create_chain+0xb4>
    1c60:	000018e5 	.word	0x000018e5
    1c64:	00001a71 	.word	0x00001a71

00001c68 <dir_next>:
{
    1c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
    1c6c:	88c4      	ldrh	r4, [r0, #6]
    1c6e:	3401      	adds	r4, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
    1c70:	b2a3      	uxth	r3, r4
    1c72:	b913      	cbnz	r3, 1c7a <dir_next+0x12>
		return FR_NO_FILE;
    1c74:	2004      	movs	r0, #4
    1c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
    1c7a:	6903      	ldr	r3, [r0, #16]
    1c7c:	b913      	cbnz	r3, 1c84 <dir_next+0x1c>
		return FR_NO_FILE;
    1c7e:	2004      	movs	r0, #4
    1c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1c84:	460e      	mov	r6, r1
    1c86:	4605      	mov	r5, r0
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
    1c88:	f014 070f 	ands.w	r7, r4, #15
    1c8c:	d110      	bne.n	1cb0 <dir_next+0x48>
		dp->sect++;					/* Next sector */
    1c8e:	3301      	adds	r3, #1
    1c90:	6103      	str	r3, [r0, #16]
		if (!dp->clust) {		/* Static table */
    1c92:	68c1      	ldr	r1, [r0, #12]
    1c94:	b931      	cbnz	r1, 1ca4 <dir_next+0x3c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
    1c96:	6803      	ldr	r3, [r0, #0]
    1c98:	891b      	ldrh	r3, [r3, #8]
    1c9a:	429c      	cmp	r4, r3
    1c9c:	d308      	bcc.n	1cb0 <dir_next+0x48>
				return FR_NO_FILE;
    1c9e:	2004      	movs	r0, #4
    1ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1ca4:	6800      	ldr	r0, [r0, #0]
    1ca6:	7883      	ldrb	r3, [r0, #2]
    1ca8:	3b01      	subs	r3, #1
    1caa:	ea13 1814 	ands.w	r8, r3, r4, lsr #4
    1cae:	d008      	beq.n	1cc2 <dir_next+0x5a>
	dp->index = (WORD)i;	/* Current index */
    1cb0:	80ec      	strh	r4, [r5, #6]
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
    1cb2:	682b      	ldr	r3, [r5, #0]
    1cb4:	3334      	adds	r3, #52	; 0x34
    1cb6:	eb03 1347 	add.w	r3, r3, r7, lsl #5
    1cba:	616b      	str	r3, [r5, #20]
	return FR_OK;
    1cbc:	2000      	movs	r0, #0
    1cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
    1cc2:	4b2f      	ldr	r3, [pc, #188]	; (1d80 <dir_next+0x118>)
    1cc4:	4798      	blx	r3
    1cc6:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;
    1cc8:	2801      	cmp	r0, #1
    1cca:	d946      	bls.n	1d5a <dir_next+0xf2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1ccc:	f1b0 3fff 	cmp.w	r0, #4294967295
    1cd0:	d046      	beq.n	1d60 <dir_next+0xf8>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
    1cd2:	6828      	ldr	r0, [r5, #0]
    1cd4:	6983      	ldr	r3, [r0, #24]
    1cd6:	4599      	cmp	r9, r3
    1cd8:	d337      	bcc.n	1d4a <dir_next+0xe2>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
    1cda:	b916      	cbnz	r6, 1ce2 <dir_next+0x7a>
    1cdc:	2004      	movs	r0, #4
    1cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
    1ce2:	68e9      	ldr	r1, [r5, #12]
    1ce4:	4b27      	ldr	r3, [pc, #156]	; (1d84 <dir_next+0x11c>)
    1ce6:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1ce8:	4681      	mov	r9, r0
    1cea:	b910      	cbnz	r0, 1cf2 <dir_next+0x8a>
    1cec:	2007      	movs	r0, #7
    1cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if (clst == 1) return FR_INT_ERR;
    1cf2:	2801      	cmp	r0, #1
    1cf4:	d037      	beq.n	1d66 <dir_next+0xfe>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1cf6:	f1b0 3fff 	cmp.w	r0, #4294967295
    1cfa:	d037      	beq.n	1d6c <dir_next+0x104>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    1cfc:	6828      	ldr	r0, [r5, #0]
    1cfe:	4b22      	ldr	r3, [pc, #136]	; (1d88 <dir_next+0x120>)
    1d00:	4798      	blx	r3
    1d02:	2800      	cmp	r0, #0
    1d04:	d135      	bne.n	1d72 <dir_next+0x10a>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
    1d06:	6828      	ldr	r0, [r5, #0]
    1d08:	f44f 7200 	mov.w	r2, #512	; 0x200
    1d0c:	2100      	movs	r1, #0
    1d0e:	3034      	adds	r0, #52	; 0x34
    1d10:	4b1e      	ldr	r3, [pc, #120]	; (1d8c <dir_next+0x124>)
    1d12:	4798      	blx	r3
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
    1d14:	682e      	ldr	r6, [r5, #0]
    1d16:	4649      	mov	r1, r9
    1d18:	4630      	mov	r0, r6
    1d1a:	4b1d      	ldr	r3, [pc, #116]	; (1d90 <dir_next+0x128>)
    1d1c:	4798      	blx	r3
    1d1e:	6330      	str	r0, [r6, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1d20:	682b      	ldr	r3, [r5, #0]
    1d22:	789a      	ldrb	r2, [r3, #2]
    1d24:	4590      	cmp	r8, r2
    1d26:	d20c      	bcs.n	1d42 <dir_next+0xda>
						dp->fs->wflag = 1;
    1d28:	2201      	movs	r2, #1
    1d2a:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    1d2c:	6828      	ldr	r0, [r5, #0]
    1d2e:	4b16      	ldr	r3, [pc, #88]	; (1d88 <dir_next+0x120>)
    1d30:	4798      	blx	r3
    1d32:	bb08      	cbnz	r0, 1d78 <dir_next+0x110>
						dp->fs->winsect++;
    1d34:	682a      	ldr	r2, [r5, #0]
    1d36:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1d38:	3301      	adds	r3, #1
    1d3a:	6313      	str	r3, [r2, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1d3c:	f108 0801 	add.w	r8, r8, #1
    1d40:	e7ee      	b.n	1d20 <dir_next+0xb8>
					dp->fs->winsect -= c;						/* Rewind window offset */
    1d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1d44:	eba2 0208 	sub.w	r2, r2, r8
    1d48:	631a      	str	r2, [r3, #48]	; 0x30
				dp->clust = clst;				/* Initialize data for new cluster */
    1d4a:	f8c5 900c 	str.w	r9, [r5, #12]
				dp->sect = clust2sect(dp->fs, clst);
    1d4e:	4649      	mov	r1, r9
    1d50:	6828      	ldr	r0, [r5, #0]
    1d52:	4b0f      	ldr	r3, [pc, #60]	; (1d90 <dir_next+0x128>)
    1d54:	4798      	blx	r3
    1d56:	6128      	str	r0, [r5, #16]
    1d58:	e7aa      	b.n	1cb0 <dir_next+0x48>
				if (clst <= 1) return FR_INT_ERR;
    1d5a:	2002      	movs	r0, #2
    1d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1d60:	2001      	movs	r0, #1
    1d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if (clst == 1) return FR_INT_ERR;
    1d66:	2002      	movs	r0, #2
    1d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1d6c:	2001      	movs	r0, #1
    1d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    1d72:	2001      	movs	r0, #1
    1d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    1d78:	2001      	movs	r0, #1
}
    1d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1d7e:	bf00      	nop
    1d80:	000018e5 	.word	0x000018e5
    1d84:	00001ba5 	.word	0x00001ba5
    1d88:	00001319 	.word	0x00001319
    1d8c:	000010e1 	.word	0x000010e1
    1d90:	000018cd 	.word	0x000018cd

00001d94 <dir_find>:
{
    1d94:	b538      	push	{r3, r4, r5, lr}
    1d96:	4604      	mov	r4, r0
	res = dir_sdi(dp, 0);			/* Rewind directory object */
    1d98:	2100      	movs	r1, #0
    1d9a:	4b12      	ldr	r3, [pc, #72]	; (1de4 <dir_find+0x50>)
    1d9c:	4798      	blx	r3
	if (res != FR_OK) return res;
    1d9e:	4605      	mov	r5, r0
    1da0:	b140      	cbz	r0, 1db4 <dir_find+0x20>
}
    1da2:	4628      	mov	r0, r5
    1da4:	bd38      	pop	{r3, r4, r5, pc}
		res = dir_next(dp, 0);		/* Next entry */
    1da6:	2100      	movs	r1, #0
    1da8:	4620      	mov	r0, r4
    1daa:	4b0f      	ldr	r3, [pc, #60]	; (1de8 <dir_find+0x54>)
    1dac:	4798      	blx	r3
	} while (res == FR_OK);
    1dae:	4605      	mov	r5, r0
    1db0:	2800      	cmp	r0, #0
    1db2:	d1f6      	bne.n	1da2 <dir_find+0xe>
		res = move_window(dp->fs, dp->sect);
    1db4:	6921      	ldr	r1, [r4, #16]
    1db6:	6820      	ldr	r0, [r4, #0]
    1db8:	4b0c      	ldr	r3, [pc, #48]	; (1dec <dir_find+0x58>)
    1dba:	4798      	blx	r3
		if (res != FR_OK) break;
    1dbc:	4605      	mov	r5, r0
    1dbe:	2800      	cmp	r0, #0
    1dc0:	d1ef      	bne.n	1da2 <dir_find+0xe>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
    1dc2:	6960      	ldr	r0, [r4, #20]
		c = dir[DIR_Name];
    1dc4:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1dc6:	b153      	cbz	r3, 1dde <dir_find+0x4a>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
    1dc8:	7ac3      	ldrb	r3, [r0, #11]
    1dca:	f013 0f08 	tst.w	r3, #8
    1dce:	d1ea      	bne.n	1da6 <dir_find+0x12>
    1dd0:	220b      	movs	r2, #11
    1dd2:	69a1      	ldr	r1, [r4, #24]
    1dd4:	4b06      	ldr	r3, [pc, #24]	; (1df0 <dir_find+0x5c>)
    1dd6:	4798      	blx	r3
    1dd8:	2800      	cmp	r0, #0
    1dda:	d1e4      	bne.n	1da6 <dir_find+0x12>
    1ddc:	e7e1      	b.n	1da2 <dir_find+0xe>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1dde:	2504      	movs	r5, #4
    1de0:	e7df      	b.n	1da2 <dir_find+0xe>
    1de2:	bf00      	nop
    1de4:	000019d1 	.word	0x000019d1
    1de8:	00001c69 	.word	0x00001c69
    1dec:	00001379 	.word	0x00001379
    1df0:	000010f1 	.word	0x000010f1

00001df4 <follow_path>:
{
    1df4:	b530      	push	{r4, r5, lr}
    1df6:	b083      	sub	sp, #12
    1df8:	4604      	mov	r4, r0
    1dfa:	9101      	str	r1, [sp, #4]
	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
    1dfc:	780b      	ldrb	r3, [r1, #0]
    1dfe:	2b2f      	cmp	r3, #47	; 0x2f
    1e00:	d010      	beq.n	1e24 <follow_path+0x30>
    1e02:	2b5c      	cmp	r3, #92	; 0x5c
    1e04:	d00e      	beq.n	1e24 <follow_path+0x30>
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
    1e06:	6803      	ldr	r3, [r0, #0]
    1e08:	695b      	ldr	r3, [r3, #20]
    1e0a:	6083      	str	r3, [r0, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    1e0c:	9b01      	ldr	r3, [sp, #4]
    1e0e:	781b      	ldrb	r3, [r3, #0]
    1e10:	2b1f      	cmp	r3, #31
    1e12:	d81f      	bhi.n	1e54 <follow_path+0x60>
		res = dir_sdi(dp, 0);
    1e14:	2100      	movs	r1, #0
    1e16:	4620      	mov	r0, r4
    1e18:	4b1f      	ldr	r3, [pc, #124]	; (1e98 <follow_path+0xa4>)
    1e1a:	4798      	blx	r3
    1e1c:	4605      	mov	r5, r0
		dp->dir = 0;
    1e1e:	2300      	movs	r3, #0
    1e20:	6163      	str	r3, [r4, #20]
    1e22:	e02f      	b.n	1e84 <follow_path+0x90>
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
    1e24:	3101      	adds	r1, #1
    1e26:	9101      	str	r1, [sp, #4]
    1e28:	2300      	movs	r3, #0
    1e2a:	60a3      	str	r3, [r4, #8]
    1e2c:	e7ee      	b.n	1e0c <follow_path+0x18>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    1e2e:	f013 0f04 	tst.w	r3, #4
    1e32:	d101      	bne.n	1e38 <follow_path+0x44>
    1e34:	2505      	movs	r5, #5
    1e36:	e025      	b.n	1e84 <follow_path+0x90>
			res = dir_find(dp);				/* Find an object with the sagment name */
    1e38:	4605      	mov	r5, r0
    1e3a:	e023      	b.n	1e84 <follow_path+0x90>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    1e3c:	f013 0f04 	tst.w	r3, #4
    1e40:	d125      	bne.n	1e8e <follow_path+0x9a>
			dir = dp->dir;						/* Follow the sub-directory */
    1e42:	6961      	ldr	r1, [r4, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
    1e44:	7acb      	ldrb	r3, [r1, #11]
    1e46:	f013 0f10 	tst.w	r3, #16
    1e4a:	d022      	beq.n	1e92 <follow_path+0x9e>
			dp->sclust = ld_clust(dp->fs, dir);
    1e4c:	6820      	ldr	r0, [r4, #0]
    1e4e:	4b13      	ldr	r3, [pc, #76]	; (1e9c <follow_path+0xa8>)
    1e50:	4798      	blx	r3
    1e52:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
    1e54:	a901      	add	r1, sp, #4
    1e56:	4620      	mov	r0, r4
    1e58:	4b11      	ldr	r3, [pc, #68]	; (1ea0 <follow_path+0xac>)
    1e5a:	4798      	blx	r3
			if (res != FR_OK) break;
    1e5c:	4605      	mov	r5, r0
    1e5e:	b988      	cbnz	r0, 1e84 <follow_path+0x90>
			res = dir_find(dp);				/* Find an object with the sagment name */
    1e60:	4620      	mov	r0, r4
    1e62:	4b10      	ldr	r3, [pc, #64]	; (1ea4 <follow_path+0xb0>)
    1e64:	4798      	blx	r3
			ns = dp->fn[NSFLAG];
    1e66:	69a3      	ldr	r3, [r4, #24]
    1e68:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    1e6a:	2800      	cmp	r0, #0
    1e6c:	d0e6      	beq.n	1e3c <follow_path+0x48>
				if (res == FR_NO_FILE) {	/* Object is not found */
    1e6e:	2804      	cmp	r0, #4
    1e70:	d10b      	bne.n	1e8a <follow_path+0x96>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
    1e72:	f013 0f20 	tst.w	r3, #32
    1e76:	d0da      	beq.n	1e2e <follow_path+0x3a>
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
    1e78:	2200      	movs	r2, #0
    1e7a:	60a2      	str	r2, [r4, #8]
    1e7c:	6162      	str	r2, [r4, #20]
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
    1e7e:	f013 0f04 	tst.w	r3, #4
    1e82:	d0e7      	beq.n	1e54 <follow_path+0x60>
}
    1e84:	4628      	mov	r0, r5
    1e86:	b003      	add	sp, #12
    1e88:	bd30      	pop	{r4, r5, pc}
			res = dir_find(dp);				/* Find an object with the sagment name */
    1e8a:	4605      	mov	r5, r0
    1e8c:	e7fa      	b.n	1e84 <follow_path+0x90>
    1e8e:	4605      	mov	r5, r0
    1e90:	e7f8      	b.n	1e84 <follow_path+0x90>
				res = FR_NO_PATH; break;
    1e92:	2505      	movs	r5, #5
    1e94:	e7f6      	b.n	1e84 <follow_path+0x90>
    1e96:	bf00      	nop
    1e98:	000019d1 	.word	0x000019d1
    1e9c:	00001123 	.word	0x00001123
    1ea0:	00001155 	.word	0x00001155
    1ea4:	00001d95 	.word	0x00001d95

00001ea8 <dir_alloc>:
{
    1ea8:	b570      	push	{r4, r5, r6, lr}
    1eaa:	4604      	mov	r4, r0
    1eac:	460e      	mov	r6, r1
	res = dir_sdi(dp, 0);
    1eae:	2100      	movs	r1, #0
    1eb0:	4b11      	ldr	r3, [pc, #68]	; (1ef8 <dir_alloc+0x50>)
    1eb2:	4798      	blx	r3
	if (res == FR_OK) {
    1eb4:	4602      	mov	r2, r0
    1eb6:	b9c0      	cbnz	r0, 1eea <dir_alloc+0x42>
    1eb8:	2500      	movs	r5, #0
    1eba:	e008      	b.n	1ece <dir_alloc+0x26>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
    1ebc:	3501      	adds	r5, #1
    1ebe:	42b5      	cmp	r5, r6
    1ec0:	d013      	beq.n	1eea <dir_alloc+0x42>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
    1ec2:	2101      	movs	r1, #1
    1ec4:	4620      	mov	r0, r4
    1ec6:	4b0d      	ldr	r3, [pc, #52]	; (1efc <dir_alloc+0x54>)
    1ec8:	4798      	blx	r3
		} while (res == FR_OK);
    1eca:	4602      	mov	r2, r0
    1ecc:	b968      	cbnz	r0, 1eea <dir_alloc+0x42>
			res = move_window(dp->fs, dp->sect);
    1ece:	6921      	ldr	r1, [r4, #16]
    1ed0:	6820      	ldr	r0, [r4, #0]
    1ed2:	4b0b      	ldr	r3, [pc, #44]	; (1f00 <dir_alloc+0x58>)
    1ed4:	4798      	blx	r3
			if (res != FR_OK) break;
    1ed6:	4602      	mov	r2, r0
    1ed8:	b938      	cbnz	r0, 1eea <dir_alloc+0x42>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
    1eda:	6963      	ldr	r3, [r4, #20]
    1edc:	781b      	ldrb	r3, [r3, #0]
    1ede:	2be5      	cmp	r3, #229	; 0xe5
    1ee0:	d0ec      	beq.n	1ebc <dir_alloc+0x14>
    1ee2:	2b00      	cmp	r3, #0
    1ee4:	d0ea      	beq.n	1ebc <dir_alloc+0x14>
				n = 0;					/* Not a blank entry. Restart to search */
    1ee6:	2500      	movs	r5, #0
    1ee8:	e7eb      	b.n	1ec2 <dir_alloc+0x1a>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    1eea:	2a04      	cmp	r2, #4
    1eec:	d001      	beq.n	1ef2 <dir_alloc+0x4a>
}
    1eee:	4610      	mov	r0, r2
    1ef0:	bd70      	pop	{r4, r5, r6, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    1ef2:	2207      	movs	r2, #7
    1ef4:	e7fb      	b.n	1eee <dir_alloc+0x46>
    1ef6:	bf00      	nop
    1ef8:	000019d1 	.word	0x000019d1
    1efc:	00001c69 	.word	0x00001c69
    1f00:	00001379 	.word	0x00001379

00001f04 <dir_register>:
{
    1f04:	b538      	push	{r3, r4, r5, lr}
    1f06:	4605      	mov	r5, r0
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
    1f08:	2101      	movs	r1, #1
    1f0a:	4b0d      	ldr	r3, [pc, #52]	; (1f40 <dir_register+0x3c>)
    1f0c:	4798      	blx	r3
	if (res == FR_OK) {				/* Set SFN entry */
    1f0e:	4604      	mov	r4, r0
    1f10:	b108      	cbz	r0, 1f16 <dir_register+0x12>
}
    1f12:	4620      	mov	r0, r4
    1f14:	bd38      	pop	{r3, r4, r5, pc}
		res = move_window(dp->fs, dp->sect);
    1f16:	6929      	ldr	r1, [r5, #16]
    1f18:	6828      	ldr	r0, [r5, #0]
    1f1a:	4b0a      	ldr	r3, [pc, #40]	; (1f44 <dir_register+0x40>)
    1f1c:	4798      	blx	r3
		if (res == FR_OK) {
    1f1e:	4604      	mov	r4, r0
    1f20:	2800      	cmp	r0, #0
    1f22:	d1f6      	bne.n	1f12 <dir_register+0xe>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
    1f24:	2220      	movs	r2, #32
    1f26:	2100      	movs	r1, #0
    1f28:	6968      	ldr	r0, [r5, #20]
    1f2a:	4b07      	ldr	r3, [pc, #28]	; (1f48 <dir_register+0x44>)
    1f2c:	4798      	blx	r3
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
    1f2e:	220b      	movs	r2, #11
    1f30:	69a9      	ldr	r1, [r5, #24]
    1f32:	6968      	ldr	r0, [r5, #20]
    1f34:	4b05      	ldr	r3, [pc, #20]	; (1f4c <dir_register+0x48>)
    1f36:	4798      	blx	r3
			dp->fs->wflag = 1;
    1f38:	682b      	ldr	r3, [r5, #0]
    1f3a:	2201      	movs	r2, #1
    1f3c:	711a      	strb	r2, [r3, #4]
    1f3e:	e7e8      	b.n	1f12 <dir_register+0xe>
    1f40:	00001ea9 	.word	0x00001ea9
    1f44:	00001379 	.word	0x00001379
    1f48:	000010e1 	.word	0x000010e1
    1f4c:	000010cd 	.word	0x000010cd

00001f50 <remove_chain>:
{
    1f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    1f52:	2901      	cmp	r1, #1
    1f54:	d929      	bls.n	1faa <remove_chain+0x5a>
    1f56:	4604      	mov	r4, r0
    1f58:	460d      	mov	r5, r1
    1f5a:	6983      	ldr	r3, [r0, #24]
    1f5c:	4299      	cmp	r1, r3
    1f5e:	d301      	bcc.n	1f64 <remove_chain+0x14>
		res = FR_INT_ERR;
    1f60:	2702      	movs	r7, #2
    1f62:	e023      	b.n	1fac <remove_chain+0x5c>
    1f64:	2700      	movs	r7, #0
    1f66:	e000      	b.n	1f6a <remove_chain+0x1a>
    1f68:	4635      	mov	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    1f6a:	69a3      	ldr	r3, [r4, #24]
    1f6c:	429d      	cmp	r5, r3
    1f6e:	d21d      	bcs.n	1fac <remove_chain+0x5c>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1f70:	4629      	mov	r1, r5
    1f72:	4620      	mov	r0, r4
    1f74:	4b10      	ldr	r3, [pc, #64]	; (1fb8 <remove_chain+0x68>)
    1f76:	4798      	blx	r3
			if (nxt == 0) break;				/* Empty cluster? */
    1f78:	4606      	mov	r6, r0
    1f7a:	b1b8      	cbz	r0, 1fac <remove_chain+0x5c>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1f7c:	2801      	cmp	r0, #1
    1f7e:	d017      	beq.n	1fb0 <remove_chain+0x60>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1f80:	f1b0 3fff 	cmp.w	r0, #4294967295
    1f84:	d016      	beq.n	1fb4 <remove_chain+0x64>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1f86:	2200      	movs	r2, #0
    1f88:	4629      	mov	r1, r5
    1f8a:	4620      	mov	r0, r4
    1f8c:	4b0b      	ldr	r3, [pc, #44]	; (1fbc <remove_chain+0x6c>)
    1f8e:	4798      	blx	r3
			if (res != FR_OK) break;
    1f90:	4607      	mov	r7, r0
    1f92:	b958      	cbnz	r0, 1fac <remove_chain+0x5c>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
    1f94:	6923      	ldr	r3, [r4, #16]
    1f96:	f1b3 3fff 	cmp.w	r3, #4294967295
    1f9a:	d0e5      	beq.n	1f68 <remove_chain+0x18>
				fs->free_clust++;
    1f9c:	3301      	adds	r3, #1
    1f9e:	6123      	str	r3, [r4, #16]
				fs->fsi_flag |= 1;
    1fa0:	7963      	ldrb	r3, [r4, #5]
    1fa2:	f043 0301 	orr.w	r3, r3, #1
    1fa6:	7163      	strb	r3, [r4, #5]
    1fa8:	e7de      	b.n	1f68 <remove_chain+0x18>
		res = FR_INT_ERR;
    1faa:	2702      	movs	r7, #2
}
    1fac:	4638      	mov	r0, r7
    1fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1fb0:	2702      	movs	r7, #2
    1fb2:	e7fb      	b.n	1fac <remove_chain+0x5c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1fb4:	2701      	movs	r7, #1
    1fb6:	e7f9      	b.n	1fac <remove_chain+0x5c>
    1fb8:	000018e5 	.word	0x000018e5
    1fbc:	00001a71 	.word	0x00001a71

00001fc0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    1fc0:	b510      	push	{r4, lr}
    1fc2:	b084      	sub	sp, #16
    1fc4:	9001      	str	r0, [sp, #4]
    1fc6:	9100      	str	r1, [sp, #0]
    1fc8:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    1fca:	a804      	add	r0, sp, #16
    1fcc:	f840 1d04 	str.w	r1, [r0, #-4]!

	vol = get_ldnumber(&rp);
    1fd0:	4b11      	ldr	r3, [pc, #68]	; (2018 <f_mount+0x58>)
    1fd2:	4798      	blx	r3
	if (vol < 0) return FR_INVALID_DRIVE;
    1fd4:	2800      	cmp	r0, #0
    1fd6:	db1a      	blt.n	200e <f_mount+0x4e>
	cfs = FatFs[vol];					/* Pointer to fs object */
    1fd8:	4b10      	ldr	r3, [pc, #64]	; (201c <f_mount+0x5c>)
    1fda:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1fde:	685b      	ldr	r3, [r3, #4]

	if (cfs) {
    1fe0:	b10b      	cbz	r3, 1fe6 <f_mount+0x26>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    1fe2:	2200      	movs	r2, #0
    1fe4:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
    1fe6:	9b01      	ldr	r3, [sp, #4]
    1fe8:	b10b      	cbz	r3, 1fee <f_mount+0x2e>
		fs->fs_type = 0;				/* Clear new fs object */
    1fea:	2200      	movs	r2, #0
    1fec:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    1fee:	9a01      	ldr	r2, [sp, #4]
    1ff0:	4b0a      	ldr	r3, [pc, #40]	; (201c <f_mount+0x5c>)
    1ff2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1ff6:	6042      	str	r2, [r0, #4]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    1ff8:	b162      	cbz	r2, 2014 <f_mount+0x54>
    1ffa:	2c01      	cmp	r4, #1
    1ffc:	d001      	beq.n	2002 <f_mount+0x42>
    1ffe:	2000      	movs	r0, #0
    2000:	e006      	b.n	2010 <f_mount+0x50>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
    2002:	2200      	movs	r2, #0
    2004:	4669      	mov	r1, sp
    2006:	a801      	add	r0, sp, #4
    2008:	4b05      	ldr	r3, [pc, #20]	; (2020 <f_mount+0x60>)
    200a:	4798      	blx	r3
	LEAVE_FF(fs, res);
    200c:	e000      	b.n	2010 <f_mount+0x50>
	if (vol < 0) return FR_INVALID_DRIVE;
    200e:	200b      	movs	r0, #11
}
    2010:	b004      	add	sp, #16
    2012:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    2014:	2000      	movs	r0, #0
    2016:	e7fb      	b.n	2010 <f_mount+0x50>
    2018:	000012bd 	.word	0x000012bd
    201c:	200000d0 	.word	0x200000d0
    2020:	00001489 	.word	0x00001489

00002024 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2028:	b08d      	sub	sp, #52	; 0x34
    202a:	9101      	str	r1, [sp, #4]
	DEFINE_NAMEBUF;
#if !_FS_READONLY
	DWORD dw, cl;
#endif

	if (!fp) return FR_INVALID_OBJECT;
    202c:	2800      	cmp	r0, #0
    202e:	f000 80ab 	beq.w	2188 <f_open+0x164>
    2032:	4604      	mov	r4, r0
    2034:	4615      	mov	r5, r2
	fp->fs = 0;			/* Clear file object */
    2036:	2300      	movs	r3, #0
    2038:	6003      	str	r3, [r0, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    203a:	f002 081f 	and.w	r8, r2, #31
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
    203e:	f002 021e 	and.w	r2, r2, #30
    2042:	a901      	add	r1, sp, #4
    2044:	a805      	add	r0, sp, #20
    2046:	4b53      	ldr	r3, [pc, #332]	; (2194 <f_open+0x170>)
    2048:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
    204a:	4606      	mov	r6, r0
    204c:	2800      	cmp	r0, #0
    204e:	f040 809c 	bne.w	218a <f_open+0x166>
		INIT_BUF(dj);
    2052:	ab02      	add	r3, sp, #8
    2054:	930b      	str	r3, [sp, #44]	; 0x2c
		res = follow_path(&dj, path);	/* Follow the file path */
    2056:	9901      	ldr	r1, [sp, #4]
    2058:	a805      	add	r0, sp, #20
    205a:	4b4f      	ldr	r3, [pc, #316]	; (2198 <f_open+0x174>)
    205c:	4798      	blx	r3
		dir = dj.dir;
    205e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    2060:	4606      	mov	r6, r0
    2062:	b908      	cbnz	r0, 2068 <f_open+0x44>
			if (!dir)	/* Default directory itself */
    2064:	2f00      	cmp	r7, #0
    2066:	d038      	beq.n	20da <f_open+0xb6>
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    2068:	f015 0f1c 	tst.w	r5, #28
    206c:	d07c      	beq.n	2168 <f_open+0x144>
			if (res != FR_OK) {					/* No file, create new */
    206e:	2e00      	cmp	r6, #0
    2070:	d03a      	beq.n	20e8 <f_open+0xc4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    2072:	2e04      	cmp	r6, #4
    2074:	d033      	beq.n	20de <f_open+0xba>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    2076:	f048 0808 	orr.w	r8, r8, #8
				dir = dj.dir;					/* New entry */
    207a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    207c:	b916      	cbnz	r6, 2084 <f_open+0x60>
    207e:	f018 0f08 	tst.w	r8, #8
    2082:	d13c      	bne.n	20fe <f_open+0xda>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    2084:	b946      	cbnz	r6, 2098 <f_open+0x74>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
    2086:	f018 0f08 	tst.w	r8, #8
    208a:	d001      	beq.n	2090 <f_open+0x6c>
				mode |= FA__WRITTEN;
    208c:	f048 0820 	orr.w	r8, r8, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    2090:	9b05      	ldr	r3, [sp, #20]
    2092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2094:	61e3      	str	r3, [r4, #28]
			fp->dir_ptr = dir;
    2096:	6227      	str	r7, [r4, #32]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
    2098:	2e00      	cmp	r6, #0
    209a:	d176      	bne.n	218a <f_open+0x166>
			fp->flag = mode;					/* File access mode */
    209c:	f884 8006 	strb.w	r8, [r4, #6]
			fp->err = 0;						/* Clear error flag */
    20a0:	f04f 0800 	mov.w	r8, #0
    20a4:	f884 8007 	strb.w	r8, [r4, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    20a8:	9d05      	ldr	r5, [sp, #20]
    20aa:	4639      	mov	r1, r7
    20ac:	4628      	mov	r0, r5
    20ae:	4b3b      	ldr	r3, [pc, #236]	; (219c <f_open+0x178>)
    20b0:	4798      	blx	r3
    20b2:	6120      	str	r0, [r4, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
    20b4:	7ffa      	ldrb	r2, [r7, #31]
    20b6:	7fbb      	ldrb	r3, [r7, #30]
    20b8:	041b      	lsls	r3, r3, #16
    20ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    20be:	7f7a      	ldrb	r2, [r7, #29]
    20c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    20c4:	7f3a      	ldrb	r2, [r7, #28]
    20c6:	4313      	orrs	r3, r2
    20c8:	60e3      	str	r3, [r4, #12]
			fp->fptr = 0;						/* File pointer */
    20ca:	f8c4 8008 	str.w	r8, [r4, #8]
			fp->dsect = 0;
    20ce:	f8c4 8018 	str.w	r8, [r4, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
    20d2:	6025      	str	r5, [r4, #0]
			fp->id = fp->fs->id;
    20d4:	88eb      	ldrh	r3, [r5, #6]
    20d6:	80a3      	strh	r3, [r4, #4]
    20d8:	e057      	b.n	218a <f_open+0x166>
				res = FR_INVALID_NAME;
    20da:	2606      	movs	r6, #6
    20dc:	e7c4      	b.n	2068 <f_open+0x44>
					res = dir_register(&dj);
    20de:	a805      	add	r0, sp, #20
    20e0:	4b2f      	ldr	r3, [pc, #188]	; (21a0 <f_open+0x17c>)
    20e2:	4798      	blx	r3
    20e4:	4606      	mov	r6, r0
    20e6:	e7c6      	b.n	2076 <f_open+0x52>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    20e8:	7afb      	ldrb	r3, [r7, #11]
    20ea:	f013 0f11 	tst.w	r3, #17
    20ee:	d104      	bne.n	20fa <f_open+0xd6>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    20f0:	f015 0f04 	tst.w	r5, #4
    20f4:	d0c2      	beq.n	207c <f_open+0x58>
						res = FR_EXIST;
    20f6:	2608      	movs	r6, #8
    20f8:	e7c0      	b.n	207c <f_open+0x58>
					res = FR_DENIED;
    20fa:	2607      	movs	r6, #7
    20fc:	e7be      	b.n	207c <f_open+0x58>
				dw = GET_FATTIME();
    20fe:	4b29      	ldr	r3, [pc, #164]	; (21a4 <f_open+0x180>)
    2100:	4798      	blx	r3
				ST_DWORD(dir + DIR_CrtTime, dw);/* Set created time */
    2102:	b2c1      	uxtb	r1, r0
    2104:	73b9      	strb	r1, [r7, #14]
    2106:	f3c0 2207 	ubfx	r2, r0, #8, #8
    210a:	73fa      	strb	r2, [r7, #15]
    210c:	f3c0 4307 	ubfx	r3, r0, #16, #8
    2110:	743b      	strb	r3, [r7, #16]
    2112:	0e00      	lsrs	r0, r0, #24
    2114:	7478      	strb	r0, [r7, #17]
				ST_DWORD(dir + DIR_WrtTime, dw);/* Set modified time */
    2116:	75b9      	strb	r1, [r7, #22]
    2118:	75fa      	strb	r2, [r7, #23]
    211a:	763b      	strb	r3, [r7, #24]
    211c:	7678      	strb	r0, [r7, #25]
				dir[DIR_Attr] = 0;				/* Reset attribute */
    211e:	2500      	movs	r5, #0
    2120:	72fd      	strb	r5, [r7, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* Reset file size */
    2122:	773d      	strb	r5, [r7, #28]
    2124:	777d      	strb	r5, [r7, #29]
    2126:	77bd      	strb	r5, [r7, #30]
    2128:	77fd      	strb	r5, [r7, #31]
				cl = ld_clust(dj.fs, dir);		/* Get cluster chain */
    212a:	4639      	mov	r1, r7
    212c:	9805      	ldr	r0, [sp, #20]
    212e:	4b1b      	ldr	r3, [pc, #108]	; (219c <f_open+0x178>)
    2130:	4798      	blx	r3
    2132:	4681      	mov	r9, r0
				st_clust(dir, 0);				/* Reset cluster */
    2134:	4629      	mov	r1, r5
    2136:	4638      	mov	r0, r7
    2138:	4b1b      	ldr	r3, [pc, #108]	; (21a8 <f_open+0x184>)
    213a:	4798      	blx	r3
				dj.fs->wflag = 1;
    213c:	9805      	ldr	r0, [sp, #20]
    213e:	2301      	movs	r3, #1
    2140:	7103      	strb	r3, [r0, #4]
				if (cl) {						/* Remove the cluster chain if exist */
    2142:	f1b9 0f00 	cmp.w	r9, #0
    2146:	d09d      	beq.n	2084 <f_open+0x60>
					dw = dj.fs->winsect;
    2148:	6b05      	ldr	r5, [r0, #48]	; 0x30
					res = remove_chain(dj.fs, cl);
    214a:	4649      	mov	r1, r9
    214c:	4b17      	ldr	r3, [pc, #92]	; (21ac <f_open+0x188>)
    214e:	4798      	blx	r3
					if (res == FR_OK) {
    2150:	4606      	mov	r6, r0
    2152:	2800      	cmp	r0, #0
    2154:	d196      	bne.n	2084 <f_open+0x60>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2156:	9805      	ldr	r0, [sp, #20]
    2158:	f109 33ff 	add.w	r3, r9, #4294967295
    215c:	60c3      	str	r3, [r0, #12]
						res = move_window(dj.fs, dw);
    215e:	4629      	mov	r1, r5
    2160:	4b13      	ldr	r3, [pc, #76]	; (21b0 <f_open+0x18c>)
    2162:	4798      	blx	r3
    2164:	4606      	mov	r6, r0
    2166:	e78d      	b.n	2084 <f_open+0x60>
			if (res == FR_OK) {					/* Following succeeded */
    2168:	2e00      	cmp	r6, #0
    216a:	d18b      	bne.n	2084 <f_open+0x60>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
    216c:	7afb      	ldrb	r3, [r7, #11]
    216e:	f013 0f10 	tst.w	r3, #16
    2172:	d107      	bne.n	2184 <f_open+0x160>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2174:	f015 0f02 	tst.w	r5, #2
    2178:	d084      	beq.n	2084 <f_open+0x60>
    217a:	f013 0f01 	tst.w	r3, #1
    217e:	d081      	beq.n	2084 <f_open+0x60>
						res = FR_DENIED;
    2180:	2607      	movs	r6, #7
    2182:	e77f      	b.n	2084 <f_open+0x60>
					res = FR_NO_FILE;
    2184:	2604      	movs	r6, #4
    2186:	e77d      	b.n	2084 <f_open+0x60>
	if (!fp) return FR_INVALID_OBJECT;
    2188:	2609      	movs	r6, #9
		}
	}

	LEAVE_FF(dj.fs, res);
}
    218a:	4630      	mov	r0, r6
    218c:	b00d      	add	sp, #52	; 0x34
    218e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2192:	bf00      	nop
    2194:	00001489 	.word	0x00001489
    2198:	00001df5 	.word	0x00001df5
    219c:	00001123 	.word	0x00001123
    21a0:	00001f05 	.word	0x00001f05
    21a4:	00002459 	.word	0x00002459
    21a8:	00001143 	.word	0x00001143
    21ac:	00001f51 	.word	0x00001f51
    21b0:	00001379 	.word	0x00001379

000021b4 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
    21b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21b8:	b083      	sub	sp, #12
    21ba:	4604      	mov	r4, r0
    21bc:	4688      	mov	r8, r1
    21be:	4616      	mov	r6, r2
    21c0:	4699      	mov	r9, r3
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;

	*br = 0;	/* Clear read byte counter */
    21c2:	2300      	movs	r3, #0
    21c4:	f8c9 3000 	str.w	r3, [r9]

	res = validate(fp);							/* Check validity */
    21c8:	4b63      	ldr	r3, [pc, #396]	; (2358 <f_read+0x1a4>)
    21ca:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    21cc:	9001      	str	r0, [sp, #4]
    21ce:	b948      	cbnz	r0, 21e4 <f_read+0x30>
	if (fp->err)								/* Check error */
    21d0:	79e3      	ldrb	r3, [r4, #7]
    21d2:	2b00      	cmp	r3, #0
    21d4:	f040 80be 	bne.w	2354 <f_read+0x1a0>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    21d8:	79a3      	ldrb	r3, [r4, #6]
    21da:	f013 0f01 	tst.w	r3, #1
    21de:	d105      	bne.n	21ec <f_read+0x38>
		LEAVE_FF(fp->fs, FR_DENIED);
    21e0:	2307      	movs	r3, #7
    21e2:	9301      	str	r3, [sp, #4]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    21e4:	9801      	ldr	r0, [sp, #4]
    21e6:	b003      	add	sp, #12
    21e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	remain = fp->fsize - fp->fptr;
    21ec:	68e3      	ldr	r3, [r4, #12]
    21ee:	68a2      	ldr	r2, [r4, #8]
    21f0:	1a9b      	subs	r3, r3, r2
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    21f2:	42b3      	cmp	r3, r6
    21f4:	d263      	bcs.n	22be <f_read+0x10a>
    21f6:	461e      	mov	r6, r3
    21f8:	e061      	b.n	22be <f_read+0x10a>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    21fa:	6961      	ldr	r1, [r4, #20]
    21fc:	4b57      	ldr	r3, [pc, #348]	; (235c <f_read+0x1a8>)
    21fe:	4798      	blx	r3
    2200:	e06e      	b.n	22e0 <f_read+0x12c>
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    2202:	f04f 0a02 	mov.w	sl, #2
    2206:	f884 a007 	strb.w	sl, [r4, #7]
    220a:	f8cd a004 	str.w	sl, [sp, #4]
    220e:	e7e9      	b.n	21e4 <f_read+0x30>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2210:	f04f 0a01 	mov.w	sl, #1
    2214:	f884 a007 	strb.w	sl, [r4, #7]
    2218:	f8cd a004 	str.w	sl, [sp, #4]
    221c:	e7e2      	b.n	21e4 <f_read+0x30>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    221e:	f04f 0a02 	mov.w	sl, #2
    2222:	f884 a007 	strb.w	sl, [r4, #7]
    2226:	f8cd a004 	str.w	sl, [sp, #4]
    222a:	e7db      	b.n	21e4 <f_read+0x30>
					ABORT(fp->fs, FR_DISK_ERR);
    222c:	f04f 0a01 	mov.w	sl, #1
    2230:	f884 a007 	strb.w	sl, [r4, #7]
    2234:	f8cd a004 	str.w	sl, [sp, #4]
    2238:	e7d4      	b.n	21e4 <f_read+0x30>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
    223a:	f44f 7200 	mov.w	r2, #512	; 0x200
    223e:	f104 0124 	add.w	r1, r4, #36	; 0x24
    2242:	eb08 2040 	add.w	r0, r8, r0, lsl #9
    2246:	4b46      	ldr	r3, [pc, #280]	; (2360 <f_read+0x1ac>)
    2248:	4798      	blx	r3
    224a:	e073      	b.n	2334 <f_read+0x180>
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
    224c:	69a2      	ldr	r2, [r4, #24]
    224e:	4592      	cmp	sl, r2
    2250:	d01a      	beq.n	2288 <f_read+0xd4>
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
    2252:	79a3      	ldrb	r3, [r4, #6]
    2254:	f013 0f40 	tst.w	r3, #64	; 0x40
    2258:	d00c      	beq.n	2274 <f_read+0xc0>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    225a:	2301      	movs	r3, #1
    225c:	f104 0124 	add.w	r1, r4, #36	; 0x24
    2260:	f89b 0001 	ldrb.w	r0, [fp, #1]
    2264:	4d3f      	ldr	r5, [pc, #252]	; (2364 <f_read+0x1b0>)
    2266:	47a8      	blx	r5
    2268:	2800      	cmp	r0, #0
    226a:	d165      	bne.n	2338 <f_read+0x184>
					fp->flag &= ~FA__DIRTY;
    226c:	79a3      	ldrb	r3, [r4, #6]
    226e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    2272:	71a3      	strb	r3, [r4, #6]
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
    2274:	4621      	mov	r1, r4
    2276:	f851 0b24 	ldr.w	r0, [r1], #36
    227a:	2301      	movs	r3, #1
    227c:	4652      	mov	r2, sl
    227e:	7840      	ldrb	r0, [r0, #1]
    2280:	4d39      	ldr	r5, [pc, #228]	; (2368 <f_read+0x1b4>)
    2282:	47a8      	blx	r5
    2284:	2800      	cmp	r0, #0
    2286:	d15e      	bne.n	2346 <f_read+0x192>
			fp->dsect = sect;
    2288:	f8c4 a018 	str.w	sl, [r4, #24]
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    228c:	68a1      	ldr	r1, [r4, #8]
    228e:	f3c1 0108 	ubfx	r1, r1, #0, #9
    2292:	f5c1 7500 	rsb	r5, r1, #512	; 0x200
		if (rcnt > btr) rcnt = btr;
    2296:	42ae      	cmp	r6, r5
    2298:	d200      	bcs.n	229c <f_read+0xe8>
    229a:	4635      	mov	r5, r6
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    229c:	3120      	adds	r1, #32
    229e:	4421      	add	r1, r4
    22a0:	462a      	mov	r2, r5
    22a2:	3104      	adds	r1, #4
    22a4:	4640      	mov	r0, r8
    22a6:	4b2e      	ldr	r3, [pc, #184]	; (2360 <f_read+0x1ac>)
    22a8:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    22aa:	44a8      	add	r8, r5
    22ac:	68a3      	ldr	r3, [r4, #8]
    22ae:	442b      	add	r3, r5
    22b0:	60a3      	str	r3, [r4, #8]
    22b2:	f8d9 3000 	ldr.w	r3, [r9]
    22b6:	442b      	add	r3, r5
    22b8:	f8c9 3000 	str.w	r3, [r9]
    22bc:	1b76      	subs	r6, r6, r5
	for ( ;  btr;								/* Repeat until all data read */
    22be:	2e00      	cmp	r6, #0
    22c0:	d090      	beq.n	21e4 <f_read+0x30>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    22c2:	68a3      	ldr	r3, [r4, #8]
    22c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
    22c8:	2a00      	cmp	r2, #0
    22ca:	d1df      	bne.n	228c <f_read+0xd8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    22cc:	6820      	ldr	r0, [r4, #0]
    22ce:	7887      	ldrb	r7, [r0, #2]
    22d0:	3f01      	subs	r7, #1
    22d2:	b2ff      	uxtb	r7, r7
			if (!csect) {						/* On the cluster boundary? */
    22d4:	ea17 2753 	ands.w	r7, r7, r3, lsr #9
    22d8:	d108      	bne.n	22ec <f_read+0x138>
				if (fp->fptr == 0) {			/* On the top of the file? */
    22da:	2b00      	cmp	r3, #0
    22dc:	d18d      	bne.n	21fa <f_read+0x46>
					clst = fp->sclust;			/* Follow from the origin */
    22de:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    22e0:	2801      	cmp	r0, #1
    22e2:	d98e      	bls.n	2202 <f_read+0x4e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    22e4:	f1b0 3fff 	cmp.w	r0, #4294967295
    22e8:	d092      	beq.n	2210 <f_read+0x5c>
				fp->clust = clst;				/* Update current cluster */
    22ea:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    22ec:	f8d4 b000 	ldr.w	fp, [r4]
    22f0:	6961      	ldr	r1, [r4, #20]
    22f2:	4658      	mov	r0, fp
    22f4:	4b1d      	ldr	r3, [pc, #116]	; (236c <f_read+0x1b8>)
    22f6:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    22f8:	4682      	mov	sl, r0
    22fa:	2800      	cmp	r0, #0
    22fc:	d08f      	beq.n	221e <f_read+0x6a>
			sect += csect;
    22fe:	44ba      	add	sl, r7
			if (cc) {							/* Read maximum contiguous sectors directly */
    2300:	0a75      	lsrs	r5, r6, #9
    2302:	d0a3      	beq.n	224c <f_read+0x98>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    2304:	197b      	adds	r3, r7, r5
    2306:	f89b 2002 	ldrb.w	r2, [fp, #2]
    230a:	4293      	cmp	r3, r2
    230c:	d900      	bls.n	2310 <f_read+0x15c>
					cc = fp->fs->csize - csect;
    230e:	1bd5      	subs	r5, r2, r7
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
    2310:	b2eb      	uxtb	r3, r5
    2312:	4652      	mov	r2, sl
    2314:	4641      	mov	r1, r8
    2316:	f89b 0001 	ldrb.w	r0, [fp, #1]
    231a:	4f13      	ldr	r7, [pc, #76]	; (2368 <f_read+0x1b4>)
    231c:	47b8      	blx	r7
    231e:	2800      	cmp	r0, #0
    2320:	d184      	bne.n	222c <f_read+0x78>
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
    2322:	79a3      	ldrb	r3, [r4, #6]
    2324:	f013 0f40 	tst.w	r3, #64	; 0x40
    2328:	d004      	beq.n	2334 <f_read+0x180>
    232a:	69a0      	ldr	r0, [r4, #24]
    232c:	eba0 000a 	sub.w	r0, r0, sl
    2330:	4285      	cmp	r5, r0
    2332:	d882      	bhi.n	223a <f_read+0x86>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    2334:	026d      	lsls	r5, r5, #9
				continue;
    2336:	e7b8      	b.n	22aa <f_read+0xf6>
						ABORT(fp->fs, FR_DISK_ERR);
    2338:	f04f 0a01 	mov.w	sl, #1
    233c:	f884 a007 	strb.w	sl, [r4, #7]
    2340:	f8cd a004 	str.w	sl, [sp, #4]
    2344:	e74e      	b.n	21e4 <f_read+0x30>
					ABORT(fp->fs, FR_DISK_ERR);
    2346:	f04f 0a01 	mov.w	sl, #1
    234a:	f884 a007 	strb.w	sl, [r4, #7]
    234e:	f8cd a004 	str.w	sl, [sp, #4]
    2352:	e747      	b.n	21e4 <f_read+0x30>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
    2354:	9301      	str	r3, [sp, #4]
    2356:	e745      	b.n	21e4 <f_read+0x30>
    2358:	0000144d 	.word	0x0000144d
    235c:	000018e5 	.word	0x000018e5
    2360:	000010cd 	.word	0x000010cd
    2364:	00000b71 	.word	0x00000b71
    2368:	00000b21 	.word	0x00000b21
    236c:	000018cd 	.word	0x000018cd

00002370 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    2370:	b538      	push	{r3, r4, r5, lr}
    2372:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;

	res = validate(fp);					/* Check validity of the object */
    2374:	4b27      	ldr	r3, [pc, #156]	; (2414 <f_sync+0xa4>)
    2376:	4798      	blx	r3
	if (res == FR_OK) {
    2378:	4603      	mov	r3, r0
    237a:	b9d0      	cbnz	r0, 23b2 <f_sync+0x42>
		if (fp->flag & FA__WRITTEN) {	/* Is there any change to the file? */
    237c:	79a2      	ldrb	r2, [r4, #6]
    237e:	f012 0f20 	tst.w	r2, #32
    2382:	d016      	beq.n	23b2 <f_sync+0x42>
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {	/* Write-back cached data if needed */
    2384:	f012 0f40 	tst.w	r2, #64	; 0x40
    2388:	d00d      	beq.n	23a6 <f_sync+0x36>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    238a:	4621      	mov	r1, r4
    238c:	f851 0b24 	ldr.w	r0, [r1], #36
    2390:	2301      	movs	r3, #1
    2392:	69a2      	ldr	r2, [r4, #24]
    2394:	7840      	ldrb	r0, [r0, #1]
    2396:	4d20      	ldr	r5, [pc, #128]	; (2418 <f_sync+0xa8>)
    2398:	47a8      	blx	r5
    239a:	2800      	cmp	r0, #0
    239c:	d137      	bne.n	240e <f_sync+0x9e>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    239e:	79a3      	ldrb	r3, [r4, #6]
    23a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    23a4:	71a3      	strb	r3, [r4, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    23a6:	69e1      	ldr	r1, [r4, #28]
    23a8:	6820      	ldr	r0, [r4, #0]
    23aa:	4b1c      	ldr	r3, [pc, #112]	; (241c <f_sync+0xac>)
    23ac:	4798      	blx	r3
			if (res == FR_OK) {
    23ae:	4603      	mov	r3, r0
    23b0:	b108      	cbz	r0, 23b6 <f_sync+0x46>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    23b2:	4618      	mov	r0, r3
    23b4:	bd38      	pop	{r3, r4, r5, pc}
				dir = fp->dir_ptr;
    23b6:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    23b8:	7aeb      	ldrb	r3, [r5, #11]
    23ba:	f043 0320 	orr.w	r3, r3, #32
    23be:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
    23c0:	7b23      	ldrb	r3, [r4, #12]
    23c2:	772b      	strb	r3, [r5, #28]
    23c4:	89a3      	ldrh	r3, [r4, #12]
    23c6:	0a1b      	lsrs	r3, r3, #8
    23c8:	776b      	strb	r3, [r5, #29]
    23ca:	7ba3      	ldrb	r3, [r4, #14]
    23cc:	77ab      	strb	r3, [r5, #30]
    23ce:	7be3      	ldrb	r3, [r4, #15]
    23d0:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
    23d2:	6921      	ldr	r1, [r4, #16]
    23d4:	4628      	mov	r0, r5
    23d6:	4b12      	ldr	r3, [pc, #72]	; (2420 <f_sync+0xb0>)
    23d8:	4798      	blx	r3
				tm = GET_FATTIME();							/* Update modified time */
    23da:	4b12      	ldr	r3, [pc, #72]	; (2424 <f_sync+0xb4>)
    23dc:	4798      	blx	r3
				ST_DWORD(dir + DIR_WrtTime, tm);
    23de:	75a8      	strb	r0, [r5, #22]
    23e0:	f3c0 2307 	ubfx	r3, r0, #8, #8
    23e4:	75eb      	strb	r3, [r5, #23]
    23e6:	f3c0 4307 	ubfx	r3, r0, #16, #8
    23ea:	762b      	strb	r3, [r5, #24]
    23ec:	0e00      	lsrs	r0, r0, #24
    23ee:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
    23f0:	2300      	movs	r3, #0
    23f2:	74ab      	strb	r3, [r5, #18]
    23f4:	74eb      	strb	r3, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
    23f6:	79a3      	ldrb	r3, [r4, #6]
    23f8:	f023 0320 	bic.w	r3, r3, #32
    23fc:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    23fe:	6823      	ldr	r3, [r4, #0]
    2400:	2201      	movs	r2, #1
    2402:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
    2404:	6820      	ldr	r0, [r4, #0]
    2406:	4b08      	ldr	r3, [pc, #32]	; (2428 <f_sync+0xb8>)
    2408:	4798      	blx	r3
    240a:	4603      	mov	r3, r0
    240c:	e7d1      	b.n	23b2 <f_sync+0x42>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
    240e:	2301      	movs	r3, #1
    2410:	e7cf      	b.n	23b2 <f_sync+0x42>
    2412:	bf00      	nop
    2414:	0000144d 	.word	0x0000144d
    2418:	00000b71 	.word	0x00000b71
    241c:	00001379 	.word	0x00001379
    2420:	00001143 	.word	0x00001143
    2424:	00002459 	.word	0x00002459
    2428:	00001801 	.word	0x00001801

0000242c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    242c:	b510      	push	{r4, lr}
    242e:	4604      	mov	r4, r0
	FRESULT res;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    2430:	4b07      	ldr	r3, [pc, #28]	; (2450 <f_close+0x24>)
    2432:	4798      	blx	r3
	if (res == FR_OK)
    2434:	4603      	mov	r3, r0
    2436:	b108      	cbz	r0, 243c <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    2438:	4618      	mov	r0, r3
    243a:	bd10      	pop	{r4, pc}
		res = validate(fp);				/* Lock volume */
    243c:	4620      	mov	r0, r4
    243e:	4b05      	ldr	r3, [pc, #20]	; (2454 <f_close+0x28>)
    2440:	4798      	blx	r3
		if (res == FR_OK) {
    2442:	4603      	mov	r3, r0
    2444:	2800      	cmp	r0, #0
    2446:	d1f7      	bne.n	2438 <f_close+0xc>
				fp->fs = 0;				/* Invalidate file object */
    2448:	2200      	movs	r2, #0
    244a:	6022      	str	r2, [r4, #0]
    244c:	e7f4      	b.n	2438 <f_close+0xc>
    244e:	bf00      	nop
    2450:	00002371 	.word	0x00002371
    2454:	0000144d 	.word	0x0000144d

00002458 <get_fattime>:
 * bit4:0    Second (0..59)
 *
 * \return Current time.
 */
DWORD get_fattime(void)
{
    2458:	b500      	push	{lr}
    245a:	b083      	sub	sp, #12
	uint32_t                  ul_time;
	struct calendar_date_time datetime;
	calendar_get_date_time(&CALENDER_INTERFACE, &datetime);
    245c:	4669      	mov	r1, sp
    245e:	480f      	ldr	r0, [pc, #60]	; (249c <get_fattime+0x44>)
    2460:	4b0f      	ldr	r3, [pc, #60]	; (24a0 <get_fattime+0x48>)
    2462:	4798      	blx	r3

	ul_time = ((datetime.date.year - 1980) << 25) | (datetime.date.month << 21) | (datetime.date.day << 16)
    2464:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    2468:	f2a3 70bc 	subw	r0, r3, #1980	; 0x7bc
    246c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    2470:	055b      	lsls	r3, r3, #21
    2472:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
    2476:	f89d 0004 	ldrb.w	r0, [sp, #4]
    247a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
	          | (datetime.time.hour << 11) | (datetime.time.min << 5) | (datetime.time.sec << 0);
    247e:	f89d 0002 	ldrb.w	r0, [sp, #2]
    2482:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
    2486:	f89d 0001 	ldrb.w	r0, [sp, #1]
    248a:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
    248e:	f89d 0000 	ldrb.w	r0, [sp]
	return ul_time;
}
    2492:	4318      	orrs	r0, r3
    2494:	b003      	add	sp, #12
    2496:	f85d fb04 	ldr.w	pc, [sp], #4
    249a:	bf00      	nop
    249c:	20000a30 	.word	0x20000a30
    24a0:	00002621 	.word	0x00002621

000024a4 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    24a4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    24a8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    24aa:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    24ac:	f3bf 8f5f 	dmb	sy
    24b0:	4770      	bx	lr

000024b2 <atomic_leave_critical>:
    24b2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    24b6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    24b8:	f383 8810 	msr	PRIMASK, r3
    24bc:	4770      	bx	lr

000024be <leap_year>:
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
	if (year & 3) {
    24be:	f010 0f03 	tst.w	r0, #3
    24c2:	d101      	bne.n	24c8 <leap_year+0xa>
		return false;
	} else {
		return true;
    24c4:	2001      	movs	r0, #1
	}
}
    24c6:	4770      	bx	lr
		return false;
    24c8:	2000      	movs	r0, #0
    24ca:	4770      	bx	lr

000024cc <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    24cc:	b510      	push	{r4, lr}
    24ce:	460c      	mov	r4, r1
	uint32_t sec_in_month = 0;

	if (leap_year(year)) {
    24d0:	b280      	uxth	r0, r0
    24d2:	4b14      	ldr	r3, [pc, #80]	; (2524 <get_secs_in_month+0x58>)
    24d4:	4798      	blx	r3
    24d6:	b180      	cbz	r0, 24fa <get_secs_in_month+0x2e>
		switch (month) {
    24d8:	3c01      	subs	r4, #1
    24da:	2c0b      	cmp	r4, #11
    24dc:	d807      	bhi.n	24ee <get_secs_in_month+0x22>
    24de:	e8df f004 	tbb	[pc, r4]
    24e2:	081d      	.short	0x081d
    24e4:	0a1d0a1d 	.word	0x0a1d0a1d
    24e8:	1d0a1d1d 	.word	0x1d0a1d1d
    24ec:	1d0a      	.short	0x1d0a
	uint32_t sec_in_month = 0;
    24ee:	2000      	movs	r0, #0
    24f0:	bd10      	pop	{r4, pc}
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
			break;
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    24f2:	480d      	ldr	r0, [pc, #52]	; (2528 <get_secs_in_month+0x5c>)
			break;
    24f4:	bd10      	pop	{r4, pc}
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    24f6:	480d      	ldr	r0, [pc, #52]	; (252c <get_secs_in_month+0x60>)
			break;
    24f8:	bd10      	pop	{r4, pc}
		default:
			break;
		}
	} else {
		switch (month) {
    24fa:	3c01      	subs	r4, #1
    24fc:	2c0b      	cmp	r4, #11
    24fe:	d807      	bhi.n	2510 <get_secs_in_month+0x44>
    2500:	e8df f004 	tbb	[pc, r4]
    2504:	0a0e080e 	.word	0x0a0e080e
    2508:	0e0e0a0e 	.word	0x0e0e0a0e
    250c:	0e0a0e0a 	.word	0x0e0a0e0a
	uint32_t sec_in_month = 0;
    2510:	2000      	movs	r0, #0
    2512:	bd10      	pop	{r4, pc}
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
			break;
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    2514:	4806      	ldr	r0, [pc, #24]	; (2530 <get_secs_in_month+0x64>)
			break;
    2516:	bd10      	pop	{r4, pc}
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    2518:	4804      	ldr	r0, [pc, #16]	; (252c <get_secs_in_month+0x60>)
			break;
    251a:	bd10      	pop	{r4, pc}
			sec_in_month = SECS_IN_31DAYS;
    251c:	4805      	ldr	r0, [pc, #20]	; (2534 <get_secs_in_month+0x68>)
    251e:	bd10      	pop	{r4, pc}
			sec_in_month = SECS_IN_31DAYS;
    2520:	4804      	ldr	r0, [pc, #16]	; (2534 <get_secs_in_month+0x68>)
			break;
		}
	}

	return sec_in_month;
}
    2522:	bd10      	pop	{r4, pc}
    2524:	000024bf 	.word	0x000024bf
    2528:	00263b80 	.word	0x00263b80
    252c:	00278d00 	.word	0x00278d00
    2530:	0024ea00 	.word	0x0024ea00
    2534:	0028de80 	.word	0x0028de80

00002538 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    2538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    253c:	460c      	mov	r4, r1
    253e:	4690      	mov	r8, r2
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    2540:	6986      	ldr	r6, [r0, #24]
    2542:	e004      	b.n	254e <convert_timestamp_to_datetime+0x16>

	tmp = ts;

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    2544:	4b20      	ldr	r3, [pc, #128]	; (25c8 <convert_timestamp_to_datetime+0x90>)

		if (tmp >= sec_in_year) {
    2546:	429c      	cmp	r4, r3
    2548:	d309      	bcc.n	255e <convert_timestamp_to_datetime+0x26>
			tmp -= sec_in_year;
    254a:	1ae4      	subs	r4, r4, r3
			tmp_year++;
    254c:	3601      	adds	r6, #1
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    254e:	b2b7      	uxth	r7, r6
    2550:	4638      	mov	r0, r7
    2552:	4b1e      	ldr	r3, [pc, #120]	; (25cc <convert_timestamp_to_datetime+0x94>)
    2554:	4798      	blx	r3
    2556:	2800      	cmp	r0, #0
    2558:	d0f4      	beq.n	2544 <convert_timestamp_to_datetime+0xc>
    255a:	4b1d      	ldr	r3, [pc, #116]	; (25d0 <convert_timestamp_to_datetime+0x98>)
    255c:	e7f3      	b.n	2546 <convert_timestamp_to_datetime+0xe>
    255e:	2501      	movs	r5, #1
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    2560:	4629      	mov	r1, r5
    2562:	4630      	mov	r0, r6
    2564:	4b1b      	ldr	r3, [pc, #108]	; (25d4 <convert_timestamp_to_datetime+0x9c>)
    2566:	4798      	blx	r3

		if (tmp >= sec_in_month) {
    2568:	4284      	cmp	r4, r0
    256a:	d303      	bcc.n	2574 <convert_timestamp_to_datetime+0x3c>
			tmp -= sec_in_month;
    256c:	1a24      	subs	r4, r4, r0
			tmp_month++;
    256e:	3501      	adds	r5, #1
    2570:	b2ed      	uxtb	r5, r5
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    2572:	e7f5      	b.n	2560 <convert_timestamp_to_datetime+0x28>
    2574:	2101      	movs	r1, #1
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    2576:	4b18      	ldr	r3, [pc, #96]	; (25d8 <convert_timestamp_to_datetime+0xa0>)
    2578:	429c      	cmp	r4, r3
    257a:	d906      	bls.n	258a <convert_timestamp_to_datetime+0x52>
			tmp -= SECS_IN_DAY;
    257c:	f5a4 34a8 	sub.w	r4, r4, #86016	; 0x15000
    2580:	f5a4 74c0 	sub.w	r4, r4, #384	; 0x180
			tmp_day++;
    2584:	3101      	adds	r1, #1
    2586:	b2c9      	uxtb	r1, r1
		if (tmp >= SECS_IN_DAY) {
    2588:	e7f5      	b.n	2576 <convert_timestamp_to_datetime+0x3e>
    258a:	2200      	movs	r2, #0
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    258c:	f5b4 6f61 	cmp.w	r4, #3600	; 0xe10
    2590:	d304      	bcc.n	259c <convert_timestamp_to_datetime+0x64>
			tmp -= SECS_IN_HOUR;
    2592:	f5a4 6461 	sub.w	r4, r4, #3600	; 0xe10
			tmp_hour++;
    2596:	3201      	adds	r2, #1
    2598:	b2d2      	uxtb	r2, r2
		if (tmp >= SECS_IN_HOUR) {
    259a:	e7f7      	b.n	258c <convert_timestamp_to_datetime+0x54>
    259c:	2300      	movs	r3, #0
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    259e:	2c3b      	cmp	r4, #59	; 0x3b
    25a0:	d903      	bls.n	25aa <convert_timestamp_to_datetime+0x72>
			tmp -= SECS_IN_MINUTE;
    25a2:	3c3c      	subs	r4, #60	; 0x3c
			tmp_minutes++;
    25a4:	3301      	adds	r3, #1
    25a6:	b2db      	uxtb	r3, r3
		if (tmp >= SECS_IN_MINUTE) {
    25a8:	e7f9      	b.n	259e <convert_timestamp_to_datetime+0x66>
		} else {
			break;
		}
	}

	dt->date.year  = tmp_year;
    25aa:	f8a8 7006 	strh.w	r7, [r8, #6]
	dt->date.month = tmp_month;
    25ae:	f888 5005 	strb.w	r5, [r8, #5]
	dt->date.day   = tmp_day;
    25b2:	f888 1004 	strb.w	r1, [r8, #4]
	dt->time.hour  = tmp_hour;
    25b6:	f888 2002 	strb.w	r2, [r8, #2]
	dt->time.min   = tmp_minutes;
    25ba:	f888 3001 	strb.w	r3, [r8, #1]
	dt->time.sec   = tmp;
    25be:	f888 4000 	strb.w	r4, [r8]

	return ERR_NONE;
}
    25c2:	2000      	movs	r0, #0
    25c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    25c8:	01e13380 	.word	0x01e13380
    25cc:	000024bf 	.word	0x000024bf
    25d0:	01e28500 	.word	0x01e28500
    25d4:	000024cd 	.word	0x000024cd
    25d8:	0001517f 	.word	0x0001517f

000025dc <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    25dc:	b538      	push	{r3, r4, r5, lr}
    25de:	460d      	mov	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
    25e0:	4604      	mov	r4, r0
    25e2:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    25e6:	490b      	ldr	r1, [pc, #44]	; (2614 <calendar_init+0x38>)
    25e8:	3000      	adds	r0, #0
    25ea:	bf18      	it	ne
    25ec:	2001      	movne	r0, #1
    25ee:	4b0a      	ldr	r3, [pc, #40]	; (2618 <calendar_init+0x3c>)
    25f0:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    25f2:	6823      	ldr	r3, [r4, #0]
    25f4:	42ab      	cmp	r3, r5
    25f6:	d008      	beq.n	260a <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
    25f8:	b94b      	cbnz	r3, 260e <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
    25fa:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
    25fc:	4620      	mov	r0, r4
    25fe:	4b07      	ldr	r3, [pc, #28]	; (261c <calendar_init+0x40>)
    2600:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
    2602:	f240 73b2 	movw	r3, #1970	; 0x7b2
    2606:	61a3      	str	r3, [r4, #24]

	return ret;
    2608:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_NONE;
    260a:	2000      	movs	r0, #0
    260c:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_ALREADY_INITIALIZED;
    260e:	f06f 0011 	mvn.w	r0, #17
}
    2612:	bd38      	pop	{r3, r4, r5, pc}
    2614:	000060f8 	.word	0x000060f8
    2618:	00002b35 	.word	0x00002b35
    261c:	00003005 	.word	0x00003005

00002620 <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    2620:	b538      	push	{r3, r4, r5, lr}
    2622:	460d      	mov	r5, r1
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    2624:	4604      	mov	r4, r0
    2626:	f240 223b 	movw	r2, #571	; 0x23b
    262a:	4908      	ldr	r1, [pc, #32]	; (264c <calendar_get_date_time+0x2c>)
    262c:	3000      	adds	r0, #0
    262e:	bf18      	it	ne
    2630:	2001      	movne	r0, #1
    2632:	4b07      	ldr	r3, [pc, #28]	; (2650 <calendar_get_date_time+0x30>)
    2634:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    2636:	4620      	mov	r0, r4
    2638:	4b06      	ldr	r3, [pc, #24]	; (2654 <calendar_get_date_time+0x34>)
    263a:	4798      	blx	r3
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    263c:	462a      	mov	r2, r5
    263e:	4601      	mov	r1, r0
    2640:	4620      	mov	r0, r4
    2642:	4b05      	ldr	r3, [pc, #20]	; (2658 <calendar_get_date_time+0x38>)
    2644:	4798      	blx	r3

	return ERR_NONE;
}
    2646:	2000      	movs	r0, #0
    2648:	bd38      	pop	{r3, r4, r5, pc}
    264a:	bf00      	nop
    264c:	000060f8 	.word	0x000060f8
    2650:	00002b35 	.word	0x00002b35
    2654:	000030a9 	.word	0x000030a9
    2658:	00002539 	.word	0x00002539

0000265c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    265c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    265e:	4b04      	ldr	r3, [pc, #16]	; (2670 <delay_us+0x14>)
    2660:	681c      	ldr	r4, [r3, #0]
    2662:	4b04      	ldr	r3, [pc, #16]	; (2674 <delay_us+0x18>)
    2664:	4798      	blx	r3
    2666:	4601      	mov	r1, r0
    2668:	4620      	mov	r0, r4
    266a:	4b03      	ldr	r3, [pc, #12]	; (2678 <delay_us+0x1c>)
    266c:	4798      	blx	r3
    266e:	bd10      	pop	{r4, pc}
    2670:	200000ec 	.word	0x200000ec
    2674:	00002b79 	.word	0x00002b79
    2678:	00002b91 	.word	0x00002b91

0000267c <i2s_c_sync_init>:

#include "hal_i2s_controller_sync.h"
#include "utils_assert.h"

int32_t i2s_c_sync_init(struct i2s_c_sync_desc *i2s, const void *hw, const enum i2s_c_iface iface)
{
    267c:	b570      	push	{r4, r5, r6, lr}
    267e:	460c      	mov	r4, r1
    2680:	4616      	mov	r6, r2
	int32_t rc;

	ASSERT(i2s && hw);
    2682:	4605      	mov	r5, r0
    2684:	b180      	cbz	r0, 26a8 <i2s_c_sync_init+0x2c>
    2686:	b169      	cbz	r1, 26a4 <i2s_c_sync_init+0x28>
    2688:	2001      	movs	r0, #1
    268a:	2229      	movs	r2, #41	; 0x29
    268c:	4907      	ldr	r1, [pc, #28]	; (26ac <i2s_c_sync_init+0x30>)
    268e:	4b08      	ldr	r3, [pc, #32]	; (26b0 <i2s_c_sync_init+0x34>)
    2690:	4798      	blx	r3

	/** OUT/IN interface (corresponding to interface 0 and 1)
	 *  will be used in HPL.
	 */
	rc = _i2s_sync_init(&i2s->dev, hw, (enum _i2s_iface)iface);
    2692:	4632      	mov	r2, r6
    2694:	4621      	mov	r1, r4
    2696:	4628      	mov	r0, r5
    2698:	4b06      	ldr	r3, [pc, #24]	; (26b4 <i2s_c_sync_init+0x38>)
    269a:	4798      	blx	r3
	if (rc < 0) {
    269c:	2800      	cmp	r0, #0
    269e:	db00      	blt.n	26a2 <i2s_c_sync_init+0x26>
		return rc;
	}

	return ERR_NONE;
    26a0:	2000      	movs	r0, #0
}
    26a2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(i2s && hw);
    26a4:	2000      	movs	r0, #0
    26a6:	e7f0      	b.n	268a <i2s_c_sync_init+0xe>
    26a8:	2000      	movs	r0, #0
    26aa:	e7ee      	b.n	268a <i2s_c_sync_init+0xe>
    26ac:	00006114 	.word	0x00006114
    26b0:	00002b35 	.word	0x00002b35
    26b4:	00002ca9 	.word	0x00002ca9

000026b8 <i2s_c_sync_enable>:

	_i2s_sync_deinit(&i2s->dev);
}

int32_t i2s_c_sync_enable(struct i2s_c_sync_desc *i2s)
{
    26b8:	b510      	push	{r4, lr}
	ASSERT(i2s);
    26ba:	4604      	mov	r4, r0
    26bc:	223f      	movs	r2, #63	; 0x3f
    26be:	4905      	ldr	r1, [pc, #20]	; (26d4 <i2s_c_sync_enable+0x1c>)
    26c0:	3000      	adds	r0, #0
    26c2:	bf18      	it	ne
    26c4:	2001      	movne	r0, #1
    26c6:	4b04      	ldr	r3, [pc, #16]	; (26d8 <i2s_c_sync_enable+0x20>)
    26c8:	4798      	blx	r3

	return _i2s_sync_enable(&i2s->dev);
    26ca:	4620      	mov	r0, r4
    26cc:	4b03      	ldr	r3, [pc, #12]	; (26dc <i2s_c_sync_enable+0x24>)
    26ce:	4798      	blx	r3
}
    26d0:	bd10      	pop	{r4, pc}
    26d2:	bf00      	nop
    26d4:	00006114 	.word	0x00006114
    26d8:	00002b35 	.word	0x00002b35
    26dc:	00002e35 	.word	0x00002e35

000026e0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    26e0:	b570      	push	{r4, r5, r6, lr}
    26e2:	460d      	mov	r5, r1
    26e4:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    26e6:	4604      	mov	r4, r0
    26e8:	b168      	cbz	r0, 2706 <io_write+0x26>
    26ea:	b151      	cbz	r1, 2702 <io_write+0x22>
    26ec:	2001      	movs	r0, #1
    26ee:	2234      	movs	r2, #52	; 0x34
    26f0:	4906      	ldr	r1, [pc, #24]	; (270c <io_write+0x2c>)
    26f2:	4b07      	ldr	r3, [pc, #28]	; (2710 <io_write+0x30>)
    26f4:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    26f6:	6823      	ldr	r3, [r4, #0]
    26f8:	4632      	mov	r2, r6
    26fa:	4629      	mov	r1, r5
    26fc:	4620      	mov	r0, r4
    26fe:	4798      	blx	r3
}
    2700:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    2702:	2000      	movs	r0, #0
    2704:	e7f3      	b.n	26ee <io_write+0xe>
    2706:	2000      	movs	r0, #0
    2708:	e7f1      	b.n	26ee <io_write+0xe>
    270a:	bf00      	nop
    270c:	0000613c 	.word	0x0000613c
    2710:	00002b35 	.word	0x00002b35

00002714 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    2714:	b570      	push	{r4, r5, r6, lr}
    2716:	460d      	mov	r5, r1
    2718:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    271a:	4604      	mov	r4, r0
    271c:	b168      	cbz	r0, 273a <io_read+0x26>
    271e:	b151      	cbz	r1, 2736 <io_read+0x22>
    2720:	2001      	movs	r0, #1
    2722:	223d      	movs	r2, #61	; 0x3d
    2724:	4906      	ldr	r1, [pc, #24]	; (2740 <io_read+0x2c>)
    2726:	4b07      	ldr	r3, [pc, #28]	; (2744 <io_read+0x30>)
    2728:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    272a:	6863      	ldr	r3, [r4, #4]
    272c:	4632      	mov	r2, r6
    272e:	4629      	mov	r1, r5
    2730:	4620      	mov	r0, r4
    2732:	4798      	blx	r3
}
    2734:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    2736:	2000      	movs	r0, #0
    2738:	e7f3      	b.n	2722 <io_read+0xe>
    273a:	2000      	movs	r0, #0
    273c:	e7f1      	b.n	2722 <io_read+0xe>
    273e:	bf00      	nop
    2740:	0000613c 	.word	0x0000613c
    2744:	00002b35 	.word	0x00002b35

00002748 <mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t mci_sync_init(struct mci_sync_desc *mci, void *hw)
{
    2748:	b538      	push	{r3, r4, r5, lr}
    274a:	460c      	mov	r4, r1
	ASSERT(mci && hw);
    274c:	4605      	mov	r5, r0
    274e:	b160      	cbz	r0, 276a <mci_sync_init+0x22>
    2750:	b149      	cbz	r1, 2766 <mci_sync_init+0x1e>
    2752:	2001      	movs	r0, #1
    2754:	2231      	movs	r2, #49	; 0x31
    2756:	4906      	ldr	r1, [pc, #24]	; (2770 <mci_sync_init+0x28>)
    2758:	4b06      	ldr	r3, [pc, #24]	; (2774 <mci_sync_init+0x2c>)
    275a:	4798      	blx	r3
	return _mci_sync_init(&mci->device, hw);
    275c:	4621      	mov	r1, r4
    275e:	4628      	mov	r0, r5
    2760:	4b05      	ldr	r3, [pc, #20]	; (2778 <mci_sync_init+0x30>)
    2762:	4798      	blx	r3
}
    2764:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci && hw);
    2766:	2000      	movs	r0, #0
    2768:	e7f4      	b.n	2754 <mci_sync_init+0xc>
    276a:	2000      	movs	r0, #0
    276c:	e7f2      	b.n	2754 <mci_sync_init+0xc>
    276e:	bf00      	nop
    2770:	00006150 	.word	0x00006150
    2774:	00002b35 	.word	0x00002b35
    2778:	0000331d 	.word	0x0000331d

0000277c <mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t mci_sync_select_device(struct mci_sync_desc *mci, uint8_t slot, uint32_t clock, uint8_t bus_width,
                               bool high_speed)
{
    277c:	b5f0      	push	{r4, r5, r6, r7, lr}
    277e:	b083      	sub	sp, #12
    2780:	460d      	mov	r5, r1
    2782:	4616      	mov	r6, r2
    2784:	461f      	mov	r7, r3
	ASSERT(mci);
    2786:	4604      	mov	r4, r0
    2788:	2244      	movs	r2, #68	; 0x44
    278a:	4908      	ldr	r1, [pc, #32]	; (27ac <mci_sync_select_device+0x30>)
    278c:	3000      	adds	r0, #0
    278e:	bf18      	it	ne
    2790:	2001      	movne	r0, #1
    2792:	4b07      	ldr	r3, [pc, #28]	; (27b0 <mci_sync_select_device+0x34>)
    2794:	4798      	blx	r3
	return _mci_sync_select_device(&mci->device, slot, clock, bus_width, high_speed);
    2796:	f89d 3020 	ldrb.w	r3, [sp, #32]
    279a:	9300      	str	r3, [sp, #0]
    279c:	463b      	mov	r3, r7
    279e:	4632      	mov	r2, r6
    27a0:	4629      	mov	r1, r5
    27a2:	4620      	mov	r0, r4
    27a4:	4c03      	ldr	r4, [pc, #12]	; (27b4 <mci_sync_select_device+0x38>)
    27a6:	47a0      	blx	r4
}
    27a8:	b003      	add	sp, #12
    27aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27ac:	00006150 	.word	0x00006150
    27b0:	00002b35 	.word	0x00002b35
    27b4:	00003385 	.word	0x00003385

000027b8 <mci_sync_deselect_device>:

/**
 *  \brief Deselect a device by an assigned slot
 */
int32_t mci_sync_deselect_device(struct mci_sync_desc *mci, uint8_t slot)
{
    27b8:	b538      	push	{r3, r4, r5, lr}
    27ba:	460d      	mov	r5, r1
	ASSERT(mci);
    27bc:	4604      	mov	r4, r0
    27be:	224d      	movs	r2, #77	; 0x4d
    27c0:	4905      	ldr	r1, [pc, #20]	; (27d8 <mci_sync_deselect_device+0x20>)
    27c2:	3000      	adds	r0, #0
    27c4:	bf18      	it	ne
    27c6:	2001      	movne	r0, #1
    27c8:	4b04      	ldr	r3, [pc, #16]	; (27dc <mci_sync_deselect_device+0x24>)
    27ca:	4798      	blx	r3
	return _mci_sync_deselect_device(&mci->device, slot);
    27cc:	4629      	mov	r1, r5
    27ce:	4620      	mov	r0, r4
    27d0:	4b03      	ldr	r3, [pc, #12]	; (27e0 <mci_sync_deselect_device+0x28>)
    27d2:	4798      	blx	r3
}
    27d4:	bd38      	pop	{r3, r4, r5, pc}
    27d6:	bf00      	nop
    27d8:	00006150 	.word	0x00006150
    27dc:	00002b35 	.word	0x00002b35
    27e0:	00003419 	.word	0x00003419

000027e4 <mci_sync_get_bus_width>:

/**
 *  \brief Get the maximum bus width of a device by a selected slot
 */
uint8_t mci_sync_get_bus_width(struct mci_sync_desc *mci, uint8_t slot)
{
    27e4:	b538      	push	{r3, r4, r5, lr}
    27e6:	460d      	mov	r5, r1
	ASSERT(mci);
    27e8:	4604      	mov	r4, r0
    27ea:	2256      	movs	r2, #86	; 0x56
    27ec:	4905      	ldr	r1, [pc, #20]	; (2804 <mci_sync_get_bus_width+0x20>)
    27ee:	3000      	adds	r0, #0
    27f0:	bf18      	it	ne
    27f2:	2001      	movne	r0, #1
    27f4:	4b04      	ldr	r3, [pc, #16]	; (2808 <mci_sync_get_bus_width+0x24>)
    27f6:	4798      	blx	r3
	return _mci_sync_get_bus_width(&mci->device, slot);
    27f8:	4629      	mov	r1, r5
    27fa:	4620      	mov	r0, r4
    27fc:	4b03      	ldr	r3, [pc, #12]	; (280c <mci_sync_get_bus_width+0x28>)
    27fe:	4798      	blx	r3
}
    2800:	bd38      	pop	{r3, r4, r5, pc}
    2802:	bf00      	nop
    2804:	00006150 	.word	0x00006150
    2808:	00002b35 	.word	0x00002b35
    280c:	0000341d 	.word	0x0000341d

00002810 <mci_sync_is_high_speed_capable>:
/**
 *  \brief Get the high speed capability of the device.
 *
 */
bool mci_sync_is_high_speed_capable(struct mci_sync_desc *mci)
{
    2810:	b510      	push	{r4, lr}
	ASSERT(mci);
    2812:	4604      	mov	r4, r0
    2814:	2260      	movs	r2, #96	; 0x60
    2816:	4905      	ldr	r1, [pc, #20]	; (282c <mci_sync_is_high_speed_capable+0x1c>)
    2818:	3000      	adds	r0, #0
    281a:	bf18      	it	ne
    281c:	2001      	movne	r0, #1
    281e:	4b04      	ldr	r3, [pc, #16]	; (2830 <mci_sync_is_high_speed_capable+0x20>)
    2820:	4798      	blx	r3
	return _mci_sync_is_high_speed_capable(&mci->device);
    2822:	4620      	mov	r0, r4
    2824:	4b03      	ldr	r3, [pc, #12]	; (2834 <mci_sync_is_high_speed_capable+0x24>)
    2826:	4798      	blx	r3
}
    2828:	bd10      	pop	{r4, pc}
    282a:	bf00      	nop
    282c:	00006150 	.word	0x00006150
    2830:	00002b35 	.word	0x00002b35
    2834:	00003427 	.word	0x00003427

00002838 <mci_sync_send_clock>:

/**
 *  \brief Send 74 clock cycles on the line.
 */
void mci_sync_send_clock(struct mci_sync_desc *mci)
{
    2838:	b510      	push	{r4, lr}
	ASSERT(mci);
    283a:	4604      	mov	r4, r0
    283c:	2269      	movs	r2, #105	; 0x69
    283e:	4905      	ldr	r1, [pc, #20]	; (2854 <mci_sync_send_clock+0x1c>)
    2840:	3000      	adds	r0, #0
    2842:	bf18      	it	ne
    2844:	2001      	movne	r0, #1
    2846:	4b04      	ldr	r3, [pc, #16]	; (2858 <mci_sync_send_clock+0x20>)
    2848:	4798      	blx	r3
	_mci_sync_send_clock(&mci->device);
    284a:	4620      	mov	r0, r4
    284c:	4b03      	ldr	r3, [pc, #12]	; (285c <mci_sync_send_clock+0x24>)
    284e:	4798      	blx	r3
    2850:	bd10      	pop	{r4, pc}
    2852:	bf00      	nop
    2854:	00006150 	.word	0x00006150
    2858:	00002b35 	.word	0x00002b35
    285c:	00003431 	.word	0x00003431

00002860 <mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool mci_sync_send_cmd(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg)
{
    2860:	b570      	push	{r4, r5, r6, lr}
    2862:	460d      	mov	r5, r1
    2864:	4616      	mov	r6, r2
	ASSERT(mci);
    2866:	4604      	mov	r4, r0
    2868:	2272      	movs	r2, #114	; 0x72
    286a:	4906      	ldr	r1, [pc, #24]	; (2884 <mci_sync_send_cmd+0x24>)
    286c:	3000      	adds	r0, #0
    286e:	bf18      	it	ne
    2870:	2001      	movne	r0, #1
    2872:	4b05      	ldr	r3, [pc, #20]	; (2888 <mci_sync_send_cmd+0x28>)
    2874:	4798      	blx	r3
	return _mci_sync_send_cmd(&mci->device, cmd, arg);
    2876:	4632      	mov	r2, r6
    2878:	4629      	mov	r1, r5
    287a:	4620      	mov	r0, r4
    287c:	4b03      	ldr	r3, [pc, #12]	; (288c <mci_sync_send_cmd+0x2c>)
    287e:	4798      	blx	r3
}
    2880:	bd70      	pop	{r4, r5, r6, pc}
    2882:	bf00      	nop
    2884:	00006150 	.word	0x00006150
    2888:	00002b35 	.word	0x00002b35
    288c:	00003469 	.word	0x00003469

00002890 <mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t mci_sync_get_response(struct mci_sync_desc *mci)
{
    2890:	b510      	push	{r4, lr}
	ASSERT(mci);
    2892:	4604      	mov	r4, r0
    2894:	227b      	movs	r2, #123	; 0x7b
    2896:	4905      	ldr	r1, [pc, #20]	; (28ac <mci_sync_get_response+0x1c>)
    2898:	3000      	adds	r0, #0
    289a:	bf18      	it	ne
    289c:	2001      	movne	r0, #1
    289e:	4b04      	ldr	r3, [pc, #16]	; (28b0 <mci_sync_get_response+0x20>)
    28a0:	4798      	blx	r3
	return _mci_sync_get_response(&mci->device);
    28a2:	4620      	mov	r0, r4
    28a4:	4b03      	ldr	r3, [pc, #12]	; (28b4 <mci_sync_get_response+0x24>)
    28a6:	4798      	blx	r3
}
    28a8:	bd10      	pop	{r4, pc}
    28aa:	bf00      	nop
    28ac:	00006150 	.word	0x00006150
    28b0:	00002b35 	.word	0x00002b35
    28b4:	000034c1 	.word	0x000034c1

000028b8 <mci_sync_get_response_128>:

/**
 *  \brief Get 128 bits response of the last command.
 */
void mci_sync_get_response_128(struct mci_sync_desc *mci, uint8_t *response)
{
    28b8:	b538      	push	{r3, r4, r5, lr}
    28ba:	460c      	mov	r4, r1
	ASSERT(mci && response);
    28bc:	4605      	mov	r5, r0
    28be:	b160      	cbz	r0, 28da <mci_sync_get_response_128+0x22>
    28c0:	b149      	cbz	r1, 28d6 <mci_sync_get_response_128+0x1e>
    28c2:	2001      	movs	r0, #1
    28c4:	2284      	movs	r2, #132	; 0x84
    28c6:	4906      	ldr	r1, [pc, #24]	; (28e0 <mci_sync_get_response_128+0x28>)
    28c8:	4b06      	ldr	r3, [pc, #24]	; (28e4 <mci_sync_get_response_128+0x2c>)
    28ca:	4798      	blx	r3
	_mci_sync_get_response_128(&mci->device, response);
    28cc:	4621      	mov	r1, r4
    28ce:	4628      	mov	r0, r5
    28d0:	4b05      	ldr	r3, [pc, #20]	; (28e8 <mci_sync_get_response_128+0x30>)
    28d2:	4798      	blx	r3
    28d4:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci && response);
    28d6:	2000      	movs	r0, #0
    28d8:	e7f4      	b.n	28c4 <mci_sync_get_response_128+0xc>
    28da:	2000      	movs	r0, #0
    28dc:	e7f2      	b.n	28c4 <mci_sync_get_response_128+0xc>
    28de:	bf00      	nop
    28e0:	00006150 	.word	0x00006150
    28e4:	00002b35 	.word	0x00002b35
    28e8:	000034ed 	.word	0x000034ed

000028ec <mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool mci_sync_adtc_start(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block,
                         bool access_block)
{
    28ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    28ee:	b083      	sub	sp, #12
    28f0:	460d      	mov	r5, r1
    28f2:	4616      	mov	r6, r2
    28f4:	461f      	mov	r7, r3
	ASSERT(mci);
    28f6:	4604      	mov	r4, r0
    28f8:	2290      	movs	r2, #144	; 0x90
    28fa:	490a      	ldr	r1, [pc, #40]	; (2924 <mci_sync_adtc_start+0x38>)
    28fc:	3000      	adds	r0, #0
    28fe:	bf18      	it	ne
    2900:	2001      	movne	r0, #1
    2902:	4b09      	ldr	r3, [pc, #36]	; (2928 <mci_sync_adtc_start+0x3c>)
    2904:	4798      	blx	r3
	return _mci_sync_adtc_start(&mci->device, cmd, arg, block_size, nb_block, access_block);
    2906:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    290a:	9301      	str	r3, [sp, #4]
    290c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    2910:	9300      	str	r3, [sp, #0]
    2912:	463b      	mov	r3, r7
    2914:	4632      	mov	r2, r6
    2916:	4629      	mov	r1, r5
    2918:	4620      	mov	r0, r4
    291a:	4c04      	ldr	r4, [pc, #16]	; (292c <mci_sync_adtc_start+0x40>)
    291c:	47a0      	blx	r4
}
    291e:	b003      	add	sp, #12
    2920:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2922:	bf00      	nop
    2924:	00006150 	.word	0x00006150
    2928:	00002b35 	.word	0x00002b35
    292c:	00003545 	.word	0x00003545

00002930 <mci_sync_start_read_blocks>:
/**
 *  \brief Start a read blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool mci_sync_start_read_blocks(struct mci_sync_desc *mci, void *dst, uint16_t nb_block)
{
    2930:	b570      	push	{r4, r5, r6, lr}
    2932:	460c      	mov	r4, r1
    2934:	4616      	mov	r6, r2
	ASSERT(mci && dst);
    2936:	4605      	mov	r5, r0
    2938:	b168      	cbz	r0, 2956 <mci_sync_start_read_blocks+0x26>
    293a:	b151      	cbz	r1, 2952 <mci_sync_start_read_blocks+0x22>
    293c:	2001      	movs	r0, #1
    293e:	22b5      	movs	r2, #181	; 0xb5
    2940:	4906      	ldr	r1, [pc, #24]	; (295c <mci_sync_start_read_blocks+0x2c>)
    2942:	4b07      	ldr	r3, [pc, #28]	; (2960 <mci_sync_start_read_blocks+0x30>)
    2944:	4798      	blx	r3
	return _mci_sync_start_read_blocks(&mci->device, dst, nb_block);
    2946:	4632      	mov	r2, r6
    2948:	4621      	mov	r1, r4
    294a:	4628      	mov	r0, r5
    294c:	4b05      	ldr	r3, [pc, #20]	; (2964 <mci_sync_start_read_blocks+0x34>)
    294e:	4798      	blx	r3
}
    2950:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci && dst);
    2952:	2000      	movs	r0, #0
    2954:	e7f3      	b.n	293e <mci_sync_start_read_blocks+0xe>
    2956:	2000      	movs	r0, #0
    2958:	e7f1      	b.n	293e <mci_sync_start_read_blocks+0xe>
    295a:	bf00      	nop
    295c:	00006150 	.word	0x00006150
    2960:	00002b35 	.word	0x00002b35
    2964:	0000385d 	.word	0x0000385d

00002968 <mci_sync_start_write_blocks>:

/**
 *  \brief Start a write blocks transfer on the line
 */
bool mci_sync_start_write_blocks(struct mci_sync_desc *mci, const void *src, uint16_t nb_block)
{
    2968:	b570      	push	{r4, r5, r6, lr}
    296a:	460c      	mov	r4, r1
    296c:	4616      	mov	r6, r2
	ASSERT(mci && src);
    296e:	4605      	mov	r5, r0
    2970:	b168      	cbz	r0, 298e <mci_sync_start_write_blocks+0x26>
    2972:	b151      	cbz	r1, 298a <mci_sync_start_write_blocks+0x22>
    2974:	2001      	movs	r0, #1
    2976:	22be      	movs	r2, #190	; 0xbe
    2978:	4906      	ldr	r1, [pc, #24]	; (2994 <mci_sync_start_write_blocks+0x2c>)
    297a:	4b07      	ldr	r3, [pc, #28]	; (2998 <mci_sync_start_write_blocks+0x30>)
    297c:	4798      	blx	r3
	return _mci_sync_start_write_blocks(&mci->device, src, nb_block);
    297e:	4632      	mov	r2, r6
    2980:	4621      	mov	r1, r4
    2982:	4628      	mov	r0, r5
    2984:	4b05      	ldr	r3, [pc, #20]	; (299c <mci_sync_start_write_blocks+0x34>)
    2986:	4798      	blx	r3
}
    2988:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci && src);
    298a:	2000      	movs	r0, #0
    298c:	e7f3      	b.n	2976 <mci_sync_start_write_blocks+0xe>
    298e:	2000      	movs	r0, #0
    2990:	e7f1      	b.n	2976 <mci_sync_start_write_blocks+0xe>
    2992:	bf00      	nop
    2994:	00006150 	.word	0x00006150
    2998:	00002b35 	.word	0x00002b35
    299c:	00003911 	.word	0x00003911

000029a0 <mci_sync_wait_end_of_read_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_read_blocks()
 */
bool mci_sync_wait_end_of_read_blocks(struct mci_sync_desc *mci)
{
    29a0:	b510      	push	{r4, lr}
	ASSERT(mci);
    29a2:	4604      	mov	r4, r0
    29a4:	22c7      	movs	r2, #199	; 0xc7
    29a6:	4905      	ldr	r1, [pc, #20]	; (29bc <mci_sync_wait_end_of_read_blocks+0x1c>)
    29a8:	3000      	adds	r0, #0
    29aa:	bf18      	it	ne
    29ac:	2001      	movne	r0, #1
    29ae:	4b04      	ldr	r3, [pc, #16]	; (29c0 <mci_sync_wait_end_of_read_blocks+0x20>)
    29b0:	4798      	blx	r3
	return _mci_sync_wait_end_of_read_blocks(&mci->device);
    29b2:	4620      	mov	r0, r4
    29b4:	4b03      	ldr	r3, [pc, #12]	; (29c4 <mci_sync_wait_end_of_read_blocks+0x24>)
    29b6:	4798      	blx	r3
}
    29b8:	bd10      	pop	{r4, pc}
    29ba:	bf00      	nop
    29bc:	00006150 	.word	0x00006150
    29c0:	00002b35 	.word	0x00002b35
    29c4:	00003991 	.word	0x00003991

000029c8 <mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool mci_sync_wait_end_of_write_blocks(struct mci_sync_desc *mci)
{
    29c8:	b510      	push	{r4, lr}
	ASSERT(mci);
    29ca:	4604      	mov	r4, r0
    29cc:	22d0      	movs	r2, #208	; 0xd0
    29ce:	4905      	ldr	r1, [pc, #20]	; (29e4 <mci_sync_wait_end_of_write_blocks+0x1c>)
    29d0:	3000      	adds	r0, #0
    29d2:	bf18      	it	ne
    29d4:	2001      	movne	r0, #1
    29d6:	4b04      	ldr	r3, [pc, #16]	; (29e8 <mci_sync_wait_end_of_write_blocks+0x20>)
    29d8:	4798      	blx	r3
	return _mci_sync_wait_end_of_write_blocks(&mci->device);
    29da:	4620      	mov	r0, r4
    29dc:	4b03      	ldr	r3, [pc, #12]	; (29ec <mci_sync_wait_end_of_write_blocks+0x24>)
    29de:	4798      	blx	r3
}
    29e0:	bd10      	pop	{r4, pc}
    29e2:	bf00      	nop
    29e4:	00006150 	.word	0x00006150
    29e8:	00002b35 	.word	0x00002b35
    29ec:	000039b9 	.word	0x000039b9

000029f0 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    29f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29f2:	460e      	mov	r6, r1
    29f4:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    29f6:	4605      	mov	r5, r0
    29f8:	b308      	cbz	r0, 2a3e <usart_sync_write+0x4e>
    29fa:	b311      	cbz	r1, 2a42 <usart_sync_write+0x52>
    29fc:	bb1a      	cbnz	r2, 2a46 <usart_sync_write+0x56>
    29fe:	2000      	movs	r0, #0
    2a00:	22f1      	movs	r2, #241	; 0xf1
    2a02:	4912      	ldr	r1, [pc, #72]	; (2a4c <usart_sync_write+0x5c>)
    2a04:	4b12      	ldr	r3, [pc, #72]	; (2a50 <usart_sync_write+0x60>)
    2a06:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    2a08:	f105 0408 	add.w	r4, r5, #8
    2a0c:	4620      	mov	r0, r4
    2a0e:	4b11      	ldr	r3, [pc, #68]	; (2a54 <usart_sync_write+0x64>)
    2a10:	4798      	blx	r3
    2a12:	2800      	cmp	r0, #0
    2a14:	d0f8      	beq.n	2a08 <usart_sync_write+0x18>
    2a16:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    2a18:	5d71      	ldrb	r1, [r6, r5]
    2a1a:	4620      	mov	r0, r4
    2a1c:	4b0e      	ldr	r3, [pc, #56]	; (2a58 <usart_sync_write+0x68>)
    2a1e:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    2a20:	4620      	mov	r0, r4
    2a22:	4b0c      	ldr	r3, [pc, #48]	; (2a54 <usart_sync_write+0x64>)
    2a24:	4798      	blx	r3
    2a26:	2800      	cmp	r0, #0
    2a28:	d0fa      	beq.n	2a20 <usart_sync_write+0x30>
			;
	} while (++offset < length);
    2a2a:	3501      	adds	r5, #1
    2a2c:	42bd      	cmp	r5, r7
    2a2e:	d3f3      	bcc.n	2a18 <usart_sync_write+0x28>
	while (!_usart_sync_is_transmit_done(&descr->device))
    2a30:	4620      	mov	r0, r4
    2a32:	4b0a      	ldr	r3, [pc, #40]	; (2a5c <usart_sync_write+0x6c>)
    2a34:	4798      	blx	r3
    2a36:	2800      	cmp	r0, #0
    2a38:	d0fa      	beq.n	2a30 <usart_sync_write+0x40>
		;
	return (int32_t)offset;
}
    2a3a:	4628      	mov	r0, r5
    2a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    2a3e:	2000      	movs	r0, #0
    2a40:	e7de      	b.n	2a00 <usart_sync_write+0x10>
    2a42:	2000      	movs	r0, #0
    2a44:	e7dc      	b.n	2a00 <usart_sync_write+0x10>
    2a46:	2001      	movs	r0, #1
    2a48:	e7da      	b.n	2a00 <usart_sync_write+0x10>
    2a4a:	bf00      	nop
    2a4c:	0000616c 	.word	0x0000616c
    2a50:	00002b35 	.word	0x00002b35
    2a54:	00003bb3 	.word	0x00003bb3
    2a58:	00003ba5 	.word	0x00003ba5
    2a5c:	00003bbd 	.word	0x00003bbd

00002a60 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    2a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a64:	460f      	mov	r7, r1
    2a66:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    2a68:	4605      	mov	r5, r0
    2a6a:	b1c8      	cbz	r0, 2aa0 <usart_sync_read+0x40>
    2a6c:	b1d1      	cbz	r1, 2aa4 <usart_sync_read+0x44>
    2a6e:	b9da      	cbnz	r2, 2aa8 <usart_sync_read+0x48>
    2a70:	2000      	movs	r0, #0
    2a72:	f44f 7286 	mov.w	r2, #268	; 0x10c
    2a76:	490d      	ldr	r1, [pc, #52]	; (2aac <usart_sync_read+0x4c>)
    2a78:	4b0d      	ldr	r3, [pc, #52]	; (2ab0 <usart_sync_read+0x50>)
    2a7a:	4798      	blx	r3
	uint32_t                      offset = 0;
    2a7c:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    2a7e:	f105 0408 	add.w	r4, r5, #8
    2a82:	4620      	mov	r0, r4
    2a84:	4b0b      	ldr	r3, [pc, #44]	; (2ab4 <usart_sync_read+0x54>)
    2a86:	4798      	blx	r3
    2a88:	2800      	cmp	r0, #0
    2a8a:	d0f8      	beq.n	2a7e <usart_sync_read+0x1e>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    2a8c:	4620      	mov	r0, r4
    2a8e:	4b0a      	ldr	r3, [pc, #40]	; (2ab8 <usart_sync_read+0x58>)
    2a90:	4798      	blx	r3
    2a92:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
    2a94:	3601      	adds	r6, #1
    2a96:	4546      	cmp	r6, r8
    2a98:	d3f1      	bcc.n	2a7e <usart_sync_read+0x1e>

	return (int32_t)offset;
}
    2a9a:	4630      	mov	r0, r6
    2a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
    2aa0:	2000      	movs	r0, #0
    2aa2:	e7e6      	b.n	2a72 <usart_sync_read+0x12>
    2aa4:	2000      	movs	r0, #0
    2aa6:	e7e4      	b.n	2a72 <usart_sync_read+0x12>
    2aa8:	2001      	movs	r0, #1
    2aaa:	e7e2      	b.n	2a72 <usart_sync_read+0x12>
    2aac:	0000616c 	.word	0x0000616c
    2ab0:	00002b35 	.word	0x00002b35
    2ab4:	00003bc7 	.word	0x00003bc7
    2ab8:	00003bab 	.word	0x00003bab

00002abc <usart_sync_init>:
{
    2abc:	b538      	push	{r3, r4, r5, lr}
    2abe:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    2ac0:	4604      	mov	r4, r0
    2ac2:	b1a0      	cbz	r0, 2aee <usart_sync_init+0x32>
    2ac4:	b189      	cbz	r1, 2aea <usart_sync_init+0x2e>
    2ac6:	2001      	movs	r0, #1
    2ac8:	2234      	movs	r2, #52	; 0x34
    2aca:	490a      	ldr	r1, [pc, #40]	; (2af4 <usart_sync_init+0x38>)
    2acc:	4b0a      	ldr	r3, [pc, #40]	; (2af8 <usart_sync_init+0x3c>)
    2ace:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    2ad0:	4629      	mov	r1, r5
    2ad2:	f104 0008 	add.w	r0, r4, #8
    2ad6:	4b09      	ldr	r3, [pc, #36]	; (2afc <usart_sync_init+0x40>)
    2ad8:	4798      	blx	r3
	if (init_status) {
    2ada:	4603      	mov	r3, r0
    2adc:	b918      	cbnz	r0, 2ae6 <usart_sync_init+0x2a>
	descr->io.read  = usart_sync_read;
    2ade:	4a08      	ldr	r2, [pc, #32]	; (2b00 <usart_sync_init+0x44>)
    2ae0:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    2ae2:	4a08      	ldr	r2, [pc, #32]	; (2b04 <usart_sync_init+0x48>)
    2ae4:	6022      	str	r2, [r4, #0]
}
    2ae6:	4618      	mov	r0, r3
    2ae8:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    2aea:	2000      	movs	r0, #0
    2aec:	e7ec      	b.n	2ac8 <usart_sync_init+0xc>
    2aee:	2000      	movs	r0, #0
    2af0:	e7ea      	b.n	2ac8 <usart_sync_init+0xc>
    2af2:	bf00      	nop
    2af4:	0000616c 	.word	0x0000616c
    2af8:	00002b35 	.word	0x00002b35
    2afc:	00003b65 	.word	0x00003b65
    2b00:	00002a61 	.word	0x00002a61
    2b04:	000029f1 	.word	0x000029f1

00002b08 <usart_sync_enable>:
{
    2b08:	b510      	push	{r4, lr}
	ASSERT(descr);
    2b0a:	4604      	mov	r4, r0
    2b0c:	2253      	movs	r2, #83	; 0x53
    2b0e:	4906      	ldr	r1, [pc, #24]	; (2b28 <usart_sync_enable+0x20>)
    2b10:	3000      	adds	r0, #0
    2b12:	bf18      	it	ne
    2b14:	2001      	movne	r0, #1
    2b16:	4b05      	ldr	r3, [pc, #20]	; (2b2c <usart_sync_enable+0x24>)
    2b18:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    2b1a:	f104 0008 	add.w	r0, r4, #8
    2b1e:	4b04      	ldr	r3, [pc, #16]	; (2b30 <usart_sync_enable+0x28>)
    2b20:	4798      	blx	r3
}
    2b22:	2000      	movs	r0, #0
    2b24:	bd10      	pop	{r4, pc}
    2b26:	bf00      	nop
    2b28:	0000616c 	.word	0x0000616c
    2b2c:	00002b35 	.word	0x00002b35
    2b30:	00003b91 	.word	0x00003b91

00002b34 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    2b34:	b900      	cbnz	r0, 2b38 <assert+0x4>
		__asm("BKPT #0");
    2b36:	be00      	bkpt	0x0000
    2b38:	4770      	bx	lr
	...

00002b3c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    2b3c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    2b3e:	4a06      	ldr	r2, [pc, #24]	; (2b58 <_sbrk+0x1c>)
    2b40:	6812      	ldr	r2, [r2, #0]
    2b42:	b122      	cbz	r2, 2b4e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2b44:	4a04      	ldr	r2, [pc, #16]	; (2b58 <_sbrk+0x1c>)
    2b46:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2b48:	4403      	add	r3, r0
    2b4a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    2b4c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2b4e:	4903      	ldr	r1, [pc, #12]	; (2b5c <_sbrk+0x20>)
    2b50:	4a01      	ldr	r2, [pc, #4]	; (2b58 <_sbrk+0x1c>)
    2b52:	6011      	str	r1, [r2, #0]
    2b54:	e7f6      	b.n	2b44 <_sbrk+0x8>
    2b56:	bf00      	nop
    2b58:	200000f0 	.word	0x200000f0
    2b5c:	20010a78 	.word	0x20010a78

00002b60 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    2b60:	f04f 30ff 	mov.w	r0, #4294967295
    2b64:	4770      	bx	lr

00002b66 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    2b66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2b6a:	604b      	str	r3, [r1, #4]

	return 0;
}
    2b6c:	2000      	movs	r0, #0
    2b6e:	4770      	bx	lr

00002b70 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    2b70:	2001      	movs	r0, #1
    2b72:	4770      	bx	lr

00002b74 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    2b74:	2000      	movs	r0, #0
    2b76:	4770      	bx	lr

00002b78 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    2b78:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2b7c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    2b80:	3002      	adds	r0, #2
    2b82:	4b02      	ldr	r3, [pc, #8]	; (2b8c <_get_cycles_for_us+0x14>)
    2b84:	fba3 3000 	umull	r3, r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2b88:	0840      	lsrs	r0, r0, #1
    2b8a:	4770      	bx	lr
    2b8c:	aaaaaaab 	.word	0xaaaaaaab

00002b90 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    2b90:	3901      	subs	r1, #1
    2b92:	d8fd      	bhi.n	2b90 <_delay_cycles>
    2b94:	4770      	bx	lr
    2b96:	bf00      	nop

00002b98 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2b98:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    2b9a:	4a08      	ldr	r2, [pc, #32]	; (2bbc <_init_chip+0x24>)
    2b9c:	8813      	ldrh	r3, [r2, #0]
    2b9e:	b29b      	uxth	r3, r3
    2ba0:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    2ba2:	4b07      	ldr	r3, [pc, #28]	; (2bc0 <_init_chip+0x28>)
    2ba4:	4798      	blx	r3
	_oscctrl_init_sources();
    2ba6:	4b07      	ldr	r3, [pc, #28]	; (2bc4 <_init_chip+0x2c>)
    2ba8:	4798      	blx	r3
	_mclk_init();
    2baa:	4b07      	ldr	r3, [pc, #28]	; (2bc8 <_init_chip+0x30>)
    2bac:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    2bae:	4b07      	ldr	r3, [pc, #28]	; (2bcc <_init_chip+0x34>)
    2bb0:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2bb2:	f640 70ff 	movw	r0, #4095	; 0xfff
    2bb6:	4b06      	ldr	r3, [pc, #24]	; (2bd0 <_init_chip+0x38>)
    2bb8:	4798      	blx	r3
    2bba:	bd08      	pop	{r3, pc}
    2bbc:	41004000 	.word	0x41004000
    2bc0:	00002ed5 	.word	0x00002ed5
    2bc4:	00002f01 	.word	0x00002f01
    2bc8:	00002ec9 	.word	0x00002ec9
    2bcc:	00002f05 	.word	0x00002f05
    2bd0:	00002bd5 	.word	0x00002bd5

00002bd4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2bd4:	f010 0f01 	tst.w	r0, #1
    2bd8:	d008      	beq.n	2bec <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2bda:	4a17      	ldr	r2, [pc, #92]	; (2c38 <_gclk_init_generators_by_fref+0x64>)
    2bdc:	4b17      	ldr	r3, [pc, #92]	; (2c3c <_gclk_init_generators_by_fref+0x68>)
    2bde:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2be0:	4b16      	ldr	r3, [pc, #88]	; (2c3c <_gclk_init_generators_by_fref+0x68>)
    2be2:	685a      	ldr	r2, [r3, #4]
    2be4:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    2be8:	421a      	tst	r2, r3
    2bea:	d1f9      	bne.n	2be0 <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    2bec:	f010 0f02 	tst.w	r0, #2
    2bf0:	d008      	beq.n	2c04 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2bf2:	4a13      	ldr	r2, [pc, #76]	; (2c40 <_gclk_init_generators_by_fref+0x6c>)
    2bf4:	4b11      	ldr	r3, [pc, #68]	; (2c3c <_gclk_init_generators_by_fref+0x68>)
    2bf6:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2bf8:	4b10      	ldr	r3, [pc, #64]	; (2c3c <_gclk_init_generators_by_fref+0x68>)
    2bfa:	685a      	ldr	r2, [r3, #4]
    2bfc:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    2c00:	421a      	tst	r2, r3
    2c02:	d1f9      	bne.n	2bf8 <_gclk_init_generators_by_fref+0x24>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    2c04:	f010 0f04 	tst.w	r0, #4
    2c08:	d008      	beq.n	2c1c <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2c0a:	4a0e      	ldr	r2, [pc, #56]	; (2c44 <_gclk_init_generators_by_fref+0x70>)
    2c0c:	4b0b      	ldr	r3, [pc, #44]	; (2c3c <_gclk_init_generators_by_fref+0x68>)
    2c0e:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2c10:	4b0a      	ldr	r3, [pc, #40]	; (2c3c <_gclk_init_generators_by_fref+0x68>)
    2c12:	685a      	ldr	r2, [r3, #4]
    2c14:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    2c18:	421a      	tst	r2, r3
    2c1a:	d1f9      	bne.n	2c10 <_gclk_init_generators_by_fref+0x3c>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    2c1c:	f010 0f08 	tst.w	r0, #8
    2c20:	d008      	beq.n	2c34 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2c22:	4a09      	ldr	r2, [pc, #36]	; (2c48 <_gclk_init_generators_by_fref+0x74>)
    2c24:	4b05      	ldr	r3, [pc, #20]	; (2c3c <_gclk_init_generators_by_fref+0x68>)
    2c26:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2c28:	4b04      	ldr	r3, [pc, #16]	; (2c3c <_gclk_init_generators_by_fref+0x68>)
    2c2a:	685a      	ldr	r2, [r3, #4]
    2c2c:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    2c30:	421a      	tst	r2, r3
    2c32:	d1f9      	bne.n	2c28 <_gclk_init_generators_by_fref+0x54>
    2c34:	4770      	bx	lr
    2c36:	bf00      	nop
    2c38:	00010307 	.word	0x00010307
    2c3c:	40001c00 	.word	0x40001c00
    2c40:	000a0307 	.word	0x000a0307
    2c44:	00080308 	.word	0x00080308
    2c48:	00010305 	.word	0x00010305

00002c4c <_i2s_get_index>:
	if (I2S0 == hw)
		return 0;
#endif
	(void)hw;
	return 0;
}
    2c4c:	2000      	movs	r0, #0
    2c4e:	4770      	bx	lr

00002c50 <_i2s_get_cfg>:
 * \return Pointer to the init configurations.
 */
static const struct _i2s_init_cfg *_i2s_get_cfg(const uint8_t index)
{
	uint8_t i;
	for (i = 0; i < I2S_USED_AMOUNT; i++) {
    2c50:	2300      	movs	r3, #0
    2c52:	b123      	cbz	r3, 2c5e <_i2s_get_cfg+0xe>
		if (_init_cfg[i].i == index) {
			return &_init_cfg[i];
		}
	}
	return NULL;
    2c54:	2000      	movs	r0, #0
    2c56:	4770      	bx	lr
			return &_init_cfg[i];
    2c58:	4809      	ldr	r0, [pc, #36]	; (2c80 <_i2s_get_cfg+0x30>)
    2c5a:	4408      	add	r0, r1
    2c5c:	e00d      	b.n	2c7a <_i2s_get_cfg+0x2a>
{
    2c5e:	b410      	push	{r4}
		if (_init_cfg[i].i == index) {
    2c60:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2c64:	0091      	lsls	r1, r2, #2
    2c66:	4a06      	ldr	r2, [pc, #24]	; (2c80 <_i2s_get_cfg+0x30>)
    2c68:	440a      	add	r2, r1
    2c6a:	7c52      	ldrb	r2, [r2, #17]
    2c6c:	4282      	cmp	r2, r0
    2c6e:	d0f3      	beq.n	2c58 <_i2s_get_cfg+0x8>
	for (i = 0; i < I2S_USED_AMOUNT; i++) {
    2c70:	3301      	adds	r3, #1
    2c72:	b2db      	uxtb	r3, r3
    2c74:	2b00      	cmp	r3, #0
    2c76:	d0f3      	beq.n	2c60 <_i2s_get_cfg+0x10>
	return NULL;
    2c78:	2000      	movs	r0, #0
}
    2c7a:	f85d 4b04 	ldr.w	r4, [sp], #4
    2c7e:	4770      	bx	lr
    2c80:	00006188 	.word	0x00006188

00002c84 <_i2s_iface_take>:
 * \param[in] iface The interface to take.
 * \return \c true If success.
 */
static bool _i2s_iface_take(const uint8_t i, const enum _i2s_iface iface)
{
	uint32_t bit = _i2s_iface_use_flag(i, iface);
    2c84:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2c88:	2301      	movs	r3, #1
    2c8a:	fa03 f101 	lsl.w	r1, r3, r1
	if (_iface_use_flags & bit) {
    2c8e:	4b05      	ldr	r3, [pc, #20]	; (2ca4 <_i2s_iface_take+0x20>)
    2c90:	6818      	ldr	r0, [r3, #0]
    2c92:	4201      	tst	r1, r0
    2c94:	d103      	bne.n	2c9e <_i2s_iface_take+0x1a>
		return false;
	}
	_iface_use_flags |= bit;
    2c96:	4301      	orrs	r1, r0
    2c98:	6019      	str	r1, [r3, #0]
	return true;
    2c9a:	2001      	movs	r0, #1
    2c9c:	4770      	bx	lr
		return false;
    2c9e:	2000      	movs	r0, #0
}
    2ca0:	4770      	bx	lr
    2ca2:	bf00      	nop
    2ca4:	200000f4 	.word	0x200000f4

00002ca8 <_i2s_sync_init>:
/** Sync busy bits for CTRLA register. */
#define _I2S_CTRLA_SYNC_BITS                                                                                           \
	(I2S_SYNCBUSY_ENABLE | I2S_SYNCBUSY_CKEN_Msk | I2S_SYNCBUSY_TXEN | I2S_SYNCBUSY_RXEN | I2S_SYNCBUSY_SWRST)

int32_t _i2s_sync_init(struct _i2s_sync_dev *dev, const void *hw, const enum _i2s_iface iface)
{
    2ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cac:	b083      	sub	sp, #12
    2cae:	4607      	mov	r7, r0
    2cb0:	460c      	mov	r4, r1
    2cb2:	4616      	mov	r6, r2
	uint8_t               hw_index;
	struct _i2s_init_cfg *cfg;
	uint8_t               iface_ctrl;
	uint8_t               ctrla;
	uint8_t               en_bits;
	const uint8_t         data_size[7] = {32, 24, 20, 18, 16, 16, 8};
    2cb4:	4b59      	ldr	r3, [pc, #356]	; (2e1c <_i2s_sync_init+0x174>)
    2cb6:	e893 0003 	ldmia.w	r3, {r0, r1}
    2cba:	9000      	str	r0, [sp, #0]
    2cbc:	f8ad 1004 	strh.w	r1, [sp, #4]
    2cc0:	0c09      	lsrs	r1, r1, #16
    2cc2:	f88d 1006 	strb.w	r1, [sp, #6]
	bool                  enabled;

	ASSERT(dev && hw);
    2cc6:	b1bf      	cbz	r7, 2cf8 <_i2s_sync_init+0x50>
    2cc8:	b1a4      	cbz	r4, 2cf4 <_i2s_sync_init+0x4c>
    2cca:	2001      	movs	r0, #1
    2ccc:	22c8      	movs	r2, #200	; 0xc8
    2cce:	4954      	ldr	r1, [pc, #336]	; (2e20 <_i2s_sync_init+0x178>)
    2cd0:	4b54      	ldr	r3, [pc, #336]	; (2e24 <_i2s_sync_init+0x17c>)
    2cd2:	4798      	blx	r3

	hw_index   = _i2s_get_index(hw);
    2cd4:	4620      	mov	r0, r4
    2cd6:	4b54      	ldr	r3, [pc, #336]	; (2e28 <_i2s_sync_init+0x180>)
    2cd8:	4798      	blx	r3
    2cda:	4682      	mov	sl, r0
	cfg        = (struct _i2s_init_cfg *)_i2s_get_cfg(hw_index);
    2cdc:	4b53      	ldr	r3, [pc, #332]	; (2e2c <_i2s_sync_init+0x184>)
    2cde:	4798      	blx	r3
    2ce0:	4680      	mov	r8, r0
	iface_ctrl = (iface == 0) ? 0 : ((cfg->serctrl[iface] & I2S_RXCTRL_CLKSEL) ? 1 : 0);
    2ce2:	b15e      	cbz	r6, 2cfc <_i2s_sync_init+0x54>
    2ce4:	1cb3      	adds	r3, r6, #2
    2ce6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    2cea:	f013 0f20 	tst.w	r3, #32
    2cee:	d12c      	bne.n	2d4a <_i2s_sync_init+0xa2>
    2cf0:	2500      	movs	r5, #0
    2cf2:	e004      	b.n	2cfe <_i2s_sync_init+0x56>
	ASSERT(dev && hw);
    2cf4:	2000      	movs	r0, #0
    2cf6:	e7e9      	b.n	2ccc <_i2s_sync_init+0x24>
    2cf8:	2000      	movs	r0, #0
    2cfa:	e7e7      	b.n	2ccc <_i2s_sync_init+0x24>
	iface_ctrl = (iface == 0) ? 0 : ((cfg->serctrl[iface] & I2S_RXCTRL_CLKSEL) ? 1 : 0);
    2cfc:	2500      	movs	r5, #0
    2cfe:	b2ed      	uxtb	r5, r5
	en_bits    = cfg->ctrla & I2S_CTRLA_EN_MASK(iface, iface_ctrl);
    2d00:	f898 2010 	ldrb.w	r2, [r8, #16]
    2d04:	2304      	movs	r3, #4
    2d06:	40ab      	lsls	r3, r5
    2d08:	f04f 0910 	mov.w	r9, #16
    2d0c:	fa09 f906 	lsl.w	r9, r9, r6
    2d10:	ea43 0309 	orr.w	r3, r3, r9
    2d14:	ea03 0102 	and.w	r1, r3, r2
	};
}

static inline bool hri_i2s_is_syncing(const void *const hw, hri_i2s_syncbusy_reg_t reg)
{
	return ((I2s *)hw)->SYNCBUSY.reg & reg;
    2d18:	8b23      	ldrh	r3, [r4, #24]

	if (hri_i2s_is_syncing(hw, _I2S_CTRLA_SYNC_BITS)) {
    2d1a:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    2d1e:	d172      	bne.n	2e06 <_i2s_sync_init+0x15e>
	while (((I2s *)hw)->SYNCBUSY.reg & reg) {
    2d20:	8b23      	ldrh	r3, [r4, #24]
    2d22:	f003 0333 	and.w	r3, r3, #51	; 0x33
    2d26:	2b00      	cmp	r3, #0
    2d28:	d1fa      	bne.n	2d20 <_i2s_sync_init+0x78>
}

static inline hri_i2s_ctrla_reg_t hri_i2s_read_CTRLA_reg(const void *const hw)
{
	hri_i2s_wait_for_sync(hw, I2S_SYNCBUSY_SWRST | I2S_SYNCBUSY_ENABLE | I2S_SYNCBUSY_TXEN | I2S_SYNCBUSY_RXEN);
	return ((I2s *)hw)->CTRLA.reg;
    2d2a:	f894 b000 	ldrb.w	fp, [r4]
    2d2e:	fa5f fb8b 	uxtb.w	fp, fp
		return ERR_DENIED;
	}
	ctrla = hri_i2s_read_CTRLA_reg(hw);

	/* Clock sharing case */
	switch (cfg->ctrla & (I2S_CTRLA_CKEN_Msk | I2S_CTRLA_TXEN_Pos | I2S_CTRLA_RXEN_Pos)) {
    2d32:	f002 020d 	and.w	r2, r2, #13
    2d36:	2a05      	cmp	r2, #5
    2d38:	d009      	beq.n	2d4e <_i2s_sync_init+0xa6>
    2d3a:	2a0d      	cmp	r2, #13
    2d3c:	d007      	beq.n	2d4e <_i2s_sync_init+0xa6>
		if (ctrla & (I2S_CTRLA_TXEN << iface)) {
			return ERR_DENIED;
		}
		break;
	default:
		if (ctrla & en_bits) {
    2d3e:	ea11 0f0b 	tst.w	r1, fp
    2d42:	d007      	beq.n	2d54 <_i2s_sync_init+0xac>
			return ERR_DENIED;
    2d44:	f06f 0010 	mvn.w	r0, #16
    2d48:	e055      	b.n	2df6 <_i2s_sync_init+0x14e>
	iface_ctrl = (iface == 0) ? 0 : ((cfg->serctrl[iface] & I2S_RXCTRL_CLKSEL) ? 1 : 0);
    2d4a:	2501      	movs	r5, #1
    2d4c:	e7d7      	b.n	2cfe <_i2s_sync_init+0x56>
		if (ctrla & (I2S_CTRLA_TXEN << iface)) {
    2d4e:	ea1b 0f09 	tst.w	fp, r9
    2d52:	d15b      	bne.n	2e0c <_i2s_sync_init+0x164>
		}
		break;
	}

	if (!_i2s_iface_take(hw_index, iface)) {
    2d54:	4631      	mov	r1, r6
    2d56:	4650      	mov	r0, sl
    2d58:	4b35      	ldr	r3, [pc, #212]	; (2e30 <_i2s_sync_init+0x188>)
    2d5a:	4798      	blx	r3
    2d5c:	2800      	cmp	r0, #0
    2d5e:	d058      	beq.n	2e12 <_i2s_sync_init+0x16a>
	while (((I2s *)hw)->SYNCBUSY.reg & reg) {
    2d60:	8b23      	ldrh	r3, [r4, #24]
    2d62:	b2db      	uxtb	r3, r3
    2d64:	2b00      	cmp	r3, #0
    2d66:	d1fb      	bne.n	2d60 <_i2s_sync_init+0xb8>
    2d68:	8b23      	ldrh	r3, [r4, #24]
    2d6a:	f003 0333 	and.w	r3, r3, #51	; 0x33
    2d6e:	2b00      	cmp	r3, #0
    2d70:	d1fa      	bne.n	2d68 <_i2s_sync_init+0xc0>
	tmp = ((I2s *)hw)->CTRLA.reg;
    2d72:	7822      	ldrb	r2, [r4, #0]
	tmp = (tmp & I2S_CTRLA_ENABLE) >> I2S_CTRLA_ENABLE_Pos;
    2d74:	f3c2 0240 	ubfx	r2, r2, #1, #1
		return ERR_ALREADY_INITIALIZED;
	}

	hri_i2s_wait_for_sync(hw, 0xFF);
	enabled = hri_i2s_get_CTRLA_ENABLE_bit(hw);
	if (enabled) {
    2d78:	b162      	cbz	r2, 2d94 <_i2s_sync_init+0xec>
	((I2s *)hw)->CTRLA.reg &= ~I2S_CTRLA_ENABLE;
    2d7a:	7823      	ldrb	r3, [r4, #0]
    2d7c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2d80:	7023      	strb	r3, [r4, #0]
	while (((I2s *)hw)->SYNCBUSY.reg & reg) {
    2d82:	8b23      	ldrh	r3, [r4, #24]
    2d84:	f003 0333 	and.w	r3, r3, #51	; 0x33
    2d88:	2b00      	cmp	r3, #0
    2d8a:	d1fa      	bne.n	2d82 <_i2s_sync_init+0xda>
    2d8c:	8b23      	ldrh	r3, [r4, #24]
    2d8e:	b2db      	uxtb	r3, r3
    2d90:	2b00      	cmp	r3, #0
    2d92:	d1fb      	bne.n	2d8c <_i2s_sync_init+0xe4>
		hri_i2s_clear_CTRLA_ENABLE_bit(hw);
		hri_i2s_wait_for_sync(hw, 0xFF);
	}

	dev->prvt       = (void *)hw;
    2d94:	603c      	str	r4, [r7, #0]
	dev->iface      = iface;
    2d96:	797b      	ldrb	r3, [r7, #5]
    2d98:	f366 0300 	bfi	r3, r6, #0, #1
	dev->iface_ctrl = iface_ctrl;
    2d9c:	f365 0341 	bfi	r3, r5, #1, #1
    2da0:	717b      	strb	r3, [r7, #5]

	dev->is_controller = !(cfg->ctrla & (I2S_CTRLA_TXEN << iface));
    2da2:	f898 3010 	ldrb.w	r3, [r8, #16]
    2da6:	ea19 0f03 	tst.w	r9, r3
    2daa:	bf0c      	ite	eq
    2dac:	2101      	moveq	r1, #1
    2dae:	2100      	movne	r1, #0
    2db0:	797b      	ldrb	r3, [r7, #5]
    2db2:	f361 0382 	bfi	r3, r1, #2, #1
	dev->is_slave      = (cfg->clkctrl[iface_ctrl] & I2S_CLKCTRL_FSSEL_FSPIN);
    2db6:	f36f 03c3 	bfc	r3, #3, #1
    2dba:	717b      	strb	r3, [r7, #5]
	dev->word_size     = data_size[(cfg->serctrl[iface_ctrl] & I2S_TXCTRL_DATASIZE_Msk) >> I2S_TXCTRL_DATASIZE_Pos];
    2dbc:	1cab      	adds	r3, r5, #2
    2dbe:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
    2dc2:	f3c3 2302 	ubfx	r3, r3, #8, #3
    2dc6:	a902      	add	r1, sp, #8
    2dc8:	440b      	add	r3, r1
    2dca:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    2dce:	713b      	strb	r3, [r7, #4]

	(iface == 0) ? hri_i2s_write_TXCTRL_reg(hw, cfg->serctrl[iface])
	             : hri_i2s_write_RXCTRL_reg(hw, cfg->serctrl[iface]);
    2dd0:	b9a6      	cbnz	r6, 2dfc <_i2s_sync_init+0x154>
	(iface == 0) ? hri_i2s_write_TXCTRL_reg(hw, cfg->serctrl[iface])
    2dd2:	3602      	adds	r6, #2
    2dd4:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
}

static inline void hri_i2s_write_TXCTRL_reg(const void *const hw, hri_i2s_txctrl_reg_t data)
{
	I2S_CRITICAL_SECTION_ENTER();
	((I2s *)hw)->TXCTRL.reg = data;
    2dd8:	6223      	str	r3, [r4, #32]
	hri_i2s_write_CLKCTRL_reg(hw, iface_ctrl, cfg->clkctrl[iface_ctrl]);
    2dda:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
	((I2s *)hw)->CLKCTRL[index].reg = data;
    2dde:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    2de2:	606b      	str	r3, [r5, #4]

	if (enabled) {
    2de4:	b1c2      	cbz	r2, 2e18 <_i2s_sync_init+0x170>
	((I2s *)hw)->CTRLA.reg = data;
    2de6:	f884 b000 	strb.w	fp, [r4]
	while (((I2s *)hw)->SYNCBUSY.reg & reg) {
    2dea:	8b23      	ldrh	r3, [r4, #24]
    2dec:	f003 0333 	and.w	r3, r3, #51	; 0x33
    2df0:	2b00      	cmp	r3, #0
    2df2:	d1fa      	bne.n	2dea <_i2s_sync_init+0x142>
		hri_i2s_write_CTRLA_reg(hw, ctrla);
	}

	return ERR_NONE;
    2df4:	2000      	movs	r0, #0
}
    2df6:	b003      	add	sp, #12
    2df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	             : hri_i2s_write_RXCTRL_reg(hw, cfg->serctrl[iface]);
    2dfc:	3602      	adds	r6, #2
    2dfe:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
}

static inline void hri_i2s_write_RXCTRL_reg(const void *const hw, hri_i2s_rxctrl_reg_t data)
{
	I2S_CRITICAL_SECTION_ENTER();
	((I2s *)hw)->RXCTRL.reg = data;
    2e02:	6263      	str	r3, [r4, #36]	; 0x24
    2e04:	e7e9      	b.n	2dda <_i2s_sync_init+0x132>
		return ERR_DENIED;
    2e06:	f06f 0010 	mvn.w	r0, #16
    2e0a:	e7f4      	b.n	2df6 <_i2s_sync_init+0x14e>
			return ERR_DENIED;
    2e0c:	f06f 0010 	mvn.w	r0, #16
    2e10:	e7f1      	b.n	2df6 <_i2s_sync_init+0x14e>
		return ERR_ALREADY_INITIALIZED;
    2e12:	f06f 0011 	mvn.w	r0, #17
    2e16:	e7ee      	b.n	2df6 <_i2s_sync_init+0x14e>
	return ERR_NONE;
    2e18:	2000      	movs	r0, #0
    2e1a:	e7ec      	b.n	2df6 <_i2s_sync_init+0x14e>
    2e1c:	0000619c 	.word	0x0000619c
    2e20:	000061c8 	.word	0x000061c8
    2e24:	00002b35 	.word	0x00002b35
    2e28:	00002c4d 	.word	0x00002c4d
    2e2c:	00002c51 	.word	0x00002c51
    2e30:	00002c85 	.word	0x00002c85

00002e34 <_i2s_sync_enable>:
	_i2s_sync_disable(dev);
	_i2s_iface_free(hw_index, (enum _i2s_iface)dev->iface);
}

int32_t _i2s_sync_enable(struct _i2s_sync_dev *dev)
{
    2e34:	b510      	push	{r4, lr}
	I2s *   hw;
	uint8_t en_bits, ctrla;

	ASSERT(dev && dev->prvt);
    2e36:	4604      	mov	r4, r0
    2e38:	b360      	cbz	r0, 2e94 <_i2s_sync_enable+0x60>
    2e3a:	6803      	ldr	r3, [r0, #0]
    2e3c:	b343      	cbz	r3, 2e90 <_i2s_sync_enable+0x5c>
    2e3e:	2001      	movs	r0, #1
    2e40:	f44f 7289 	mov.w	r2, #274	; 0x112
    2e44:	491e      	ldr	r1, [pc, #120]	; (2ec0 <_i2s_sync_enable+0x8c>)
    2e46:	4b1f      	ldr	r3, [pc, #124]	; (2ec4 <_i2s_sync_enable+0x90>)
    2e48:	4798      	blx	r3

	hw = (I2s *)dev->prvt;
    2e4a:	6822      	ldr	r2, [r4, #0]
	return ((I2s *)hw)->SYNCBUSY.reg & reg;
    2e4c:	8b13      	ldrh	r3, [r2, #24]

	if (hri_i2s_is_syncing(hw, _I2S_CTRLA_SYNC_BITS)) {
    2e4e:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    2e52:	d12e      	bne.n	2eb2 <_i2s_sync_enable+0x7e>
		return ERR_DENIED;
	}

	if (dev->is_controller) {
    2e54:	7963      	ldrb	r3, [r4, #5]
    2e56:	f013 0f04 	tst.w	r3, #4
    2e5a:	d01d      	beq.n	2e98 <_i2s_sync_enable+0x64>
		en_bits = (I2S_CTRLA_CKEN0) << dev->iface_ctrl;
    2e5c:	f3c3 0340 	ubfx	r3, r3, #1, #1
    2e60:	2104      	movs	r1, #4
    2e62:	4099      	lsls	r1, r3
    2e64:	b2c9      	uxtb	r1, r1
	while (((I2s *)hw)->SYNCBUSY.reg & reg) {
    2e66:	8b13      	ldrh	r3, [r2, #24]
    2e68:	f003 0333 	and.w	r3, r3, #51	; 0x33
    2e6c:	2b00      	cmp	r3, #0
    2e6e:	d1fa      	bne.n	2e66 <_i2s_sync_enable+0x32>
	return ((I2s *)hw)->CTRLA.reg;
    2e70:	7813      	ldrb	r3, [r2, #0]
    2e72:	b2db      	uxtb	r3, r3
		en_bits = (I2S_CTRLA_CKEN0 << dev->iface_ctrl) | (I2S_CTRLA_TXEN << dev->iface);
	}

	ctrla = hri_i2s_read_CTRLA_reg(hw);

	if ((ctrla & en_bits) == en_bits) {
    2e74:	ea31 0003 	bics.w	r0, r1, r3
    2e78:	d01e      	beq.n	2eb8 <_i2s_sync_enable+0x84>
		return ERR_ALREADY_INITIALIZED;
	}

	ctrla |= en_bits | I2S_CTRLA_ENABLE;
    2e7a:	4319      	orrs	r1, r3
    2e7c:	f041 0102 	orr.w	r1, r1, #2
	((I2s *)hw)->CTRLA.reg = data;
    2e80:	7011      	strb	r1, [r2, #0]
	while (((I2s *)hw)->SYNCBUSY.reg & reg) {
    2e82:	8b13      	ldrh	r3, [r2, #24]
    2e84:	f003 0333 	and.w	r3, r3, #51	; 0x33
    2e88:	2b00      	cmp	r3, #0
    2e8a:	d1fa      	bne.n	2e82 <_i2s_sync_enable+0x4e>
	hri_i2s_write_CTRLA_reg(hw, ctrla);
	return ERR_NONE;
    2e8c:	2000      	movs	r0, #0
    2e8e:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    2e90:	2000      	movs	r0, #0
    2e92:	e7d5      	b.n	2e40 <_i2s_sync_enable+0xc>
    2e94:	2000      	movs	r0, #0
    2e96:	e7d3      	b.n	2e40 <_i2s_sync_enable+0xc>
		en_bits = (I2S_CTRLA_CKEN0 << dev->iface_ctrl) | (I2S_CTRLA_TXEN << dev->iface);
    2e98:	7963      	ldrb	r3, [r4, #5]
    2e9a:	f3c3 0040 	ubfx	r0, r3, #1, #1
    2e9e:	2104      	movs	r1, #4
    2ea0:	4081      	lsls	r1, r0
    2ea2:	b2c9      	uxtb	r1, r1
    2ea4:	f003 0001 	and.w	r0, r3, #1
    2ea8:	2310      	movs	r3, #16
    2eaa:	4083      	lsls	r3, r0
    2eac:	b2db      	uxtb	r3, r3
    2eae:	4319      	orrs	r1, r3
    2eb0:	e7d9      	b.n	2e66 <_i2s_sync_enable+0x32>
		return ERR_DENIED;
    2eb2:	f06f 0010 	mvn.w	r0, #16
    2eb6:	bd10      	pop	{r4, pc}
		return ERR_ALREADY_INITIALIZED;
    2eb8:	f06f 0011 	mvn.w	r0, #17
}
    2ebc:	bd10      	pop	{r4, pc}
    2ebe:	bf00      	nop
    2ec0:	000061c8 	.word	0x000061c8
    2ec4:	00002b35 	.word	0x00002b35

00002ec8 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    2ec8:	2201      	movs	r2, #1
    2eca:	4b01      	ldr	r3, [pc, #4]	; (2ed0 <_mclk_init+0x8>)
    2ecc:	715a      	strb	r2, [r3, #5]
    2ece:	4770      	bx	lr
    2ed0:	40000800 	.word	0x40000800

00002ed4 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    2ed4:	4b09      	ldr	r3, [pc, #36]	; (2efc <_osc32kctrl_init_sources+0x28>)
    2ed6:	f244 020e 	movw	r2, #16398	; 0x400e
    2eda:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    2edc:	2200      	movs	r2, #0
    2ede:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    2ee0:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    2ee2:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    2ee4:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2ee8:	61da      	str	r2, [r3, #28]
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    2eea:	4b04      	ldr	r3, [pc, #16]	; (2efc <_osc32kctrl_init_sources+0x28>)
    2eec:	68db      	ldr	r3, [r3, #12]
	);
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    2eee:	f013 0f01 	tst.w	r3, #1
    2ef2:	d0fa      	beq.n	2eea <_osc32kctrl_init_sources+0x16>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    2ef4:	2200      	movs	r2, #0
    2ef6:	4b01      	ldr	r3, [pc, #4]	; (2efc <_osc32kctrl_init_sources+0x28>)
    2ef8:	741a      	strb	r2, [r3, #16]
    2efa:	4770      	bx	lr
    2efc:	40001400 	.word	0x40001400

00002f00 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    2f00:	4770      	bx	lr
	...

00002f04 <_oscctrl_init_referenced_generators>:

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    2f04:	f640 624d 	movw	r2, #3661	; 0xe4d
    2f08:	4b1e      	ldr	r3, [pc, #120]	; (2f84 <_oscctrl_init_referenced_generators+0x80>)
    2f0a:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    2f0c:	4b1d      	ldr	r3, [pc, #116]	; (2f84 <_oscctrl_init_referenced_generators+0x80>)
    2f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2f10:	f013 0f06 	tst.w	r3, #6
    2f14:	d1fa      	bne.n	2f0c <_oscctrl_init_referenced_generators+0x8>

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    2f16:	4b1b      	ldr	r3, [pc, #108]	; (2f84 <_oscctrl_init_referenced_generators+0x80>)
    2f18:	f44f 6203 	mov.w	r2, #2096	; 0x830
    2f1c:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    2f1e:	2202      	movs	r2, #2
    2f20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    2f24:	4b17      	ldr	r3, [pc, #92]	; (2f84 <_oscctrl_init_referenced_generators+0x80>)
    2f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2f28:	f013 0f02 	tst.w	r3, #2
    2f2c:	d1fa      	bne.n	2f24 <_oscctrl_init_referenced_generators+0x20>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    2f2e:	f640 32b7 	movw	r2, #2999	; 0xbb7
    2f32:	4b14      	ldr	r3, [pc, #80]	; (2f84 <_oscctrl_init_referenced_generators+0x80>)
    2f34:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    2f36:	4b13      	ldr	r3, [pc, #76]	; (2f84 <_oscctrl_init_referenced_generators+0x80>)
    2f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2f3a:	f013 0f06 	tst.w	r3, #6
    2f3e:	d1fa      	bne.n	2f36 <_oscctrl_init_referenced_generators+0x32>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    2f40:	4b10      	ldr	r3, [pc, #64]	; (2f84 <_oscctrl_init_referenced_generators+0x80>)
    2f42:	f44f 6203 	mov.w	r2, #2096	; 0x830
    2f46:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    2f48:	2202      	movs	r2, #2
    2f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    2f4e:	4b0d      	ldr	r3, [pc, #52]	; (2f84 <_oscctrl_init_referenced_generators+0x80>)
    2f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2f52:	f013 0f02 	tst.w	r3, #2
    2f56:	d1fa      	bne.n	2f4e <_oscctrl_init_referenced_generators+0x4a>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    2f58:	4b0a      	ldr	r3, [pc, #40]	; (2f84 <_oscctrl_init_referenced_generators+0x80>)
    2f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    2f5c:	f013 0f01 	tst.w	r3, #1
    2f60:	d104      	bne.n	2f6c <_oscctrl_init_referenced_generators+0x68>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    2f62:	4b08      	ldr	r3, [pc, #32]	; (2f84 <_oscctrl_init_referenced_generators+0x80>)
    2f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2f66:	f013 0f02 	tst.w	r3, #2
    2f6a:	d0f5      	beq.n	2f58 <_oscctrl_init_referenced_generators+0x54>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    2f6c:	4b05      	ldr	r3, [pc, #20]	; (2f84 <_oscctrl_init_referenced_generators+0x80>)
    2f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    2f70:	f013 0f01 	tst.w	r3, #1
    2f74:	d104      	bne.n	2f80 <_oscctrl_init_referenced_generators+0x7c>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    2f76:	4b03      	ldr	r3, [pc, #12]	; (2f84 <_oscctrl_init_referenced_generators+0x80>)
    2f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    2f7a:	f013 0f02 	tst.w	r3, #2
    2f7e:	d0f5      	beq.n	2f6c <_oscctrl_init_referenced_generators+0x68>
    2f80:	4770      	bx	lr
    2f82:	bf00      	nop
    2f84:	40001000 	.word	0x40001000

00002f88 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2f88:	b500      	push	{lr}
    2f8a:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    2f8c:	4b0d      	ldr	r3, [pc, #52]	; (2fc4 <RAMECC_Handler+0x3c>)
    2f8e:	789b      	ldrb	r3, [r3, #2]
    2f90:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    2f92:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2f94:	9b01      	ldr	r3, [sp, #4]
    2f96:	f013 0f02 	tst.w	r3, #2
    2f9a:	d006      	beq.n	2faa <RAMECC_Handler+0x22>
    2f9c:	4b0a      	ldr	r3, [pc, #40]	; (2fc8 <RAMECC_Handler+0x40>)
    2f9e:	681b      	ldr	r3, [r3, #0]
    2fa0:	b11b      	cbz	r3, 2faa <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    2fa2:	4a08      	ldr	r2, [pc, #32]	; (2fc4 <RAMECC_Handler+0x3c>)
    2fa4:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2fa6:	4798      	blx	r3
    2fa8:	e009      	b.n	2fbe <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    2faa:	9b01      	ldr	r3, [sp, #4]
    2fac:	f013 0f01 	tst.w	r3, #1
    2fb0:	d005      	beq.n	2fbe <RAMECC_Handler+0x36>
    2fb2:	4b05      	ldr	r3, [pc, #20]	; (2fc8 <RAMECC_Handler+0x40>)
    2fb4:	685b      	ldr	r3, [r3, #4]
    2fb6:	b113      	cbz	r3, 2fbe <RAMECC_Handler+0x36>
    2fb8:	4a02      	ldr	r2, [pc, #8]	; (2fc4 <RAMECC_Handler+0x3c>)
    2fba:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2fbc:	4798      	blx	r3
	} else {
		return;
	}
}
    2fbe:	b003      	add	sp, #12
    2fc0:	f85d fb04 	ldr.w	pc, [sp], #4
    2fc4:	41020000 	.word	0x41020000
    2fc8:	20000a60 	.word	0x20000a60

00002fcc <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    2fcc:	b510      	push	{r4, lr}
    2fce:	4604      	mov	r4, r0
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    2fd0:	6802      	ldr	r2, [r0, #0]
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    2fd2:	8991      	ldrh	r1, [r2, #12]
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    2fd4:	8953      	ldrh	r3, [r2, #10]
    2fd6:	b29b      	uxth	r3, r3
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    2fd8:	400b      	ands	r3, r1
    2fda:	f413 7f80 	tst.w	r3, #256	; 0x100
    2fde:	d103      	bne.n	2fe8 <_rtc_interrupt_handler+0x1c>
		dev->callback(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    2fe0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    2fe4:	d107      	bne.n	2ff6 <_rtc_interrupt_handler+0x2a>
    2fe6:	bd10      	pop	{r4, pc}
		dev->callback(dev);
    2fe8:	6843      	ldr	r3, [r0, #4]
    2fea:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    2fec:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    2fee:	f44f 7280 	mov.w	r2, #256	; 0x100
    2ff2:	819a      	strh	r2, [r3, #12]
    2ff4:	bd10      	pop	{r4, pc}
		dev->callback_tamper(dev);
    2ff6:	6883      	ldr	r3, [r0, #8]
    2ff8:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    2ffa:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    2ffc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3000:	819a      	strh	r2, [r3, #12]
	}
}
    3002:	e7f0      	b.n	2fe6 <_rtc_interrupt_handler+0x1a>

00003004 <_calendar_init>:
{
    3004:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    3006:	4604      	mov	r4, r0
    3008:	2800      	cmp	r0, #0
    300a:	d044      	beq.n	3096 <_calendar_init+0x92>
    300c:	6803      	ldr	r3, [r0, #0]
    300e:	2b00      	cmp	r3, #0
    3010:	d03f      	beq.n	3092 <_calendar_init+0x8e>
    3012:	2001      	movs	r0, #1
    3014:	222f      	movs	r2, #47	; 0x2f
    3016:	4921      	ldr	r1, [pc, #132]	; (309c <_calendar_init+0x98>)
    3018:	4b21      	ldr	r3, [pc, #132]	; (30a0 <_calendar_init+0x9c>)
    301a:	4798      	blx	r3
	_rtc_dev = dev;
    301c:	4b21      	ldr	r3, [pc, #132]	; (30a4 <_calendar_init+0xa0>)
    301e:	601c      	str	r4, [r3, #0]
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    3020:	6823      	ldr	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    3022:	691a      	ldr	r2, [r3, #16]
    3024:	f012 0f01 	tst.w	r2, #1
    3028:	d1fb      	bne.n	3022 <_calendar_init+0x1e>
    302a:	6919      	ldr	r1, [r3, #16]
    302c:	f248 0203 	movw	r2, #32771	; 0x8003
    3030:	4211      	tst	r1, r2
    3032:	d1fa      	bne.n	302a <_calendar_init+0x26>

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    3034:	881a      	ldrh	r2, [r3, #0]
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    3036:	f012 0f02 	tst.w	r2, #2
    303a:	d00f      	beq.n	305c <_calendar_init+0x58>
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    303c:	881a      	ldrh	r2, [r3, #0]
    303e:	b292      	uxth	r2, r2
    3040:	f022 0202 	bic.w	r2, r2, #2
    3044:	b292      	uxth	r2, r2
    3046:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    3048:	6919      	ldr	r1, [r3, #16]
    304a:	f248 0203 	movw	r2, #32771	; 0x8003
    304e:	4211      	tst	r1, r2
    3050:	d1fa      	bne.n	3048 <_calendar_init+0x44>
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    3052:	6822      	ldr	r2, [r4, #0]
    3054:	6913      	ldr	r3, [r2, #16]
    3056:	f013 0f02 	tst.w	r3, #2
    305a:	d1fb      	bne.n	3054 <_calendar_init+0x50>
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    305c:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    305e:	8813      	ldrh	r3, [r2, #0]
    3060:	b29b      	uxth	r3, r3
    3062:	f043 0301 	orr.w	r3, r3, #1
    3066:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    3068:	6913      	ldr	r3, [r2, #16]
    306a:	f013 0f01 	tst.w	r3, #1
    306e:	d1fb      	bne.n	3068 <_calendar_init+0x64>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    3070:	6823      	ldr	r3, [r4, #0]
    3072:	691a      	ldr	r2, [r3, #16]
    3074:	f012 0f01 	tst.w	r2, #1
    3078:	d1fb      	bne.n	3072 <_calendar_init+0x6e>
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    307a:	f44f 4201 	mov.w	r2, #33024	; 0x8100
    307e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    3080:	6919      	ldr	r1, [r3, #16]
    3082:	f248 0203 	movw	r2, #32771	; 0x8003
    3086:	4211      	tst	r1, r2
    3088:	d1fa      	bne.n	3080 <_calendar_init+0x7c>
	    dev->hw,
    308a:	6823      	ldr	r3, [r4, #0]
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    308c:	2000      	movs	r0, #0
    308e:	6618      	str	r0, [r3, #96]	; 0x60
}
    3090:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
    3092:	2000      	movs	r0, #0
    3094:	e7be      	b.n	3014 <_calendar_init+0x10>
    3096:	2000      	movs	r0, #0
    3098:	e7bc      	b.n	3014 <_calendar_init+0x10>
    309a:	bf00      	nop
    309c:	000061e0 	.word	0x000061e0
    30a0:	00002b35 	.word	0x00002b35
    30a4:	200000f8 	.word	0x200000f8

000030a8 <_calendar_get_counter>:
{
    30a8:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    30aa:	4604      	mov	r4, r0
    30ac:	b178      	cbz	r0, 30ce <_calendar_get_counter+0x26>
    30ae:	6803      	ldr	r3, [r0, #0]
    30b0:	b15b      	cbz	r3, 30ca <_calendar_get_counter+0x22>
    30b2:	2001      	movs	r0, #1
    30b4:	229a      	movs	r2, #154	; 0x9a
    30b6:	4907      	ldr	r1, [pc, #28]	; (30d4 <_calendar_get_counter+0x2c>)
    30b8:	4b07      	ldr	r3, [pc, #28]	; (30d8 <_calendar_get_counter+0x30>)
    30ba:	4798      	blx	r3
	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    30bc:	6822      	ldr	r2, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    30be:	6913      	ldr	r3, [r2, #16]
    30c0:	f013 0f08 	tst.w	r3, #8
    30c4:	d1fb      	bne.n	30be <_calendar_get_counter+0x16>
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    30c6:	6990      	ldr	r0, [r2, #24]
}
    30c8:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
    30ca:	2000      	movs	r0, #0
    30cc:	e7f2      	b.n	30b4 <_calendar_get_counter+0xc>
    30ce:	2000      	movs	r0, #0
    30d0:	e7f0      	b.n	30b4 <_calendar_get_counter+0xc>
    30d2:	bf00      	nop
    30d4:	000061e0 	.word	0x000061e0
    30d8:	00002b35 	.word	0x00002b35

000030dc <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    30dc:	b508      	push	{r3, lr}
	_rtc_interrupt_handler(_rtc_dev);
    30de:	4b02      	ldr	r3, [pc, #8]	; (30e8 <RTC_Handler+0xc>)
    30e0:	6818      	ldr	r0, [r3, #0]
    30e2:	4b02      	ldr	r3, [pc, #8]	; (30ec <RTC_Handler+0x10>)
    30e4:	4798      	blx	r3
    30e6:	bd08      	pop	{r3, pc}
    30e8:	200000f8 	.word	0x200000f8
    30ec:	00002fcd 	.word	0x00002fcd

000030f0 <_mci_set_speed>:
 * \param hw       The pointer to MCI hardware instance
 * \param speed    SDHC clock speed in Hz.
 * \param prog_clock_mode     Use programmable clock mode
 */
static void _mci_set_speed(const void *const hw, uint32_t speed, uint8_t prog_clock_mode)
{
    30f0:	b410      	push	{r4}
}

static inline bool hri_sdhc_get_CCR_SDCLKEN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((Sdhc *)hw)->CCR.reg;
    30f2:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	uint32_t div;
	uint32_t clkbase;
	uint32_t clkmul;

	if (hri_sdhc_get_CCR_SDCLKEN_bit(hw)) {
    30f4:	f013 0f04 	tst.w	r3, #4
    30f8:	d009      	beq.n	310e <_mci_set_speed+0x1e>
	return ((Sdhc *)hw)->PSR.reg;
    30fa:	6a44      	ldr	r4, [r0, #36]	; 0x24
		while (hri_sdhc_read_PSR_reg(hw) & (SDHC_PSR_CMDINHC_CANNOT | SDHC_PSR_CMDINHD_CANNOT))
    30fc:	f014 0f03 	tst.w	r4, #3
    3100:	d1fb      	bne.n	30fa <_mci_set_speed+0xa>
}

static inline void hri_sdhc_clear_CCR_SDCLKEN_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_SDCLKEN;
    3102:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    3104:	b2a4      	uxth	r4, r4
    3106:	f024 0404 	bic.w	r4, r4, #4
    310a:	b2a4      	uxth	r4, r4
    310c:	8584      	strh	r4, [r0, #44]	; 0x2c
	return (((Sdhc *)hw)->CA1R.reg & SDHC_CA1R_CLKMULT_Msk) >> SDHC_CA1R_CLKMULT_Pos;
    310e:	6c44      	ldr	r4, [r0, #68]	; 0x44
    3110:	f3c4 4407 	ubfx	r4, r4, #16, #8
	//	clkbase = hri_sdhc_read_CA0R_BASECLKF_bf(hw);
	clkbase = CONF_BASE_FREQUENCY;
	clkmul  = hri_sdhc_read_CA1R_CLKMULT_bf(hw);

	/* If programmable clock mode is enabled, baseclk is divided by 2 */
	if (clkmul > 0) {
    3114:	2c00      	cmp	r4, #0
    3116:	d135      	bne.n	3184 <_mci_set_speed+0x94>
	clkbase = CONF_BASE_FREQUENCY;
    3118:	4b22      	ldr	r3, [pc, #136]	; (31a4 <_mci_set_speed+0xb4>)
		clkbase = clkbase / 2;
	}
	if (prog_clock_mode == 0) {
    311a:	2a00      	cmp	r2, #0
    311c:	d134      	bne.n	3188 <_mci_set_speed+0x98>
}

static inline void hri_sdhc_clear_CCR_CLKGSEL_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_CLKGSEL;
    311e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    3120:	b292      	uxth	r2, r2
    3122:	f022 0220 	bic.w	r2, r2, #32
    3126:	b292      	uxth	r2, r2
    3128:	8582      	strh	r2, [r0, #44]	; 0x2c
		/* divided clock mode */
		hri_sdhc_clear_CCR_CLKGSEL_bit(hw);
		/* speed = Base Clock / 2*div */
		div = (clkbase / speed) / 2;
    312a:	fbb3 f1f1 	udiv	r1, r3, r1
    312e:	0849      	lsrs	r1, r1, #1
	tmp = ((Sdhc *)hw)->HC1R.reg;
    3130:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
		}
	}

	/* Specific constraint for SDHC/SDMMC IP
	The clock divider (DIV) in SDMMC_CCR must be set to a value different from 0 when HSEN is 1. */
	if ((hri_sdhc_get_HC1R_HSEN_bit(hw)) && (div == 0)) {
    3134:	f013 0f04 	tst.w	r3, #4
    3138:	d001      	beq.n	313e <_mci_set_speed+0x4e>
    313a:	b901      	cbnz	r1, 313e <_mci_set_speed+0x4e>
		div = 1;
    313c:	2101      	movs	r1, #1
	}

	/* Set clock divider */
	hri_sdhc_write_CCR_SDCLKFSEL_bf(hw, div & 0xFF);
    313e:	b28a      	uxth	r2, r1

static inline void hri_sdhc_write_CCR_SDCLKFSEL_bf(const void *const hw, hri_sdhc_ccr_reg_t data)
{
	uint16_t tmp;
	SDHC_CRITICAL_SECTION_ENTER();
	tmp = ((Sdhc *)hw)->CCR.reg;
    3140:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	tmp &= ~SDHC_CCR_SDCLKFSEL_Msk;
    3142:	b2db      	uxtb	r3, r3
	tmp |= SDHC_CCR_SDCLKFSEL(data);
    3144:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3148:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->CCR.reg = tmp;
    314a:	8583      	strh	r3, [r0, #44]	; 0x2c
	hri_sdhc_write_CCR_USDCLKFSEL_bf(hw, div >> 8);
    314c:	f3c1 210f 	ubfx	r1, r1, #8, #16
	tmp = ((Sdhc *)hw)->CCR.reg;
    3150:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    3152:	b29b      	uxth	r3, r3
	tmp &= ~SDHC_CCR_USDCLKFSEL_Msk;
    3154:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
	tmp |= SDHC_CCR_USDCLKFSEL(data);
    3158:	0189      	lsls	r1, r1, #6
    315a:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    315e:	4319      	orrs	r1, r3
	((Sdhc *)hw)->CCR.reg = tmp;
    3160:	8581      	strh	r1, [r0, #44]	; 0x2c
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_INTCLKEN;
    3162:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    3164:	b29b      	uxth	r3, r3
    3166:	f043 0301 	orr.w	r3, r3, #1
    316a:	8583      	strh	r3, [r0, #44]	; 0x2c
	tmp = ((Sdhc *)hw)->CCR.reg;
    316c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c

	hri_sdhc_set_CCR_INTCLKEN_bit(hw);
	/* Repeat this step until Clock Stable is 1 */
	while (hri_sdhc_get_CCR_INTCLKS_bit(hw) == 0)
    316e:	f013 0f02 	tst.w	r3, #2
    3172:	d0fb      	beq.n	316c <_mci_set_speed+0x7c>
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_SDCLKEN;
    3174:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    3176:	b29b      	uxth	r3, r3
    3178:	f043 0304 	orr.w	r3, r3, #4
    317c:	8583      	strh	r3, [r0, #44]	; 0x2c
		;
	/* Output the clock to the card -- Set SD Clock Enable */
	hri_sdhc_set_CCR_SDCLKEN_bit(hw);
}
    317e:	f85d 4b04 	ldr.w	r4, [sp], #4
    3182:	4770      	bx	lr
		clkbase = clkbase / 2;
    3184:	4b08      	ldr	r3, [pc, #32]	; (31a8 <_mci_set_speed+0xb8>)
    3186:	e7c8      	b.n	311a <_mci_set_speed+0x2a>
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_CLKGSEL;
    3188:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    318a:	b292      	uxth	r2, r2
    318c:	f042 0220 	orr.w	r2, r2, #32
    3190:	8582      	strh	r2, [r0, #44]	; 0x2c
		div = (clkbase * (clkmul + 1)) / speed;
    3192:	fb04 3303 	mla	r3, r4, r3, r3
    3196:	fbb3 f1f1 	udiv	r1, r3, r1
		if (div > 0) {
    319a:	2900      	cmp	r1, #0
    319c:	d0c8      	beq.n	3130 <_mci_set_speed+0x40>
			div = div - 1;
    319e:	3901      	subs	r1, #1
    31a0:	e7c6      	b.n	3130 <_mci_set_speed+0x40>
    31a2:	bf00      	nop
    31a4:	00b71999 	.word	0x00b71999
    31a8:	005b8ccc 	.word	0x005b8ccc

000031ac <_mci_reset>:
{
    31ac:	b510      	push	{r4, lr}
	ASSERT(hw);
    31ae:	4604      	mov	r4, r0
    31b0:	2235      	movs	r2, #53	; 0x35
    31b2:	4906      	ldr	r1, [pc, #24]	; (31cc <_mci_reset+0x20>)
    31b4:	3000      	adds	r0, #0
    31b6:	bf18      	it	ne
    31b8:	2001      	movne	r0, #1
    31ba:	4b05      	ldr	r3, [pc, #20]	; (31d0 <_mci_reset+0x24>)
    31bc:	4798      	blx	r3
}

static inline void hri_sdhc_set_SRR_SWRSTCMD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTCMD;
    31be:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    31c2:	f043 0302 	orr.w	r3, r3, #2
    31c6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    31ca:	bd10      	pop	{r4, pc}
    31cc:	000061f8 	.word	0x000061f8
    31d0:	00002b35 	.word	0x00002b35

000031d4 <_mci_wait_busy>:
 *
 * \param hw       The pointer to MCI hardware instance
 * \return true if success, otherwise false
 */
static bool _mci_wait_busy(const void *const hw)
{
    31d4:	b510      	push	{r4, lr}
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t psr;

	ASSERT(hw);
    31d6:	4604      	mov	r4, r0
    31d8:	2280      	movs	r2, #128	; 0x80
    31da:	490b      	ldr	r1, [pc, #44]	; (3208 <_mci_wait_busy+0x34>)
    31dc:	3000      	adds	r0, #0
    31de:	bf18      	it	ne
    31e0:	2001      	movne	r0, #1
    31e2:	4b0a      	ldr	r3, [pc, #40]	; (320c <_mci_wait_busy+0x38>)
    31e4:	4798      	blx	r3
	uint32_t busy_wait = 0xFFFFFFFF;
    31e6:	f04f 33ff 	mov.w	r3, #4294967295
	return ((Sdhc *)hw)->PSR.reg;
    31ea:	6a62      	ldr	r2, [r4, #36]	; 0x24

	do {
		psr = hri_sdhc_read_PSR_reg(hw);

		if (busy_wait-- == 0) {
    31ec:	1e59      	subs	r1, r3, #1
    31ee:	b12b      	cbz	r3, 31fc <_mci_wait_busy+0x28>
    31f0:	460b      	mov	r3, r1
			_mci_reset(hw);
			return false;
		}
	} while (!(psr & SDHC_PSR_DATLL(1)));
    31f2:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    31f6:	d0f8      	beq.n	31ea <_mci_wait_busy+0x16>
	return true;
    31f8:	2001      	movs	r0, #1
}
    31fa:	bd10      	pop	{r4, pc}
			_mci_reset(hw);
    31fc:	4620      	mov	r0, r4
    31fe:	4b04      	ldr	r3, [pc, #16]	; (3210 <_mci_wait_busy+0x3c>)
    3200:	4798      	blx	r3
			return false;
    3202:	2000      	movs	r0, #0
    3204:	bd10      	pop	{r4, pc}
    3206:	bf00      	nop
    3208:	000061f8 	.word	0x000061f8
    320c:	00002b35 	.word	0x00002b35
    3210:	000031ad 	.word	0x000031ad

00003214 <_mci_send_cmd_execute>:
 * \param arg        Argument of the command
 *
 * \return true if success, otherwise false
 */
static bool _mci_send_cmd_execute(const void *const hw, uint32_t cmdr, uint32_t cmd, uint32_t arg)
{
    3214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3218:	4688      	mov	r8, r1
    321a:	4615      	mov	r5, r2
    321c:	461f      	mov	r7, r3
	uint32_t sr;
	ASSERT(hw);
    321e:	4604      	mov	r4, r0
    3220:	229a      	movs	r2, #154	; 0x9a
    3222:	4939      	ldr	r1, [pc, #228]	; (3308 <_mci_send_cmd_execute+0xf4>)
    3224:	3000      	adds	r0, #0
    3226:	bf18      	it	ne
    3228:	2001      	movne	r0, #1
    322a:	4b38      	ldr	r3, [pc, #224]	; (330c <_mci_send_cmd_execute+0xf8>)
    322c:	4798      	blx	r3

	cmdr |= SDHC_CR_CMDIDX(cmd) | SDHC_CR_CMDTYP_NORMAL;
    322e:	022e      	lsls	r6, r5, #8
    3230:	f406 567c 	and.w	r6, r6, #16128	; 0x3f00
    3234:	ea46 0608 	orr.w	r6, r6, r8

	if (cmd & MCI_RESP_PRESENT) {
    3238:	f415 7f80 	tst.w	r5, #256	; 0x100
    323c:	d004      	beq.n	3248 <_mci_send_cmd_execute+0x34>

		if (cmd & MCI_RESP_136) {
    323e:	f415 6f00 	tst.w	r5, #2048	; 0x800
    3242:	d013      	beq.n	326c <_mci_send_cmd_execute+0x58>
			cmdr |= SDHC_CR_RESPTYP_136_BIT;
    3244:	f046 0601 	orr.w	r6, r6, #1
		} else {
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
		}
	}

	if (cmd & MCI_CMD_OPENDRAIN) {
    3248:	f415 4f80 	tst.w	r5, #16384	; 0x4000
    324c:	d017      	beq.n	327e <_mci_send_cmd_execute+0x6a>
}

static inline void hri_sdhc_set_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg |= SDHC_MC1R_OPD;
    324e:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    3252:	f043 0310 	orr.w	r3, r3, #16
    3256:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
	((Sdhc *)hw)->ARG1R.reg = data;
    325a:	60a7      	str	r7, [r4, #8]
	} else {
		hri_sdhc_clear_MC1R_OPD_bit(hw);
	}

	hri_sdhc_write_ARG1R_reg(hw, arg);
	delay_us(10);
    325c:	200a      	movs	r0, #10
    325e:	4f2c      	ldr	r7, [pc, #176]	; (3310 <_mci_send_cmd_execute+0xfc>)
    3260:	47b8      	blx	r7
	hri_sdhc_write_CR_reg(hw, cmdr);
    3262:	b2b3      	uxth	r3, r6
	((Sdhc *)hw)->CR.reg = data;
    3264:	81e3      	strh	r3, [r4, #14]
	delay_us(10);
    3266:	200a      	movs	r0, #10
    3268:	47b8      	blx	r7
    326a:	e017      	b.n	329c <_mci_send_cmd_execute+0x88>
		} else if (cmd & MCI_RESP_BUSY) {
    326c:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    3270:	d002      	beq.n	3278 <_mci_send_cmd_execute+0x64>
			cmdr |= SDHC_CR_RESPTYP_48_BIT_BUSY;
    3272:	f046 0603 	orr.w	r6, r6, #3
    3276:	e7e7      	b.n	3248 <_mci_send_cmd_execute+0x34>
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
    3278:	f046 0602 	orr.w	r6, r6, #2
    327c:	e7e4      	b.n	3248 <_mci_send_cmd_execute+0x34>
}

static inline void hri_sdhc_clear_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg &= ~SDHC_MC1R_OPD;
    327e:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    3282:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    3286:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
    328a:	e7e6      	b.n	325a <_mci_send_cmd_execute+0x46>
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		} else {
			if (sr
    328c:	f240 227f 	movw	r2, #639	; 0x27f
    3290:	4213      	tst	r3, r2
    3292:	d119      	bne.n	32c8 <_mci_send_cmd_execute+0xb4>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    3294:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		}
	} while (!hri_sdhc_get_NISTR_CMDC_bit(hw));
    3296:	f013 0f01 	tst.w	r3, #1
    329a:	d122      	bne.n	32e2 <_mci_send_cmd_execute+0xce>
	return ((Sdhc *)hw)->EISTR.reg;
    329c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    329e:	b29b      	uxth	r3, r3
		if (cmd & MCI_RESP_CRC) {
    32a0:	f415 5f80 	tst.w	r5, #4096	; 0x1000
    32a4:	d0f2      	beq.n	328c <_mci_send_cmd_execute+0x78>
			if (sr
    32a6:	f240 225d 	movw	r2, #605	; 0x25d
    32aa:	4213      	tst	r3, r2
    32ac:	d0f2      	beq.n	3294 <_mci_send_cmd_execute+0x80>
				_mci_reset(hw);
    32ae:	4620      	mov	r0, r4
    32b0:	4b18      	ldr	r3, [pc, #96]	; (3314 <_mci_send_cmd_execute+0x100>)
    32b2:	4798      	blx	r3
	((Sdhc *)hw)->EISTR.reg |= mask;
    32b4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    32b6:	b29b      	uxth	r3, r3
    32b8:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    32bc:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    32c0:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    32c2:	2000      	movs	r0, #0
    32c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				_mci_reset(hw);
    32c8:	4620      	mov	r0, r4
    32ca:	4b12      	ldr	r3, [pc, #72]	; (3314 <_mci_send_cmd_execute+0x100>)
    32cc:	4798      	blx	r3
    32ce:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    32d0:	b29b      	uxth	r3, r3
    32d2:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    32d6:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    32da:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    32dc:	2000      	movs	r0, #0
    32de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(cmdr & SDHC_CR_DPSEL_DATA)) {
    32e2:	f016 0f20 	tst.w	r6, #32
    32e6:	d104      	bne.n	32f2 <_mci_send_cmd_execute+0xde>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_CMDC;
    32e8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    32ea:	b29b      	uxth	r3, r3
    32ec:	f043 0301 	orr.w	r3, r3, #1
    32f0:	8623      	strh	r3, [r4, #48]	; 0x30
		hri_sdhc_set_NISTR_CMDC_bit(hw);
	}
	if (cmd & MCI_RESP_BUSY) {
    32f2:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    32f6:	d102      	bne.n	32fe <_mci_send_cmd_execute+0xea>
		if (!_mci_wait_busy(hw)) {
			return false;
		}
	}

	return true;
    32f8:	2001      	movs	r0, #1
}
    32fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!_mci_wait_busy(hw)) {
    32fe:	4620      	mov	r0, r4
    3300:	4b05      	ldr	r3, [pc, #20]	; (3318 <_mci_send_cmd_execute+0x104>)
    3302:	4798      	blx	r3
    3304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3308:	000061f8 	.word	0x000061f8
    330c:	00002b35 	.word	0x00002b35
    3310:	0000265d 	.word	0x0000265d
    3314:	000031ad 	.word	0x000031ad
    3318:	000031d5 	.word	0x000031d5

0000331c <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
    331c:	b538      	push	{r3, r4, r5, lr}
    331e:	460c      	mov	r4, r1
	ASSERT(mci_dev && hw);
    3320:	4605      	mov	r5, r0
    3322:	b348      	cbz	r0, 3378 <_mci_sync_init+0x5c>
    3324:	b331      	cbz	r1, 3374 <_mci_sync_init+0x58>
    3326:	2001      	movs	r0, #1
    3328:	22db      	movs	r2, #219	; 0xdb
    332a:	4914      	ldr	r1, [pc, #80]	; (337c <_mci_sync_init+0x60>)
    332c:	4b14      	ldr	r3, [pc, #80]	; (3380 <_mci_sync_init+0x64>)
    332e:	4798      	blx	r3

	mci_dev->hw = hw;
    3330:	602c      	str	r4, [r5, #0]
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTALL;
    3332:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    3336:	f043 0301 	orr.w	r3, r3, #1
    333a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	tmp = ((Sdhc *)hw)->SRR.reg;
    333e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f

	hri_sdhc_set_SRR_SWRSTALL_bit(hw);
	while (hri_sdhc_get_SRR_SWRSTALL_bit(hw))
    3342:	f013 0f01 	tst.w	r3, #1
    3346:	d1fa      	bne.n	333e <_mci_sync_init+0x22>
	((Sdhc *)hw)->TCR.reg = data;
    3348:	230e      	movs	r3, #14
    334a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	((Sdhc *)hw)->PCR.reg = data;
    334e:	230f      	movs	r3, #15
    3350:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	((Sdhc *)hw)->NISTER.reg |= mask;
    3354:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3356:	b29b      	uxth	r3, r3
    3358:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    335c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    3360:	86a3      	strh	r3, [r4, #52]	; 0x34
	((Sdhc *)hw)->EISTER.reg |= mask;
    3362:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    3364:	b29b      	uxth	r3, r3
    3366:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    336a:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    336e:	86e3      	strh	r3, [r4, #54]	; 0x36

	hri_sdhc_set_NISTER_reg(hw, SDHC_NISTER_MASK);
	hri_sdhc_set_EISTER_reg(hw, SDHC_EISTER_MASK);

	return ERR_NONE;
}
    3370:	2000      	movs	r0, #0
    3372:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci_dev && hw);
    3374:	2000      	movs	r0, #0
    3376:	e7d7      	b.n	3328 <_mci_sync_init+0xc>
    3378:	2000      	movs	r0, #0
    337a:	e7d5      	b.n	3328 <_mci_sync_init+0xc>
    337c:	000061f8 	.word	0x000061f8
    3380:	00002b35 	.word	0x00002b35

00003384 <_mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t _mci_sync_select_device(struct _mci_sync_device *const mci_dev, uint8_t slot, uint32_t clock, uint8_t bus_width,
                                bool high_speed)
{
    3384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3386:	4616      	mov	r6, r2
    3388:	461d      	mov	r5, r3
    338a:	f89d 7018 	ldrb.w	r7, [sp, #24]
	(void)(slot);
	void *hw;

	ASSERT(mci_dev && mci_dev->hw);
    338e:	4604      	mov	r4, r0
    3390:	b1e0      	cbz	r0, 33cc <_mci_sync_select_device+0x48>
    3392:	6803      	ldr	r3, [r0, #0]
    3394:	b1c3      	cbz	r3, 33c8 <_mci_sync_select_device+0x44>
    3396:	2001      	movs	r0, #1
    3398:	f240 1203 	movw	r2, #259	; 0x103
    339c:	491b      	ldr	r1, [pc, #108]	; (340c <_mci_sync_select_device+0x88>)
    339e:	4b1c      	ldr	r3, [pc, #112]	; (3410 <_mci_sync_select_device+0x8c>)
    33a0:	4798      	blx	r3
	hw = mci_dev->hw;
    33a2:	6824      	ldr	r4, [r4, #0]

	if (high_speed) {
    33a4:	b1a7      	cbz	r7, 33d0 <_mci_sync_select_device+0x4c>
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_HSEN;
    33a6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    33aa:	f043 0304 	orr.w	r3, r3, #4
    33ae:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	tmp = ((Sdhc *)hw)->HC2R.reg;
    33b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
		hri_sdhc_set_HC1R_HSEN_bit(hw);
	} else {
		hri_sdhc_clear_HC1R_HSEN_bit(hw);
	}

	if (hri_sdhc_get_HC2R_PVALEN_bit(hw) == 0) {
    33b4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    33b8:	d011      	beq.n	33de <_mci_sync_select_device+0x5a>
		_mci_set_speed(hw, clock, CONF_SDHC1_CLK_GEN_SEL);
	}

	switch (bus_width) {
    33ba:	2d01      	cmp	r5, #1
    33bc:	d015      	beq.n	33ea <_mci_sync_select_device+0x66>
    33be:	2d04      	cmp	r5, #4
    33c0:	d01b      	beq.n	33fa <_mci_sync_select_device+0x76>
	case 4:
		hri_sdhc_set_HC1R_DW_bit(hw);
		break;

	default:
		return ERR_INVALID_ARG;
    33c2:	f06f 000c 	mvn.w	r0, #12
	}

	return ERR_NONE;
}
    33c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(mci_dev && mci_dev->hw);
    33c8:	2000      	movs	r0, #0
    33ca:	e7e5      	b.n	3398 <_mci_sync_select_device+0x14>
    33cc:	2000      	movs	r0, #0
    33ce:	e7e3      	b.n	3398 <_mci_sync_select_device+0x14>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_HSEN;
    33d0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    33d4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    33d8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    33dc:	e7e9      	b.n	33b2 <_mci_sync_select_device+0x2e>
		_mci_set_speed(hw, clock, CONF_SDHC1_CLK_GEN_SEL);
    33de:	2200      	movs	r2, #0
    33e0:	4631      	mov	r1, r6
    33e2:	4620      	mov	r0, r4
    33e4:	4b0b      	ldr	r3, [pc, #44]	; (3414 <_mci_sync_select_device+0x90>)
    33e6:	4798      	blx	r3
    33e8:	e7e7      	b.n	33ba <_mci_sync_select_device+0x36>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_DW;
    33ea:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    33ee:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    33f2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	return ERR_NONE;
    33f6:	2000      	movs	r0, #0
    33f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_DW;
    33fa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    33fe:	f043 0302 	orr.w	r3, r3, #2
    3402:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    3406:	2000      	movs	r0, #0
    3408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    340a:	bf00      	nop
    340c:	000061f8 	.word	0x000061f8
    3410:	00002b35 	.word	0x00002b35
    3414:	000030f1 	.word	0x000030f1

00003418 <_mci_sync_deselect_device>:
	/* Nothing to do */
	(void)(mci_dev);
	(void)(slot);

	return ERR_NONE;
}
    3418:	2000      	movs	r0, #0
    341a:	4770      	bx	lr

0000341c <_mci_sync_get_bus_width>:
 */
uint8_t _mci_sync_get_bus_width(struct _mci_sync_device *const mci_dev, uint8_t slot)
{
	(void)(mci_dev);

	switch (slot) {
    341c:	b909      	cbnz	r1, 3422 <_mci_sync_get_bus_width+0x6>
	case 0:
		return HSMCI_SLOT_0_SIZE;
    341e:	2004      	movs	r0, #4
    3420:	4770      	bx	lr

	default:
		/* Slot number wrong */
		return 0;
    3422:	2000      	movs	r0, #0
	}
}
    3424:	4770      	bx	lr

00003426 <_mci_sync_is_high_speed_capable>:
/**
 *  \brief Get the high speed capability of the device.
 */
bool _mci_sync_is_high_speed_capable(struct _mci_sync_device *const mci_dev)
{
	return hri_sdhc_get_CA0R_HSSUP_bit(mci_dev->hw);
    3426:	6803      	ldr	r3, [r0, #0]
	return (((Sdhc *)hw)->CA0R.reg & SDHC_CA0R_HSSUP) >> SDHC_CA0R_HSSUP_Pos;
    3428:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    342a:	f3c0 5040 	ubfx	r0, r0, #21, #1
    342e:	4770      	bx	lr

00003430 <_mci_sync_send_clock>:
/**
 *  \brief Send 74 clock cycles on the line.
 *   Note: It is required after card plug and before card install.
 */
void _mci_sync_send_clock(struct _mci_sync_device *const mci_dev)
{
    3430:	b500      	push	{lr}
    3432:	b083      	sub	sp, #12
	ASSERT(mci_dev);
    3434:	f44f 72a6 	mov.w	r2, #332	; 0x14c
    3438:	4909      	ldr	r1, [pc, #36]	; (3460 <_mci_sync_send_clock+0x30>)
    343a:	3000      	adds	r0, #0
    343c:	bf18      	it	ne
    343e:	2001      	movne	r0, #1
    3440:	4b08      	ldr	r3, [pc, #32]	; (3464 <_mci_sync_send_clock+0x34>)
    3442:	4798      	blx	r3

	volatile uint32_t i;
	for (i = 0; i < 5000; i++)
    3444:	2300      	movs	r3, #0
    3446:	9301      	str	r3, [sp, #4]
    3448:	e002      	b.n	3450 <_mci_sync_send_clock+0x20>
    344a:	9b01      	ldr	r3, [sp, #4]
    344c:	3301      	adds	r3, #1
    344e:	9301      	str	r3, [sp, #4]
    3450:	9a01      	ldr	r2, [sp, #4]
    3452:	f241 3387 	movw	r3, #4999	; 0x1387
    3456:	429a      	cmp	r2, r3
    3458:	d9f7      	bls.n	344a <_mci_sync_send_clock+0x1a>
		;
}
    345a:	b003      	add	sp, #12
    345c:	f85d fb04 	ldr.w	pc, [sp], #4
    3460:	000061f8 	.word	0x000061f8
    3464:	00002b35 	.word	0x00002b35

00003468 <_mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool _mci_sync_send_cmd(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg)
{
    3468:	b570      	push	{r4, r5, r6, lr}
    346a:	460d      	mov	r5, r1
    346c:	4616      	mov	r6, r2
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    346e:	4604      	mov	r4, r0
    3470:	b180      	cbz	r0, 3494 <_mci_sync_send_cmd+0x2c>
    3472:	6803      	ldr	r3, [r0, #0]
    3474:	b163      	cbz	r3, 3490 <_mci_sync_send_cmd+0x28>
    3476:	2001      	movs	r0, #1
    3478:	f240 1259 	movw	r2, #345	; 0x159
    347c:	490d      	ldr	r1, [pc, #52]	; (34b4 <_mci_sync_send_cmd+0x4c>)
    347e:	4b0e      	ldr	r3, [pc, #56]	; (34b8 <_mci_sync_send_cmd+0x50>)
    3480:	4798      	blx	r3
	hw = mci_dev->hw;
    3482:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    3484:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* Check Command Inhibit (CMD) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw)) {
    3486:	f013 0f01 	tst.w	r3, #1
    348a:	d005      	beq.n	3498 <_mci_sync_send_cmd+0x30>
		return false;
    348c:	2000      	movs	r0, #0

	hri_sdhc_clear_TMR_DMAEN_bit(hw);
	hri_sdhc_write_BCR_reg(hw, 0);

	return _mci_send_cmd_execute(hw, 0, cmd, arg);
}
    348e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci_dev && mci_dev->hw);
    3490:	2000      	movs	r0, #0
    3492:	e7f1      	b.n	3478 <_mci_sync_send_cmd+0x10>
    3494:	2000      	movs	r0, #0
    3496:	e7ef      	b.n	3478 <_mci_sync_send_cmd+0x10>
	((Sdhc *)hw)->TMR.reg &= ~SDHC_TMR_DMAEN;
    3498:	8983      	ldrh	r3, [r0, #12]
    349a:	b29b      	uxth	r3, r3
    349c:	f023 0301 	bic.w	r3, r3, #1
    34a0:	b29b      	uxth	r3, r3
    34a2:	8183      	strh	r3, [r0, #12]
	((Sdhc *)hw)->BCR.reg = data;
    34a4:	2100      	movs	r1, #0
    34a6:	80c1      	strh	r1, [r0, #6]
	return _mci_send_cmd_execute(hw, 0, cmd, arg);
    34a8:	4633      	mov	r3, r6
    34aa:	462a      	mov	r2, r5
    34ac:	4c03      	ldr	r4, [pc, #12]	; (34bc <_mci_sync_send_cmd+0x54>)
    34ae:	47a0      	blx	r4
    34b0:	bd70      	pop	{r4, r5, r6, pc}
    34b2:	bf00      	nop
    34b4:	000061f8 	.word	0x000061f8
    34b8:	00002b35 	.word	0x00002b35
    34bc:	00003215 	.word	0x00003215

000034c0 <_mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t _mci_sync_get_response(struct _mci_sync_device *const mci_dev)
{
    34c0:	b510      	push	{r4, lr}
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    34c2:	4604      	mov	r4, r0
    34c4:	b160      	cbz	r0, 34e0 <_mci_sync_get_response+0x20>
    34c6:	6803      	ldr	r3, [r0, #0]
    34c8:	b143      	cbz	r3, 34dc <_mci_sync_get_response+0x1c>
    34ca:	2001      	movs	r0, #1
    34cc:	f240 126d 	movw	r2, #365	; 0x16d
    34d0:	4904      	ldr	r1, [pc, #16]	; (34e4 <_mci_sync_get_response+0x24>)
    34d2:	4b05      	ldr	r3, [pc, #20]	; (34e8 <_mci_sync_get_response+0x28>)
    34d4:	4798      	blx	r3
	hw = mci_dev->hw;
    34d6:	6823      	ldr	r3, [r4, #0]
	return ((Sdhc *)hw)->RR[index].reg;
    34d8:	6918      	ldr	r0, [r3, #16]

	return hri_sdhc_read_RR_reg(hw, 0);
}
    34da:	bd10      	pop	{r4, pc}
	ASSERT(mci_dev && mci_dev->hw);
    34dc:	2000      	movs	r0, #0
    34de:	e7f5      	b.n	34cc <_mci_sync_get_response+0xc>
    34e0:	2000      	movs	r0, #0
    34e2:	e7f3      	b.n	34cc <_mci_sync_get_response+0xc>
    34e4:	000061f8 	.word	0x000061f8
    34e8:	00002b35 	.word	0x00002b35

000034ec <_mci_sync_get_response_128>:

/**
 *  \brief Get 128 bits response of the last command.
 */
void _mci_sync_get_response_128(struct _mci_sync_device *const mci_dev, uint8_t *response)
{
    34ec:	b538      	push	{r3, r4, r5, lr}
    34ee:	460c      	mov	r4, r1
	uint32_t response_32;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    34f0:	4605      	mov	r5, r0
    34f2:	b160      	cbz	r0, 350e <_mci_sync_get_response_128+0x22>
    34f4:	6803      	ldr	r3, [r0, #0]
    34f6:	b143      	cbz	r3, 350a <_mci_sync_get_response_128+0x1e>
    34f8:	2001      	movs	r0, #1
    34fa:	f44f 72bd 	mov.w	r2, #378	; 0x17a
    34fe:	490f      	ldr	r1, [pc, #60]	; (353c <_mci_sync_get_response_128+0x50>)
    3500:	4b0f      	ldr	r3, [pc, #60]	; (3540 <_mci_sync_get_response_128+0x54>)
    3502:	4798      	blx	r3
	hw = mci_dev->hw;
    3504:	6828      	ldr	r0, [r5, #0]

	for (int8_t i = 3; i >= 0; i--) {
    3506:	2103      	movs	r1, #3
    3508:	e00b      	b.n	3522 <_mci_sync_get_response_128+0x36>
	ASSERT(mci_dev && mci_dev->hw);
    350a:	2000      	movs	r0, #0
    350c:	e7f5      	b.n	34fa <_mci_sync_get_response_128+0xe>
    350e:	2000      	movs	r0, #0
    3510:	e7f3      	b.n	34fa <_mci_sync_get_response_128+0xe>
		response_32 = hri_sdhc_read_RR_reg(hw, i);
		if (i != 3) {
			*response = (response_32 >> 24) & 0xFF;
			response++;
		}
		*response = (response_32 >> 16) & 0xFF;
    3512:	0c11      	lsrs	r1, r2, #16
    3514:	7021      	strb	r1, [r4, #0]
		response++;
		*response = (response_32 >> 8) & 0xFF;
    3516:	0a11      	lsrs	r1, r2, #8
    3518:	7061      	strb	r1, [r4, #1]
		response++;
		*response = (response_32 >> 0) & 0xFF;
    351a:	70a2      	strb	r2, [r4, #2]
		response++;
    351c:	3403      	adds	r4, #3
	for (int8_t i = 3; i >= 0; i--) {
    351e:	3b01      	subs	r3, #1
    3520:	b259      	sxtb	r1, r3
    3522:	2900      	cmp	r1, #0
    3524:	db09      	blt.n	353a <_mci_sync_get_response_128+0x4e>
		response_32 = hri_sdhc_read_RR_reg(hw, i);
    3526:	b2cb      	uxtb	r3, r1
    3528:	1d1a      	adds	r2, r3, #4
    352a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if (i != 3) {
    352e:	2903      	cmp	r1, #3
    3530:	d0ef      	beq.n	3512 <_mci_sync_get_response_128+0x26>
			*response = (response_32 >> 24) & 0xFF;
    3532:	0e11      	lsrs	r1, r2, #24
    3534:	f804 1b01 	strb.w	r1, [r4], #1
    3538:	e7eb      	b.n	3512 <_mci_sync_get_response_128+0x26>
	}
}
    353a:	bd38      	pop	{r3, r4, r5, pc}
    353c:	000061f8 	.word	0x000061f8
    3540:	00002b35 	.word	0x00002b35

00003544 <_mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool _mci_sync_adtc_start(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg, uint16_t block_size,
                          uint16_t nb_block, bool access_block)
{
    3544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3548:	460d      	mov	r5, r1
    354a:	4690      	mov	r8, r2
    354c:	461f      	mov	r7, r3
    354e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	uint32_t tmr;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    3552:	4604      	mov	r4, r0
    3554:	2800      	cmp	r0, #0
    3556:	d031      	beq.n	35bc <_mci_sync_adtc_start+0x78>
    3558:	6803      	ldr	r3, [r0, #0]
    355a:	b36b      	cbz	r3, 35b8 <_mci_sync_adtc_start+0x74>
    355c:	2001      	movs	r0, #1
    355e:	f44f 72cb 	mov.w	r2, #406	; 0x196
    3562:	4921      	ldr	r1, [pc, #132]	; (35e8 <_mci_sync_adtc_start+0xa4>)
    3564:	4b21      	ldr	r3, [pc, #132]	; (35ec <_mci_sync_adtc_start+0xa8>)
    3566:	4798      	blx	r3
	hw = mci_dev->hw;
    3568:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    356a:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* No use without dma support */
	(void)access_block;

	/* Check Command Inhibit (CMD/DAT) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw) || hri_sdhc_get_PSR_CMDINHD_bit(hw)) {
    356c:	f013 0f01 	tst.w	r3, #1
    3570:	d131      	bne.n	35d6 <_mci_sync_adtc_start+0x92>
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHD) >> SDHC_PSR_CMDINHD_Pos;
    3572:	6a43      	ldr	r3, [r0, #36]	; 0x24
    3574:	f013 0f02 	tst.w	r3, #2
    3578:	d130      	bne.n	35dc <_mci_sync_adtc_start+0x98>
		return false;
	}

	if (cmd & MCI_CMD_WRITE) {
    357a:	f415 4f00 	tst.w	r5, #32768	; 0x8000
    357e:	d01f      	beq.n	35c0 <_mci_sync_adtc_start+0x7c>
		tmr = SDHC_TMR_DTDSEL_WRITE;
    3580:	2300      	movs	r3, #0
	} else {
		tmr = SDHC_TMR_DTDSEL_READ;
	}

	if (cmd & MCI_CMD_SDIO_BYTE) {
    3582:	f415 3f80 	tst.w	r5, #65536	; 0x10000
    3586:	d104      	bne.n	3592 <_mci_sync_adtc_start+0x4e>
		tmr |= SDHC_TMR_MSBSEL_SINGLE;
	} else if (cmd & MCI_CMD_SDIO_BLOCK) {
    3588:	f415 3f00 	tst.w	r5, #131072	; 0x20000
    358c:	d01a      	beq.n	35c4 <_mci_sync_adtc_start+0x80>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    358e:	f043 0322 	orr.w	r3, r3, #34	; 0x22
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
	} else {
		return false;
	}
	hri_sdhc_write_TMR_reg(hw, tmr);
    3592:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->TMR.reg = data;
    3594:	8183      	strh	r3, [r0, #12]
	hri_sdhc_write_BSR_reg(hw, SDHC_BSR_BLOCKSIZE(block_size) | SDHC_BSR_BOUNDARY_4K);
    3596:	f3c7 0309 	ubfx	r3, r7, #0, #10
	((Sdhc *)hw)->BSR.reg = data;
    359a:	8083      	strh	r3, [r0, #4]
	((Sdhc *)hw)->BCR.reg = data;
    359c:	80c6      	strh	r6, [r0, #6]
	hri_sdhc_write_BCR_reg(hw, SDHC_BCR_BCNT(nb_block));

	mci_dev->mci_sync_trans_pos  = 0;
    359e:	2200      	movs	r2, #0
    35a0:	2300      	movs	r3, #0
    35a2:	e9c4 2302 	strd	r2, r3, [r4, #8]
	mci_dev->mci_sync_block_size = block_size;
    35a6:	8227      	strh	r7, [r4, #16]
	mci_dev->mci_sync_nb_block   = nb_block;
    35a8:	8266      	strh	r6, [r4, #18]

	return _mci_send_cmd_execute(hw, SDHC_CR_DPSEL_DATA, cmd, arg);
    35aa:	4643      	mov	r3, r8
    35ac:	462a      	mov	r2, r5
    35ae:	2120      	movs	r1, #32
    35b0:	4c0f      	ldr	r4, [pc, #60]	; (35f0 <_mci_sync_adtc_start+0xac>)
    35b2:	47a0      	blx	r4
    35b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(mci_dev && mci_dev->hw);
    35b8:	2000      	movs	r0, #0
    35ba:	e7d0      	b.n	355e <_mci_sync_adtc_start+0x1a>
    35bc:	2000      	movs	r0, #0
    35be:	e7ce      	b.n	355e <_mci_sync_adtc_start+0x1a>
		tmr = SDHC_TMR_DTDSEL_READ;
    35c0:	2310      	movs	r3, #16
    35c2:	e7de      	b.n	3582 <_mci_sync_adtc_start+0x3e>
	} else if (cmd & MCI_CMD_SINGLE_BLOCK) {
    35c4:	f415 2f00 	tst.w	r5, #524288	; 0x80000
    35c8:	d1e3      	bne.n	3592 <_mci_sync_adtc_start+0x4e>
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
    35ca:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
    35ce:	d008      	beq.n	35e2 <_mci_sync_adtc_start+0x9e>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    35d0:	f043 0322 	orr.w	r3, r3, #34	; 0x22
    35d4:	e7dd      	b.n	3592 <_mci_sync_adtc_start+0x4e>
		return false;
    35d6:	2000      	movs	r0, #0
    35d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35dc:	2000      	movs	r0, #0
    35de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    35e2:	2000      	movs	r0, #0
}
    35e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35e8:	000061f8 	.word	0x000061f8
    35ec:	00002b35 	.word	0x00002b35
    35f0:	00003215 	.word	0x00003215

000035f4 <_mci_sync_read_word>:

/**
 *  \brief Read a word on the line.
 */
bool _mci_sync_read_word(struct _mci_sync_device *const mci_dev, uint32_t *value)
{
    35f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    35f8:	460f      	mov	r7, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    35fa:	4605      	mov	r5, r0
    35fc:	2800      	cmp	r0, #0
    35fe:	d05d      	beq.n	36bc <_mci_sync_read_word+0xc8>
    3600:	6803      	ldr	r3, [r0, #0]
    3602:	2b00      	cmp	r3, #0
    3604:	d058      	beq.n	36b8 <_mci_sync_read_word+0xc4>
    3606:	2001      	movs	r0, #1
    3608:	f240 12d3 	movw	r2, #467	; 0x1d3
    360c:	4936      	ldr	r1, [pc, #216]	; (36e8 <_mci_sync_read_word+0xf4>)
    360e:	4b37      	ldr	r3, [pc, #220]	; (36ec <_mci_sync_read_word+0xf8>)
    3610:	4798      	blx	r3
	hw = mci_dev->hw;
    3612:	682c      	ldr	r4, [r5, #0]

	/* Wait data available */
	nbytes = (mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block - mci_dev->mci_sync_trans_pos < 4)
    3614:	8a2a      	ldrh	r2, [r5, #16]
    3616:	f8b5 8012 	ldrh.w	r8, [r5, #18]
    361a:	fb08 f802 	mul.w	r8, r8, r2
    361e:	ea4f 79e8 	mov.w	r9, r8, asr #31
    3622:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    3626:	ebb8 0800 	subs.w	r8, r8, r0
    362a:	eb69 0901 	sbc.w	r9, r9, r1
    362e:	f1b9 0f00 	cmp.w	r9, #0
    3632:	bf08      	it	eq
    3634:	f1b8 0f04 	cmpeq.w	r8, #4
    3638:	d242      	bcs.n	36c0 <_mci_sync_read_word+0xcc>
    363a:	f002 0603 	and.w	r6, r2, #3
	             ? (mci_dev->mci_sync_block_size % 4)
	             : 4;

	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    363e:	b292      	uxth	r2, r2
    3640:	2300      	movs	r3, #0
    3642:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 36f4 <_mci_sync_read_word+0x100>
    3646:	47c0      	blx	r8
    3648:	4313      	orrs	r3, r2
    364a:	d10d      	bne.n	3668 <_mci_sync_read_word+0x74>
	return ((Sdhc *)hw)->EISTR.reg;
    364c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		do {
			sr = hri_sdhc_read_EISTR_reg(hw);

			if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    364e:	f003 0370 	and.w	r3, r3, #112	; 0x70
    3652:	2b00      	cmp	r3, #0
    3654:	d136      	bne.n	36c4 <_mci_sync_read_word+0xd0>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    3656:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				return false;
			}
		} while (!hri_sdhc_get_NISTR_BRDRDY_bit(hw));
    3658:	f013 0f20 	tst.w	r3, #32
    365c:	d0f6      	beq.n	364c <_mci_sync_read_word+0x58>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BRDRDY;
    365e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3660:	b29b      	uxth	r3, r3
    3662:	f043 0320 	orr.w	r3, r3, #32
    3666:	8623      	strh	r3, [r4, #48]	; 0x30
		hri_sdhc_set_NISTR_BRDRDY_bit(hw);
	}

	/* Read data */
	if (nbytes == 4) {
    3668:	2e04      	cmp	r6, #4
    366a:	d031      	beq.n	36d0 <_mci_sync_read_word+0xdc>
	return ((Sdhc *)hw)->BDPR.reg;
    366c:	6a23      	ldr	r3, [r4, #32]
		*value = hri_sdhc_read_BDPR_reg(hw);
	} else {
		sr = hri_sdhc_read_BDPR_reg(hw);
		switch (nbytes) {
    366e:	1e72      	subs	r2, r6, #1
    3670:	2a02      	cmp	r2, #2
    3672:	d801      	bhi.n	3678 <_mci_sync_read_word+0x84>
		case 3:
			value[0] = sr & 0xFFFFFF;
		case 2:
			value[0] = sr & 0xFFFF;
		case 1:
			value[0] = sr & 0xFF;
    3674:	b2db      	uxtb	r3, r3
    3676:	603b      	str	r3, [r7, #0]
			break;
		}
	}
	mci_dev->mci_sync_trans_pos += nbytes;
    3678:	b2f6      	uxtb	r6, r6
    367a:	2700      	movs	r7, #0
    367c:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    3680:	18b6      	adds	r6, r6, r2
    3682:	415f      	adcs	r7, r3
    3684:	e9c5 6702 	strd	r6, r7, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    3688:	8a2a      	ldrh	r2, [r5, #16]
    368a:	8a68      	ldrh	r0, [r5, #18]
    368c:	fba2 2300 	umull	r2, r3, r2, r0
    3690:	429f      	cmp	r7, r3
    3692:	bf08      	it	eq
    3694:	4296      	cmpeq	r6, r2
    3696:	d324      	bcc.n	36e2 <_mci_sync_read_word+0xee>
	return ((Sdhc *)hw)->EISTR.reg;
    3698:	8e63      	ldrh	r3, [r4, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    369a:	f003 0370 	and.w	r3, r3, #112	; 0x70
    369e:	b9d3      	cbnz	r3, 36d6 <_mci_sync_read_word+0xe2>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    36a0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    36a2:	f013 0f02 	tst.w	r3, #2
    36a6:	d0f7      	beq.n	3698 <_mci_sync_read_word+0xa4>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    36a8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    36aa:	b29b      	uxth	r3, r3
    36ac:	f043 0302 	orr.w	r3, r3, #2
    36b0:	8623      	strh	r3, [r4, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	
	return true;
    36b2:	2001      	movs	r0, #1
    36b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(mci_dev && mci_dev->hw);
    36b8:	2000      	movs	r0, #0
    36ba:	e7a5      	b.n	3608 <_mci_sync_read_word+0x14>
    36bc:	2000      	movs	r0, #0
    36be:	e7a3      	b.n	3608 <_mci_sync_read_word+0x14>
	nbytes = (mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block - mci_dev->mci_sync_trans_pos < 4)
    36c0:	2604      	movs	r6, #4
    36c2:	e7bc      	b.n	363e <_mci_sync_read_word+0x4a>
				_mci_reset(hw);
    36c4:	4620      	mov	r0, r4
    36c6:	4b0a      	ldr	r3, [pc, #40]	; (36f0 <_mci_sync_read_word+0xfc>)
    36c8:	4798      	blx	r3
				return false;
    36ca:	2000      	movs	r0, #0
    36cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return ((Sdhc *)hw)->BDPR.reg;
    36d0:	6a23      	ldr	r3, [r4, #32]
		*value = hri_sdhc_read_BDPR_reg(hw);
    36d2:	603b      	str	r3, [r7, #0]
    36d4:	e7d0      	b.n	3678 <_mci_sync_read_word+0x84>
			_mci_reset(hw);
    36d6:	4620      	mov	r0, r4
    36d8:	4b05      	ldr	r3, [pc, #20]	; (36f0 <_mci_sync_read_word+0xfc>)
    36da:	4798      	blx	r3
			return false;
    36dc:	2000      	movs	r0, #0
    36de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true;
    36e2:	2001      	movs	r0, #1
}
    36e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    36e8:	000061f8 	.word	0x000061f8
    36ec:	00002b35 	.word	0x00002b35
    36f0:	000031ad 	.word	0x000031ad
    36f4:	00004a69 	.word	0x00004a69

000036f8 <_mci_sync_write_word>:

/**
 *  \brief Write a word on the line
 */
bool _mci_sync_write_word(struct _mci_sync_device *const mci_dev, uint32_t value)
{
    36f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36fa:	460f      	mov	r7, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    36fc:	4605      	mov	r5, r0
    36fe:	2800      	cmp	r0, #0
    3700:	d03f      	beq.n	3782 <_mci_sync_write_word+0x8a>
    3702:	6803      	ldr	r3, [r0, #0]
    3704:	2b00      	cmp	r3, #0
    3706:	d03a      	beq.n	377e <_mci_sync_write_word+0x86>
    3708:	2001      	movs	r0, #1
    370a:	f240 2213 	movw	r2, #531	; 0x213
    370e:	4924      	ldr	r1, [pc, #144]	; (37a0 <_mci_sync_write_word+0xa8>)
    3710:	4b24      	ldr	r3, [pc, #144]	; (37a4 <_mci_sync_write_word+0xac>)
    3712:	4798      	blx	r3
	hw = mci_dev->hw;
    3714:	682c      	ldr	r4, [r5, #0]

	/* Wait data available */
	nbytes = 4; //( mci_dev->mci_sync_block_size & 0x3 ) ? 1 : 4;
	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    3716:	8a2a      	ldrh	r2, [r5, #16]
    3718:	2300      	movs	r3, #0
    371a:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    371e:	4e22      	ldr	r6, [pc, #136]	; (37a8 <_mci_sync_write_word+0xb0>)
    3720:	47b0      	blx	r6
    3722:	4313      	orrs	r3, r2
    3724:	d10c      	bne.n	3740 <_mci_sync_write_word+0x48>
	return ((Sdhc *)hw)->EISTR.reg;
    3726:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		do {
			sr = hri_sdhc_read_EISTR_reg(hw);

			if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    3728:	f003 0370 	and.w	r3, r3, #112	; 0x70
    372c:	bb5b      	cbnz	r3, 3786 <_mci_sync_write_word+0x8e>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    372e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				return false;
			}
		} while (!hri_sdhc_get_NISTR_BWRRDY_bit(hw));
    3730:	f013 0f10 	tst.w	r3, #16
    3734:	d0f7      	beq.n	3726 <_mci_sync_write_word+0x2e>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BWRRDY;
    3736:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3738:	b29b      	uxth	r3, r3
    373a:	f043 0310 	orr.w	r3, r3, #16
    373e:	8623      	strh	r3, [r4, #48]	; 0x30
	((Sdhc *)hw)->BDPR.reg = data;
    3740:	6227      	str	r7, [r4, #32]
		hri_sdhc_set_NISTR_BWRRDY_bit(hw);
	}
	/* Write data */
	hri_sdhc_write_BDPR_reg(hw, value);
	mci_dev->mci_sync_trans_pos += nbytes;
    3742:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    3746:	3204      	adds	r2, #4
    3748:	f143 0300 	adc.w	r3, r3, #0
    374c:	e9c5 2302 	strd	r2, r3, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    3750:	8a28      	ldrh	r0, [r5, #16]
    3752:	8a6e      	ldrh	r6, [r5, #18]
    3754:	fba0 0106 	umull	r0, r1, r0, r6
    3758:	428b      	cmp	r3, r1
    375a:	bf08      	it	eq
    375c:	4282      	cmpeq	r2, r0
    375e:	d31c      	bcc.n	379a <_mci_sync_write_word+0xa2>
	return ((Sdhc *)hw)->EISTR.reg;
    3760:	8e63      	ldrh	r3, [r4, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    3762:	f003 0370 	and.w	r3, r3, #112	; 0x70
    3766:	b99b      	cbnz	r3, 3790 <_mci_sync_write_word+0x98>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    3768:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    376a:	f013 0f02 	tst.w	r3, #2
    376e:	d0f7      	beq.n	3760 <_mci_sync_write_word+0x68>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    3770:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3772:	b29b      	uxth	r3, r3
    3774:	f043 0302 	orr.w	r3, r3, #2
    3778:	8623      	strh	r3, [r4, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	return true;
    377a:	2001      	movs	r0, #1
    377c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(mci_dev && mci_dev->hw);
    377e:	2000      	movs	r0, #0
    3780:	e7c3      	b.n	370a <_mci_sync_write_word+0x12>
    3782:	2000      	movs	r0, #0
    3784:	e7c1      	b.n	370a <_mci_sync_write_word+0x12>
				_mci_reset(hw);
    3786:	4620      	mov	r0, r4
    3788:	4b08      	ldr	r3, [pc, #32]	; (37ac <_mci_sync_write_word+0xb4>)
    378a:	4798      	blx	r3
				return false;
    378c:	2000      	movs	r0, #0
    378e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			_mci_reset(hw);
    3790:	4620      	mov	r0, r4
    3792:	4b06      	ldr	r3, [pc, #24]	; (37ac <_mci_sync_write_word+0xb4>)
    3794:	4798      	blx	r3
			return false;
    3796:	2000      	movs	r0, #0
    3798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
    379a:	2001      	movs	r0, #1
}
    379c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    379e:	bf00      	nop
    37a0:	000061f8 	.word	0x000061f8
    37a4:	00002b35 	.word	0x00002b35
    37a8:	00004a69 	.word	0x00004a69
    37ac:	000031ad 	.word	0x000031ad

000037b0 <_mci_sync_read_block_512>:

bool _mci_sync_read_block_512(struct _mci_sync_device *const mci_dev, uint32_t *value)
{
    37b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37b2:	460c      	mov	r4, r1
	int i;
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    37b4:	4605      	mov	r5, r0
    37b6:	b1c8      	cbz	r0, 37ec <_mci_sync_read_block_512+0x3c>
    37b8:	6803      	ldr	r3, [r0, #0]
    37ba:	b1ab      	cbz	r3, 37e8 <_mci_sync_read_block_512+0x38>
    37bc:	2001      	movs	r0, #1
    37be:	f240 223f 	movw	r2, #575	; 0x23f
    37c2:	4923      	ldr	r1, [pc, #140]	; (3850 <_mci_sync_read_block_512+0xa0>)
    37c4:	4b23      	ldr	r3, [pc, #140]	; (3854 <_mci_sync_read_block_512+0xa4>)
    37c6:	4798      	blx	r3
	hw = mci_dev->hw;
    37c8:	6828      	ldr	r0, [r5, #0]
	return ((Sdhc *)hw)->EISTR.reg;
    37ca:	8e43      	ldrh	r3, [r0, #50]	; 0x32
	/* Wait data available */
	
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    37cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    37d0:	b973      	cbnz	r3, 37f0 <_mci_sync_read_block_512+0x40>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    37d2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_BRDRDY_bit(hw));
    37d4:	f013 0f20 	tst.w	r3, #32
    37d8:	d0f7      	beq.n	37ca <_mci_sync_read_block_512+0x1a>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BRDRDY;
    37da:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    37dc:	b29b      	uxth	r3, r3
    37de:	f043 0320 	orr.w	r3, r3, #32
    37e2:	8603      	strh	r3, [r0, #48]	; 0x30
	hri_sdhc_set_NISTR_BRDRDY_bit(hw);

	/* Read data */
	for (i = 0; i < 128; i++) {
    37e4:	2300      	movs	r3, #0
    37e6:	e00b      	b.n	3800 <_mci_sync_read_block_512+0x50>
	ASSERT(mci_dev && mci_dev->hw);
    37e8:	2000      	movs	r0, #0
    37ea:	e7e8      	b.n	37be <_mci_sync_read_block_512+0xe>
    37ec:	2000      	movs	r0, #0
    37ee:	e7e6      	b.n	37be <_mci_sync_read_block_512+0xe>
			_mci_reset(hw);
    37f0:	4b19      	ldr	r3, [pc, #100]	; (3858 <_mci_sync_read_block_512+0xa8>)
    37f2:	4798      	blx	r3
			return false;
    37f4:	2000      	movs	r0, #0
    37f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return ((Sdhc *)hw)->BDPR.reg;
    37f8:	6a02      	ldr	r2, [r0, #32]
		*value++ = hri_sdhc_read_BDPR_reg(hw);
    37fa:	6022      	str	r2, [r4, #0]
	for (i = 0; i < 128; i++) {
    37fc:	3301      	adds	r3, #1
		*value++ = hri_sdhc_read_BDPR_reg(hw);
    37fe:	3404      	adds	r4, #4
	for (i = 0; i < 128; i++) {
    3800:	2b7f      	cmp	r3, #127	; 0x7f
    3802:	ddf9      	ble.n	37f8 <_mci_sync_read_block_512+0x48>
	}
	mci_dev->mci_sync_trans_pos += 512;
    3804:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    3808:	f512 7200 	adds.w	r2, r2, #512	; 0x200
    380c:	f143 0300 	adc.w	r3, r3, #0
    3810:	e9c5 2302 	strd	r2, r3, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    3814:	8a2e      	ldrh	r6, [r5, #16]
    3816:	8a6c      	ldrh	r4, [r5, #18]
    3818:	fba6 4504 	umull	r4, r5, r6, r4
    381c:	42ab      	cmp	r3, r5
    381e:	bf08      	it	eq
    3820:	42a2      	cmpeq	r2, r4
    3822:	d312      	bcc.n	384a <_mci_sync_read_block_512+0x9a>
	return ((Sdhc *)hw)->EISTR.reg;
    3824:	8e43      	ldrh	r3, [r0, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    3826:	f003 0370 	and.w	r3, r3, #112	; 0x70
    382a:	b953      	cbnz	r3, 3842 <_mci_sync_read_block_512+0x92>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    382c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    382e:	f013 0f02 	tst.w	r3, #2
    3832:	d0f7      	beq.n	3824 <_mci_sync_read_block_512+0x74>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    3834:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    3836:	b29b      	uxth	r3, r3
    3838:	f043 0302 	orr.w	r3, r3, #2
    383c:	8603      	strh	r3, [r0, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	
	return true;
    383e:	2001      	movs	r0, #1
    3840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			_mci_reset(hw);
    3842:	4b05      	ldr	r3, [pc, #20]	; (3858 <_mci_sync_read_block_512+0xa8>)
    3844:	4798      	blx	r3
			return false;
    3846:	2000      	movs	r0, #0
    3848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
    384a:	2001      	movs	r0, #1
}
    384c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    384e:	bf00      	nop
    3850:	000061f8 	.word	0x000061f8
    3854:	00002b35 	.word	0x00002b35
    3858:	000031ad 	.word	0x000031ad

0000385c <_mci_sync_start_read_blocks>:
/**
 *  \brief Start a read blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_read_blocks(struct _mci_sync_device *const mci_dev, void *dst, uint16_t nb_block)
{
    385c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3860:	460e      	mov	r6, r1
    3862:	4614      	mov	r4, r2
	uint32_t nb_data;
	uint8_t *ptr    = (uint8_t *)dst;
	uint8_t  nbytes = 4;

	ASSERT(mci_dev && mci_dev->hw);
    3864:	4607      	mov	r7, r0
    3866:	b300      	cbz	r0, 38aa <_mci_sync_start_read_blocks+0x4e>
    3868:	6803      	ldr	r3, [r0, #0]
    386a:	b1e3      	cbz	r3, 38a6 <_mci_sync_start_read_blocks+0x4a>
    386c:	2001      	movs	r0, #1
    386e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 390c <_mci_sync_start_read_blocks+0xb0>
    3872:	f240 2271 	movw	r2, #625	; 0x271
    3876:	4641      	mov	r1, r8
    3878:	4d21      	ldr	r5, [pc, #132]	; (3900 <_mci_sync_start_read_blocks+0xa4>)
    387a:	47a8      	blx	r5
	ASSERT(nb_block);
    387c:	f240 2272 	movw	r2, #626	; 0x272
    3880:	4641      	mov	r1, r8
    3882:	1c20      	adds	r0, r4, #0
    3884:	bf18      	it	ne
    3886:	2001      	movne	r0, #1
    3888:	47a8      	blx	r5
	ASSERT(dst);
    388a:	f240 2273 	movw	r2, #627	; 0x273
    388e:	4641      	mov	r1, r8
    3890:	1c30      	adds	r0, r6, #0
    3892:	bf18      	it	ne
    3894:	2001      	movne	r0, #1
    3896:	47a8      	blx	r5
	//ASSERT(nb_block == 1);
	//ASSERT(mci_dev->mci_sync_block_size == 512);
	//ASSERT((mci_dev->mci_sync_trans_pos & 0x1FF) == 0x0);

	nb_data = nb_block * mci_dev->mci_sync_block_size;
    3898:	8a3b      	ldrh	r3, [r7, #16]
    389a:	fb03 f504 	mul.w	r5, r3, r4

	if ((nb_block == 1) && (mci_dev->mci_sync_block_size == 512) && ((mci_dev->mci_sync_trans_pos & 0x1FF) == 0x0)) {
    389e:	2c01      	cmp	r4, #1
    38a0:	d005      	beq.n	38ae <_mci_sync_start_read_blocks+0x52>
    38a2:	2404      	movs	r4, #4
    38a4:	e01c      	b.n	38e0 <_mci_sync_start_read_blocks+0x84>
	ASSERT(mci_dev && mci_dev->hw);
    38a6:	2000      	movs	r0, #0
    38a8:	e7e1      	b.n	386e <_mci_sync_start_read_blocks+0x12>
    38aa:	2000      	movs	r0, #0
    38ac:	e7df      	b.n	386e <_mci_sync_start_read_blocks+0x12>
	if ((nb_block == 1) && (mci_dev->mci_sync_block_size == 512) && ((mci_dev->mci_sync_trans_pos & 0x1FF) == 0x0)) {
    38ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    38b2:	d001      	beq.n	38b8 <_mci_sync_start_read_blocks+0x5c>
    38b4:	2404      	movs	r4, #4
    38b6:	e013      	b.n	38e0 <_mci_sync_start_read_blocks+0x84>
    38b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    38bc:	f240 10ff 	movw	r0, #511	; 0x1ff
    38c0:	2100      	movs	r1, #0
    38c2:	4002      	ands	r2, r0
    38c4:	400b      	ands	r3, r1
    38c6:	4313      	orrs	r3, r2
    38c8:	d001      	beq.n	38ce <_mci_sync_start_read_blocks+0x72>
    38ca:	2404      	movs	r4, #4
    38cc:	e008      	b.n	38e0 <_mci_sync_start_read_blocks+0x84>
		_mci_sync_read_block_512 (mci_dev, (uint32_t *)ptr);
    38ce:	4631      	mov	r1, r6
    38d0:	4638      	mov	r0, r7
    38d2:	4b0c      	ldr	r3, [pc, #48]	; (3904 <_mci_sync_start_read_blocks+0xa8>)
    38d4:	4798      	blx	r3
			ptr += nbytes;
		}
	}
	
	return true;
}
    38d6:	2001      	movs	r0, #1
    38d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			nb_data -= nbytes;
    38dc:	1b2d      	subs	r5, r5, r4
			ptr += nbytes;
    38de:	4426      	add	r6, r4
		while (nb_data) {
    38e0:	2d00      	cmp	r5, #0
    38e2:	d0f8      	beq.n	38d6 <_mci_sync_start_read_blocks+0x7a>
			_mci_sync_read_word(mci_dev, (uint32_t *)ptr);
    38e4:	4631      	mov	r1, r6
    38e6:	4638      	mov	r0, r7
    38e8:	4b07      	ldr	r3, [pc, #28]	; (3908 <_mci_sync_start_read_blocks+0xac>)
    38ea:	4798      	blx	r3
			if (nb_data < nbytes) {
    38ec:	42a5      	cmp	r5, r4
    38ee:	d2f5      	bcs.n	38dc <_mci_sync_start_read_blocks+0x80>
				nbytes = mci_dev->mci_sync_block_size % nbytes;
    38f0:	8a3b      	ldrh	r3, [r7, #16]
    38f2:	fb93 f2f4 	sdiv	r2, r3, r4
    38f6:	fb04 3412 	mls	r4, r4, r2, r3
    38fa:	b2e4      	uxtb	r4, r4
    38fc:	e7ee      	b.n	38dc <_mci_sync_start_read_blocks+0x80>
    38fe:	bf00      	nop
    3900:	00002b35 	.word	0x00002b35
    3904:	000037b1 	.word	0x000037b1
    3908:	000035f5 	.word	0x000035f5
    390c:	000061f8 	.word	0x000061f8

00003910 <_mci_sync_start_write_blocks>:
/**
 *  \brief Start a write blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_write_blocks(struct _mci_sync_device *const mci_dev, const void *src, uint16_t nb_block)
{
    3910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3914:	460e      	mov	r6, r1
    3916:	4690      	mov	r8, r2
	uint32_t nb_data;
	uint8_t *ptr    = (uint8_t *)src;
	uint8_t  nbytes = 4;

	ASSERT(mci_dev && mci_dev->hw);
    3918:	4607      	mov	r7, r0
    391a:	b1f0      	cbz	r0, 395a <_mci_sync_start_write_blocks+0x4a>
    391c:	6803      	ldr	r3, [r0, #0]
    391e:	b1d3      	cbz	r3, 3956 <_mci_sync_start_write_blocks+0x46>
    3920:	2001      	movs	r0, #1
    3922:	4d18      	ldr	r5, [pc, #96]	; (3984 <_mci_sync_start_write_blocks+0x74>)
    3924:	f44f 7225 	mov.w	r2, #660	; 0x294
    3928:	4629      	mov	r1, r5
    392a:	4c17      	ldr	r4, [pc, #92]	; (3988 <_mci_sync_start_write_blocks+0x78>)
    392c:	47a0      	blx	r4
	ASSERT(nb_block);
    392e:	f240 2295 	movw	r2, #661	; 0x295
    3932:	4629      	mov	r1, r5
    3934:	f118 0000 	adds.w	r0, r8, #0
    3938:	bf18      	it	ne
    393a:	2001      	movne	r0, #1
    393c:	47a0      	blx	r4
	ASSERT(src);
    393e:	f240 2296 	movw	r2, #662	; 0x296
    3942:	4629      	mov	r1, r5
    3944:	1c30      	adds	r0, r6, #0
    3946:	bf18      	it	ne
    3948:	2001      	movne	r0, #1
    394a:	47a0      	blx	r4

	nb_data = nb_block * mci_dev->mci_sync_block_size;
    394c:	8a3d      	ldrh	r5, [r7, #16]
    394e:	fb05 f508 	mul.w	r5, r5, r8
	uint8_t  nbytes = 4;
    3952:	2404      	movs	r4, #4

	while (nb_data) {
    3954:	e005      	b.n	3962 <_mci_sync_start_write_blocks+0x52>
	ASSERT(mci_dev && mci_dev->hw);
    3956:	2000      	movs	r0, #0
    3958:	e7e3      	b.n	3922 <_mci_sync_start_write_blocks+0x12>
    395a:	2000      	movs	r0, #0
    395c:	e7e1      	b.n	3922 <_mci_sync_start_write_blocks+0x12>
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
		if (nb_data < nbytes) {
			nbytes = mci_dev->mci_sync_block_size % nbytes;
		}
		nb_data -= nbytes;
    395e:	1b2d      	subs	r5, r5, r4
		ptr += nbytes;
    3960:	4426      	add	r6, r4
	while (nb_data) {
    3962:	b165      	cbz	r5, 397e <_mci_sync_start_write_blocks+0x6e>
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
    3964:	6831      	ldr	r1, [r6, #0]
    3966:	4638      	mov	r0, r7
    3968:	4b08      	ldr	r3, [pc, #32]	; (398c <_mci_sync_start_write_blocks+0x7c>)
    396a:	4798      	blx	r3
		if (nb_data < nbytes) {
    396c:	42a5      	cmp	r5, r4
    396e:	d2f6      	bcs.n	395e <_mci_sync_start_write_blocks+0x4e>
			nbytes = mci_dev->mci_sync_block_size % nbytes;
    3970:	8a3b      	ldrh	r3, [r7, #16]
    3972:	fb93 f2f4 	sdiv	r2, r3, r4
    3976:	fb04 3412 	mls	r4, r4, r2, r3
    397a:	b2e4      	uxtb	r4, r4
    397c:	e7ef      	b.n	395e <_mci_sync_start_write_blocks+0x4e>
	}

	return true;
}
    397e:	2001      	movs	r0, #1
    3980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3984:	000061f8 	.word	0x000061f8
    3988:	00002b35 	.word	0x00002b35
    398c:	000036f9 	.word	0x000036f9

00003990 <_mci_sync_wait_end_of_read_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_read_blocks()
 */
bool _mci_sync_wait_end_of_read_blocks(struct _mci_sync_device *const mci_dev)
{
    3990:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
    3992:	b158      	cbz	r0, 39ac <_mci_sync_wait_end_of_read_blocks+0x1c>
    3994:	6803      	ldr	r3, [r0, #0]
    3996:	b13b      	cbz	r3, 39a8 <_mci_sync_wait_end_of_read_blocks+0x18>
    3998:	2001      	movs	r0, #1
    399a:	f240 22ab 	movw	r2, #683	; 0x2ab
    399e:	4904      	ldr	r1, [pc, #16]	; (39b0 <_mci_sync_wait_end_of_read_blocks+0x20>)
    39a0:	4b04      	ldr	r3, [pc, #16]	; (39b4 <_mci_sync_wait_end_of_read_blocks+0x24>)
    39a2:	4798      	blx	r3

	/* Always return true for sync read blocks */
	return true;
}
    39a4:	2001      	movs	r0, #1
    39a6:	bd08      	pop	{r3, pc}
	ASSERT(mci_dev && mci_dev->hw);
    39a8:	2000      	movs	r0, #0
    39aa:	e7f6      	b.n	399a <_mci_sync_wait_end_of_read_blocks+0xa>
    39ac:	2000      	movs	r0, #0
    39ae:	e7f4      	b.n	399a <_mci_sync_wait_end_of_read_blocks+0xa>
    39b0:	000061f8 	.word	0x000061f8
    39b4:	00002b35 	.word	0x00002b35

000039b8 <_mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool _mci_sync_wait_end_of_write_blocks(struct _mci_sync_device *const mci_dev)
{
    39b8:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
    39ba:	b158      	cbz	r0, 39d4 <_mci_sync_wait_end_of_write_blocks+0x1c>
    39bc:	6803      	ldr	r3, [r0, #0]
    39be:	b13b      	cbz	r3, 39d0 <_mci_sync_wait_end_of_write_blocks+0x18>
    39c0:	2001      	movs	r0, #1
    39c2:	f240 22b6 	movw	r2, #694	; 0x2b6
    39c6:	4904      	ldr	r1, [pc, #16]	; (39d8 <_mci_sync_wait_end_of_write_blocks+0x20>)
    39c8:	4b04      	ldr	r3, [pc, #16]	; (39dc <_mci_sync_wait_end_of_write_blocks+0x24>)
    39ca:	4798      	blx	r3

	/* Always return true for sync write blocks */
	return true;
}
    39cc:	2001      	movs	r0, #1
    39ce:	bd08      	pop	{r3, pc}
	ASSERT(mci_dev && mci_dev->hw);
    39d0:	2000      	movs	r0, #0
    39d2:	e7f6      	b.n	39c2 <_mci_sync_wait_end_of_write_blocks+0xa>
    39d4:	2000      	movs	r0, #0
    39d6:	e7f4      	b.n	39c2 <_mci_sync_wait_end_of_write_blocks+0xa>
    39d8:	000061f8 	.word	0x000061f8
    39dc:	00002b35 	.word	0x00002b35

000039e0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    39e0:	b470      	push	{r4, r5, r6}
    39e2:	b089      	sub	sp, #36	; 0x24
    39e4:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    39e6:	466c      	mov	r4, sp
    39e8:	4d0c      	ldr	r5, [pc, #48]	; (3a1c <_sercom_get_hardware_index+0x3c>)
    39ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    39ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    39ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    39f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    39f6:	2000      	movs	r0, #0
    39f8:	2807      	cmp	r0, #7
    39fa:	d80a      	bhi.n	3a12 <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    39fc:	ab08      	add	r3, sp, #32
    39fe:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3a02:	f853 3c20 	ldr.w	r3, [r3, #-32]
    3a06:	42b3      	cmp	r3, r6
    3a08:	d001      	beq.n	3a0e <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3a0a:	3001      	adds	r0, #1
    3a0c:	e7f4      	b.n	39f8 <_sercom_get_hardware_index+0x18>
			return i;
    3a0e:	b2c0      	uxtb	r0, r0
    3a10:	e000      	b.n	3a14 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    3a12:	2000      	movs	r0, #0
}
    3a14:	b009      	add	sp, #36	; 0x24
    3a16:	bc70      	pop	{r4, r5, r6}
    3a18:	4770      	bx	lr
    3a1a:	bf00      	nop
    3a1c:	00006210 	.word	0x00006210

00003a20 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    3a20:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    3a22:	4b0c      	ldr	r3, [pc, #48]	; (3a54 <_get_sercom_index+0x34>)
    3a24:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3a26:	2300      	movs	r3, #0
    3a28:	b143      	cbz	r3, 3a3c <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
    3a2a:	f240 2247 	movw	r2, #583	; 0x247
    3a2e:	490a      	ldr	r1, [pc, #40]	; (3a58 <_get_sercom_index+0x38>)
    3a30:	2000      	movs	r0, #0
    3a32:	4b0a      	ldr	r3, [pc, #40]	; (3a5c <_get_sercom_index+0x3c>)
    3a34:	4798      	blx	r3
	return 0;
    3a36:	2300      	movs	r3, #0
}
    3a38:	4618      	mov	r0, r3
    3a3a:	bd08      	pop	{r3, pc}
		if (_usarts[i].number == sercom_offset) {
    3a3c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    3a40:	00d1      	lsls	r1, r2, #3
    3a42:	4a07      	ldr	r2, [pc, #28]	; (3a60 <_get_sercom_index+0x40>)
    3a44:	440a      	add	r2, r1
    3a46:	f892 2020 	ldrb.w	r2, [r2, #32]
    3a4a:	4290      	cmp	r0, r2
    3a4c:	d0f4      	beq.n	3a38 <_get_sercom_index+0x18>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3a4e:	3301      	adds	r3, #1
    3a50:	b2db      	uxtb	r3, r3
    3a52:	e7e9      	b.n	3a28 <_get_sercom_index+0x8>
    3a54:	000039e1 	.word	0x000039e1
    3a58:	00006284 	.word	0x00006284
    3a5c:	00002b35 	.word	0x00002b35
    3a60:	00006210 	.word	0x00006210

00003a64 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    3a64:	b538      	push	{r3, r4, r5, lr}
    3a66:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
    3a68:	4b3c      	ldr	r3, [pc, #240]	; (3b5c <_usart_init+0xf8>)
    3a6a:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    3a6c:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    3a6e:	f013 0f01 	tst.w	r3, #1
    3a72:	d122      	bne.n	3aba <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    3a74:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    3a78:	00da      	lsls	r2, r3, #3
    3a7a:	4b39      	ldr	r3, [pc, #228]	; (3b60 <_usart_init+0xfc>)
    3a7c:	4413      	add	r3, r2
    3a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3a80:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3a84:	69e3      	ldr	r3, [r4, #28]
    3a86:	f013 0f03 	tst.w	r3, #3
    3a8a:	d1fb      	bne.n	3a84 <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    3a8c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    3a8e:	f013 0f02 	tst.w	r3, #2
    3a92:	d00b      	beq.n	3aac <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3a94:	6823      	ldr	r3, [r4, #0]
    3a96:	f023 0302 	bic.w	r3, r3, #2
    3a9a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3a9c:	69e3      	ldr	r3, [r4, #28]
    3a9e:	f013 0f03 	tst.w	r3, #3
    3aa2:	d1fb      	bne.n	3a9c <_usart_init+0x38>
    3aa4:	69e3      	ldr	r3, [r4, #28]
    3aa6:	f013 0f02 	tst.w	r3, #2
    3aaa:	d1fb      	bne.n	3aa4 <_usart_init+0x40>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    3aac:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3ab0:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3ab2:	69e3      	ldr	r3, [r4, #28]
    3ab4:	f013 0f03 	tst.w	r3, #3
    3ab8:	d1fb      	bne.n	3ab2 <_usart_init+0x4e>
    3aba:	69e3      	ldr	r3, [r4, #28]
    3abc:	f013 0f01 	tst.w	r3, #1
    3ac0:	d1fb      	bne.n	3aba <_usart_init+0x56>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    3ac2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    3ac6:	00da      	lsls	r2, r3, #3
    3ac8:	4b25      	ldr	r3, [pc, #148]	; (3b60 <_usart_init+0xfc>)
    3aca:	4413      	add	r3, r2
    3acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3ace:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3ad0:	69e3      	ldr	r3, [r4, #28]
    3ad2:	f013 0f03 	tst.w	r3, #3
    3ad6:	d1fb      	bne.n	3ad0 <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    3ad8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    3adc:	00da      	lsls	r2, r3, #3
    3ade:	4b20      	ldr	r3, [pc, #128]	; (3b60 <_usart_init+0xfc>)
    3ae0:	4413      	add	r3, r2
    3ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    3ae4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3ae6:	69e3      	ldr	r3, [r4, #28]
    3ae8:	f013 0f1f 	tst.w	r3, #31
    3aec:	d1fb      	bne.n	3ae6 <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    3aee:	0042      	lsls	r2, r0, #1
    3af0:	4402      	add	r2, r0
    3af2:	00d1      	lsls	r1, r2, #3
    3af4:	4b1a      	ldr	r3, [pc, #104]	; (3b60 <_usart_init+0xfc>)
    3af6:	440b      	add	r3, r1
    3af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    3afa:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    3afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3afe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    3b02:	d10a      	bne.n	3b1a <_usart_init+0xb6>
    3b04:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
    3b08:	d107      	bne.n	3b1a <_usart_init+0xb6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    3b0a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    3b0e:	00da      	lsls	r2, r3, #3
    3b10:	4b13      	ldr	r3, [pc, #76]	; (3b60 <_usart_init+0xfc>)
    3b12:	4413      	add	r3, r2
    3b14:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    3b16:	81a3      	strh	r3, [r4, #12]
    3b18:	e00f      	b.n	3b3a <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    3b1a:	0042      	lsls	r2, r0, #1
    3b1c:	4402      	add	r2, r0
    3b1e:	00d1      	lsls	r1, r2, #3
    3b20:	4b0f      	ldr	r3, [pc, #60]	; (3b60 <_usart_init+0xfc>)
    3b22:	440b      	add	r3, r1
    3b24:	8e19      	ldrh	r1, [r3, #48]	; 0x30
    3b26:	89a2      	ldrh	r2, [r4, #12]
    3b28:	f361 020c 	bfi	r2, r1, #0, #13
    3b2c:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    3b2e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
    3b32:	89a3      	ldrh	r3, [r4, #12]
    3b34:	f362 334f 	bfi	r3, r2, #13, #3
    3b38:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    3b3a:	4a09      	ldr	r2, [pc, #36]	; (3b60 <_usart_init+0xfc>)
    3b3c:	0043      	lsls	r3, r0, #1
    3b3e:	181d      	adds	r5, r3, r0
    3b40:	00e9      	lsls	r1, r5, #3
    3b42:	460d      	mov	r5, r1
    3b44:	4411      	add	r1, r2
    3b46:	f891 1033 	ldrb.w	r1, [r1, #51]	; 0x33
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    3b4a:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    3b4c:	442a      	add	r2, r5
    3b4e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    3b52:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
    3b56:	2000      	movs	r0, #0
    3b58:	bd38      	pop	{r3, r4, r5, pc}
    3b5a:	bf00      	nop
    3b5c:	00003a21 	.word	0x00003a21
    3b60:	00006210 	.word	0x00006210

00003b64 <_usart_sync_init>:
{
    3b64:	b538      	push	{r3, r4, r5, lr}
    3b66:	460c      	mov	r4, r1
	ASSERT(device);
    3b68:	4605      	mov	r5, r0
    3b6a:	22bb      	movs	r2, #187	; 0xbb
    3b6c:	4905      	ldr	r1, [pc, #20]	; (3b84 <_usart_sync_init+0x20>)
    3b6e:	3000      	adds	r0, #0
    3b70:	bf18      	it	ne
    3b72:	2001      	movne	r0, #1
    3b74:	4b04      	ldr	r3, [pc, #16]	; (3b88 <_usart_sync_init+0x24>)
    3b76:	4798      	blx	r3
	device->hw = hw;
    3b78:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    3b7a:	4620      	mov	r0, r4
    3b7c:	4b03      	ldr	r3, [pc, #12]	; (3b8c <_usart_sync_init+0x28>)
    3b7e:	4798      	blx	r3
}
    3b80:	bd38      	pop	{r3, r4, r5, pc}
    3b82:	bf00      	nop
    3b84:	00006284 	.word	0x00006284
    3b88:	00002b35 	.word	0x00002b35
    3b8c:	00003a65 	.word	0x00003a65

00003b90 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    3b90:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3b92:	6813      	ldr	r3, [r2, #0]
    3b94:	f043 0302 	orr.w	r3, r3, #2
    3b98:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3b9a:	69d3      	ldr	r3, [r2, #28]
    3b9c:	f013 0f03 	tst.w	r3, #3
    3ba0:	d1fb      	bne.n	3b9a <_usart_sync_enable+0xa>
}
    3ba2:	4770      	bx	lr

00003ba4 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    3ba4:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    3ba6:	6299      	str	r1, [r3, #40]	; 0x28
    3ba8:	4770      	bx	lr

00003baa <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    3baa:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    3bac:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    3bae:	b2c0      	uxtb	r0, r0
    3bb0:	4770      	bx	lr

00003bb2 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    3bb2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    3bb4:	7e18      	ldrb	r0, [r3, #24]
}
    3bb6:	f000 0001 	and.w	r0, r0, #1
    3bba:	4770      	bx	lr

00003bbc <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    3bbc:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    3bbe:	7e18      	ldrb	r0, [r3, #24]
}
    3bc0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3bc4:	4770      	bx	lr

00003bc6 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    3bc6:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    3bc8:	7e18      	ldrb	r0, [r3, #24]
}
    3bca:	f3c0 0080 	ubfx	r0, r0, #2, #1
    3bce:	4770      	bx	lr

00003bd0 <sd_decode_csd>:
	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	/* Get SD memory maximum transfer speed in Hz. */
	tran_speed         = CSD_TRAN_SPEED(sd_mmc_card->csd);
    3bd0:	4b1f      	ldr	r3, [pc, #124]	; (3c50 <sd_decode_csd+0x80>)
    3bd2:	681a      	ldr	r2, [r3, #0]
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size, uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    3bd4:	7c51      	ldrb	r1, [r2, #17]
	unit               = sd_mmc_trans_units[tran_speed & 0x7];
    3bd6:	f001 0007 	and.w	r0, r1, #7
    3bda:	4b1e      	ldr	r3, [pc, #120]	; (3c54 <sd_decode_csd+0x84>)
    3bdc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	mul                = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    3be0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
    3be4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3be8:	69d9      	ldr	r1, [r3, #28]
	sd_mmc_card->clock = unit * mul * 1000;
    3bea:	fb01 f100 	mul.w	r1, r1, r0
    3bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3bf2:	fb03 f301 	mul.w	r3, r3, r1
    3bf6:	6013      	str	r3, [r2, #0]
    3bf8:	7b93      	ldrb	r3, [r2, #14]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    3bfa:	099b      	lsrs	r3, r3, #6
    3bfc:	d11a      	bne.n	3c34 <sd_decode_csd+0x64>
    3bfe:	7d91      	ldrb	r1, [r2, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    3c00:	7d53      	ldrb	r3, [r2, #21]
    3c02:	009b      	lsls	r3, r3, #2
    3c04:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    3c08:	7d11      	ldrb	r1, [r2, #20]
    3c0a:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
	}
	if (((pos % 8) + size) > 24) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (24 - (pos % 8));
	}
	value &= ((uint32_t)1 << size) - 1;
    3c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
		sd_mmc_card->capacity = (SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1) * 512;
	} else {
		uint32_t blocknr
		    = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) * (1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    3c12:	3301      	adds	r3, #1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    3c14:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    3c16:	7dd1      	ldrb	r1, [r2, #23]
    3c18:	0049      	lsls	r1, r1, #1
    3c1a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	value &= ((uint32_t)1 << size) - 1;
    3c1e:	f001 0107 	and.w	r1, r1, #7
    3c22:	3102      	adds	r1, #2
		uint32_t blocknr
    3c24:	408b      	lsls	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    3c26:	7cd1      	ldrb	r1, [r2, #19]
	value &= ((uint32_t)1 << size) - 1;
    3c28:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr * (1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    3c2c:	408b      	lsls	r3, r1
    3c2e:	0a9b      	lsrs	r3, r3, #10
    3c30:	6053      	str	r3, [r2, #4]
    3c32:	4770      	bx	lr
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    3c34:	7dd3      	ldrb	r3, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    3c36:	7d91      	ldrb	r1, [r2, #22]
    3c38:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    3c3c:	7d51      	ldrb	r1, [r2, #21]
    3c3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	value &= ((uint32_t)1 << size) - 1;
    3c42:	f3c3 0315 	ubfx	r3, r3, #0, #22
		sd_mmc_card->capacity = (SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1) * 512;
    3c46:	3301      	adds	r3, #1
    3c48:	025b      	lsls	r3, r3, #9
    3c4a:	6053      	str	r3, [r2, #4]
    3c4c:	4770      	bx	lr
    3c4e:	bf00      	nop
    3c50:	200000fc 	.word	0x200000fc
    3c54:	000062a0 	.word	0x000062a0

00003c58 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    3c58:	b510      	push	{r4, lr}
    3c5a:	b082      	sub	sp, #8
	driver_select_device(
	    sd_mmc_hal, sd_mmc_slot_sel, sd_mmc_card->clock, sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    3c5c:	4807      	ldr	r0, [pc, #28]	; (3c7c <sd_mmc_configure_slot+0x24>)
    3c5e:	6802      	ldr	r2, [r0, #0]
    3c60:	7f94      	ldrb	r4, [r2, #30]
	driver_select_device(
    3c62:	7b53      	ldrb	r3, [r2, #13]
    3c64:	6812      	ldr	r2, [r2, #0]
    3c66:	7901      	ldrb	r1, [r0, #4]
    3c68:	6880      	ldr	r0, [r0, #8]
    3c6a:	3400      	adds	r4, #0
    3c6c:	bf18      	it	ne
    3c6e:	2401      	movne	r4, #1
    3c70:	9400      	str	r4, [sp, #0]
    3c72:	4c03      	ldr	r4, [pc, #12]	; (3c80 <sd_mmc_configure_slot+0x28>)
    3c74:	47a0      	blx	r4
}
    3c76:	b002      	add	sp, #8
    3c78:	bd10      	pop	{r4, pc}
    3c7a:	bf00      	nop
    3c7c:	200000fc 	.word	0x200000fc
    3c80:	0000277d 	.word	0x0000277d

00003c84 <sd_mmc_select_slot>:
	if (slot >= CONF_SD_MMC_MEM_CNT) {
    3c84:	b108      	cbz	r0, 3c8a <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
    3c86:	2004      	movs	r0, #4
    3c88:	4770      	bx	lr
{
    3c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c8c:	b083      	sub	sp, #12
    3c8e:	4604      	mov	r4, r0
	if (_cd && _cd[slot].pin != -1) {
    3c90:	4b45      	ldr	r3, [pc, #276]	; (3da8 <sd_mmc_select_slot+0x124>)
    3c92:	68db      	ldr	r3, [r3, #12]
    3c94:	2b00      	cmp	r3, #0
    3c96:	d050      	beq.n	3d3a <sd_mmc_select_slot+0xb6>
    3c98:	0087      	lsls	r7, r0, #2
    3c9a:	f933 5020 	ldrsh.w	r5, [r3, r0, lsl #2]
    3c9e:	f1b5 3fff 	cmp.w	r5, #4294967295
    3ca2:	d04a      	beq.n	3d3a <sd_mmc_select_slot+0xb6>
		if (gpio_get_pin_level(_cd[slot].pin) != _cd[slot].val) {
    3ca4:	b2ed      	uxtb	r5, r5
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    3ca6:	096e      	lsrs	r6, r5, #5
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    3ca8:	a801      	add	r0, sp, #4
    3caa:	4b40      	ldr	r3, [pc, #256]	; (3dac <sd_mmc_select_slot+0x128>)
    3cac:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3cae:	4940      	ldr	r1, [pc, #256]	; (3db0 <sd_mmc_select_slot+0x12c>)
    3cb0:	01f3      	lsls	r3, r6, #7
    3cb2:	18ca      	adds	r2, r1, r3
    3cb4:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3cb6:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3cb8:	6916      	ldr	r6, [r2, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3cba:	405e      	eors	r6, r3
    3cbc:	400e      	ands	r6, r1
    3cbe:	405e      	eors	r6, r3

	CRITICAL_SECTION_LEAVE();
    3cc0:	a801      	add	r0, sp, #4
    3cc2:	4b3c      	ldr	r3, [pc, #240]	; (3db4 <sd_mmc_select_slot+0x130>)
    3cc4:	4798      	blx	r3
    3cc6:	f005 051f 	and.w	r5, r5, #31
    3cca:	2301      	movs	r3, #1
    3ccc:	fa03 f505 	lsl.w	r5, r3, r5
    3cd0:	4235      	tst	r5, r6
    3cd2:	bf14      	ite	ne
    3cd4:	461a      	movne	r2, r3
    3cd6:	2200      	moveq	r2, #0
    3cd8:	4b33      	ldr	r3, [pc, #204]	; (3da8 <sd_mmc_select_slot+0x124>)
    3cda:	68db      	ldr	r3, [r3, #12]
    3cdc:	441f      	add	r7, r3
    3cde:	887b      	ldrh	r3, [r7, #2]
    3ce0:	429a      	cmp	r2, r3
    3ce2:	d006      	beq.n	3cf2 <sd_mmc_select_slot+0x6e>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    3ce4:	4b30      	ldr	r3, [pc, #192]	; (3da8 <sd_mmc_select_slot+0x124>)
    3ce6:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    3cea:	2304      	movs	r3, #4
    3cec:	76a3      	strb	r3, [r4, #26]
			return SD_MMC_ERR_NO_CARD;
    3cee:	2002      	movs	r0, #2
    3cf0:	e047      	b.n	3d82 <sd_mmc_select_slot+0xfe>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
    3cf2:	4b2d      	ldr	r3, [pc, #180]	; (3da8 <sd_mmc_select_slot+0x124>)
    3cf4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3cf8:	7e9b      	ldrb	r3, [r3, #26]
    3cfa:	2b04      	cmp	r3, #4
    3cfc:	d009      	beq.n	3d12 <sd_mmc_select_slot+0x8e>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
    3cfe:	2b01      	cmp	r3, #1
    3d00:	d00e      	beq.n	3d20 <sd_mmc_select_slot+0x9c>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
    3d02:	4b29      	ldr	r3, [pc, #164]	; (3da8 <sd_mmc_select_slot+0x124>)
    3d04:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3d08:	7e9b      	ldrb	r3, [r3, #26]
    3d0a:	2b03      	cmp	r3, #3
    3d0c:	d11d      	bne.n	3d4a <sd_mmc_select_slot+0xc6>
			return SD_MMC_ERR_UNUSABLE;
    3d0e:	2003      	movs	r0, #3
    3d10:	e037      	b.n	3d82 <sd_mmc_select_slot+0xfe>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
    3d12:	4b25      	ldr	r3, [pc, #148]	; (3da8 <sd_mmc_select_slot+0x124>)
    3d14:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    3d18:	2301      	movs	r3, #1
    3d1a:	76a3      	strb	r3, [r4, #26]
			return SD_MMC_ERR_NO_CARD;
    3d1c:	2002      	movs	r0, #2
    3d1e:	e030      	b.n	3d82 <sd_mmc_select_slot+0xfe>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    3d20:	4b21      	ldr	r3, [pc, #132]	; (3da8 <sd_mmc_select_slot+0x124>)
    3d22:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3d26:	2202      	movs	r2, #2
    3d28:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    3d2a:	4a23      	ldr	r2, [pc, #140]	; (3db8 <sd_mmc_select_slot+0x134>)
    3d2c:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    3d2e:	2201      	movs	r2, #1
    3d30:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    3d32:	2200      	movs	r2, #0
    3d34:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    3d38:	e7e3      	b.n	3d02 <sd_mmc_select_slot+0x7e>
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    3d3a:	4b1b      	ldr	r3, [pc, #108]	; (3da8 <sd_mmc_select_slot+0x124>)
    3d3c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3d40:	7e9b      	ldrb	r3, [r3, #26]
		    || (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    3d42:	3b03      	subs	r3, #3
    3d44:	b2db      	uxtb	r3, r3
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    3d46:	2b01      	cmp	r3, #1
    3d48:	d91d      	bls.n	3d86 <sd_mmc_select_slot+0x102>
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
    3d4a:	4b17      	ldr	r3, [pc, #92]	; (3da8 <sd_mmc_select_slot+0x124>)
    3d4c:	791b      	ldrb	r3, [r3, #4]
    3d4e:	429c      	cmp	r4, r3
    3d50:	d026      	beq.n	3da0 <sd_mmc_select_slot+0x11c>
    3d52:	4b15      	ldr	r3, [pc, #84]	; (3da8 <sd_mmc_select_slot+0x124>)
    3d54:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    3d56:	bb2b      	cbnz	r3, 3da4 <sd_mmc_select_slot+0x120>
    3d58:	2001      	movs	r0, #1
    3d5a:	f240 422c 	movw	r2, #1068	; 0x42c
    3d5e:	4917      	ldr	r1, [pc, #92]	; (3dbc <sd_mmc_select_slot+0x138>)
    3d60:	4b17      	ldr	r3, [pc, #92]	; (3dc0 <sd_mmc_select_slot+0x13c>)
    3d62:	4798      	blx	r3
	sd_mmc_slot_sel = slot;
    3d64:	4d10      	ldr	r5, [pc, #64]	; (3da8 <sd_mmc_select_slot+0x124>)
    3d66:	712c      	strb	r4, [r5, #4]
	sd_mmc_card     = &sd_mmc_cards[slot];
    3d68:	f105 0310 	add.w	r3, r5, #16
    3d6c:	0164      	lsls	r4, r4, #5
    3d6e:	4423      	add	r3, r4
    3d70:	602b      	str	r3, [r5, #0]
	sd_mmc_configure_slot();
    3d72:	4b14      	ldr	r3, [pc, #80]	; (3dc4 <sd_mmc_select_slot+0x140>)
    3d74:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ? SD_MMC_INIT_ONGOING : SD_MMC_OK;
    3d76:	442c      	add	r4, r5
    3d78:	7ea0      	ldrb	r0, [r4, #26]
    3d7a:	2802      	cmp	r0, #2
    3d7c:	bf14      	ite	ne
    3d7e:	2000      	movne	r0, #0
    3d80:	2001      	moveq	r0, #1
}
    3d82:	b003      	add	sp, #12
    3d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    3d86:	4b08      	ldr	r3, [pc, #32]	; (3da8 <sd_mmc_select_slot+0x124>)
    3d88:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3d8c:	2202      	movs	r2, #2
    3d8e:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    3d90:	4a09      	ldr	r2, [pc, #36]	; (3db8 <sd_mmc_select_slot+0x134>)
    3d92:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    3d94:	2201      	movs	r2, #1
    3d96:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    3d98:	2200      	movs	r2, #0
    3d9a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    3d9e:	e7d4      	b.n	3d4a <sd_mmc_select_slot+0xc6>
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
    3da0:	2001      	movs	r0, #1
    3da2:	e7da      	b.n	3d5a <sd_mmc_select_slot+0xd6>
    3da4:	2000      	movs	r0, #0
    3da6:	e7d8      	b.n	3d5a <sd_mmc_select_slot+0xd6>
    3da8:	200000fc 	.word	0x200000fc
    3dac:	000024a5 	.word	0x000024a5
    3db0:	41008000 	.word	0x41008000
    3db4:	000024b3 	.word	0x000024b3
    3db8:	00061a80 	.word	0x00061a80
    3dbc:	0000633c 	.word	0x0000633c
    3dc0:	00002b35 	.word	0x00002b35
    3dc4:	00003c59 	.word	0x00003c59

00003dc8 <sd_acmd6>:
{
    3dc8:	b508      	push	{r3, lr}
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    3dca:	4b0e      	ldr	r3, [pc, #56]	; (3e04 <sd_acmd6+0x3c>)
    3dcc:	681a      	ldr	r2, [r3, #0]
    3dce:	8912      	ldrh	r2, [r2, #8]
    3dd0:	0412      	lsls	r2, r2, #16
    3dd2:	f241 1137 	movw	r1, #4407	; 0x1137
    3dd6:	6898      	ldr	r0, [r3, #8]
    3dd8:	4b0b      	ldr	r3, [pc, #44]	; (3e08 <sd_acmd6+0x40>)
    3dda:	4798      	blx	r3
    3ddc:	4603      	mov	r3, r0
    3dde:	b908      	cbnz	r0, 3de4 <sd_acmd6+0x1c>
}
    3de0:	4618      	mov	r0, r3
    3de2:	bd08      	pop	{r3, pc}
	if (!driver_send_cmd(sd_mmc_hal, SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
    3de4:	2202      	movs	r2, #2
    3de6:	f241 1106 	movw	r1, #4358	; 0x1106
    3dea:	4b06      	ldr	r3, [pc, #24]	; (3e04 <sd_acmd6+0x3c>)
    3dec:	6898      	ldr	r0, [r3, #8]
    3dee:	4b06      	ldr	r3, [pc, #24]	; (3e08 <sd_acmd6+0x40>)
    3df0:	4798      	blx	r3
    3df2:	4603      	mov	r3, r0
    3df4:	2800      	cmp	r0, #0
    3df6:	d0f3      	beq.n	3de0 <sd_acmd6+0x18>
	sd_mmc_card->bus_width = 4;
    3df8:	4a02      	ldr	r2, [pc, #8]	; (3e04 <sd_acmd6+0x3c>)
    3dfa:	6812      	ldr	r2, [r2, #0]
    3dfc:	2104      	movs	r1, #4
    3dfe:	7351      	strb	r1, [r2, #13]
	return true;
    3e00:	e7ee      	b.n	3de0 <sd_acmd6+0x18>
    3e02:	bf00      	nop
    3e04:	200000fc 	.word	0x200000fc
    3e08:	00002861 	.word	0x00002861

00003e0c <sdio_cmd52>:
{
    3e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e10:	4680      	mov	r8, r0
    3e12:	460f      	mov	r7, r1
    3e14:	4615      	mov	r5, r2
    3e16:	461e      	mov	r6, r3
    3e18:	9c06      	ldr	r4, [sp, #24]
	ASSERT(io_data != NULL);
    3e1a:	f240 3276 	movw	r2, #886	; 0x376
    3e1e:	4910      	ldr	r1, [pc, #64]	; (3e60 <sdio_cmd52+0x54>)
    3e20:	1c20      	adds	r0, r4, #0
    3e22:	bf18      	it	ne
    3e24:	2001      	movne	r0, #1
    3e26:	4b0f      	ldr	r3, [pc, #60]	; (3e64 <sdio_cmd52+0x58>)
    3e28:	4798      	blx	r3
	                     ((uint32_t)*io_data << SDIO_CMD52_WR_DATA) | ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
    3e2a:	7822      	ldrb	r2, [r4, #0]
    3e2c:	ea42 72c8 	orr.w	r2, r2, r8, lsl #31
	                         | ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
    3e30:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
	                         | ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
    3e34:	ea42 62c6 	orr.w	r2, r2, r6, lsl #27
	if (!driver_send_cmd(sd_mmc_hal,
    3e38:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
    3e3c:	f241 3134 	movw	r1, #4916	; 0x1334
    3e40:	4b09      	ldr	r3, [pc, #36]	; (3e68 <sdio_cmd52+0x5c>)
    3e42:	6898      	ldr	r0, [r3, #8]
    3e44:	4b09      	ldr	r3, [pc, #36]	; (3e6c <sdio_cmd52+0x60>)
    3e46:	4798      	blx	r3
    3e48:	4605      	mov	r5, r0
    3e4a:	b910      	cbnz	r0, 3e52 <sdio_cmd52+0x46>
}
    3e4c:	4628      	mov	r0, r5
    3e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*io_data = driver_get_response(sd_mmc_hal) & 0xFF;
    3e52:	4b05      	ldr	r3, [pc, #20]	; (3e68 <sdio_cmd52+0x5c>)
    3e54:	6898      	ldr	r0, [r3, #8]
    3e56:	4b06      	ldr	r3, [pc, #24]	; (3e70 <sdio_cmd52+0x64>)
    3e58:	4798      	blx	r3
    3e5a:	7020      	strb	r0, [r4, #0]
	return true;
    3e5c:	e7f6      	b.n	3e4c <sdio_cmd52+0x40>
    3e5e:	bf00      	nop
    3e60:	0000633c 	.word	0x0000633c
    3e64:	00002b35 	.word	0x00002b35
    3e68:	200000fc 	.word	0x200000fc
    3e6c:	00002861 	.word	0x00002861
    3e70:	00002891 	.word	0x00002891

00003e74 <sdio_get_max_speed>:
{
    3e74:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e76:	b087      	sub	sp, #28
	for (i = 0; i < 4; i++) {
    3e78:	2400      	movs	r4, #0
	addr_old = SDIO_CCCR_CIS_PTR;
    3e7a:	2509      	movs	r5, #9
	for (i = 0; i < 4; i++) {
    3e7c:	e00b      	b.n	3e96 <sdio_get_max_speed+0x22>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
    3e7e:	ab03      	add	r3, sp, #12
    3e80:	4423      	add	r3, r4
    3e82:	9300      	str	r3, [sp, #0]
    3e84:	2300      	movs	r3, #0
    3e86:	462a      	mov	r2, r5
    3e88:	4619      	mov	r1, r3
    3e8a:	4618      	mov	r0, r3
    3e8c:	4e35      	ldr	r6, [pc, #212]	; (3f64 <sdio_get_max_speed+0xf0>)
    3e8e:	47b0      	blx	r6
		addr_old++;
    3e90:	3501      	adds	r5, #1
	for (i = 0; i < 4; i++) {
    3e92:	3401      	adds	r4, #1
    3e94:	b2e4      	uxtb	r4, r4
    3e96:	2c03      	cmp	r4, #3
    3e98:	d9f1      	bls.n	3e7e <sdio_get_max_speed+0xa>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + (addr_cis[2] << 16) + (addr_cis[3] << 24);
    3e9a:	f89d 700c 	ldrb.w	r7, [sp, #12]
    3e9e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    3ea2:	eb07 2703 	add.w	r7, r7, r3, lsl #8
    3ea6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    3eaa:	eb07 4703 	add.w	r7, r7, r3, lsl #16
    3eae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3eb2:	eb07 6703 	add.w	r7, r7, r3, lsl #24
	addr_new = addr_old;
    3eb6:	463d      	mov	r5, r7
    3eb8:	e01d      	b.n	3ef6 <sdio_get_max_speed+0x82>
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
    3eba:	ab04      	add	r3, sp, #16
    3ebc:	4423      	add	r3, r4
    3ebe:	9300      	str	r3, [sp, #0]
    3ec0:	2300      	movs	r3, #0
    3ec2:	462a      	mov	r2, r5
    3ec4:	4619      	mov	r1, r3
    3ec6:	4618      	mov	r0, r3
    3ec8:	4e26      	ldr	r6, [pc, #152]	; (3f64 <sdio_get_max_speed+0xf0>)
    3eca:	47b0      	blx	r6
			addr_new++;
    3ecc:	3501      	adds	r5, #1
		for (i = 0; i < 3; i++) {
    3ece:	3401      	adds	r4, #1
    3ed0:	b2e4      	uxtb	r4, r4
    3ed2:	2c02      	cmp	r4, #2
    3ed4:	d9f1      	bls.n	3eba <sdio_get_max_speed+0x46>
		if (buf[0] == SDIO_CISTPL_END) {
    3ed6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3eda:	2bff      	cmp	r3, #255	; 0xff
    3edc:	d03b      	beq.n	3f56 <sdio_get_max_speed+0xe2>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
    3ede:	2b22      	cmp	r3, #34	; 0x22
    3ee0:	d00b      	beq.n	3efa <sdio_get_max_speed+0x86>
		if (buf[1] == 0) {
    3ee2:	f89d 3011 	ldrb.w	r3, [sp, #17]
    3ee6:	2b00      	cmp	r3, #0
    3ee8:	d038      	beq.n	3f5c <sdio_get_max_speed+0xe8>
		addr_new += buf[1] - 1;
    3eea:	441d      	add	r5, r3
    3eec:	3d01      	subs	r5, #1
		if (addr_new > (addr_old + 256)) {
    3eee:	f507 7380 	add.w	r3, r7, #256	; 0x100
    3ef2:	429d      	cmp	r5, r3
    3ef4:	d834      	bhi.n	3f60 <sdio_get_max_speed+0xec>
		for (i = 0; i < 3; i++) {
    3ef6:	2400      	movs	r4, #0
    3ef8:	e7eb      	b.n	3ed2 <sdio_get_max_speed+0x5e>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
    3efa:	f89d 4012 	ldrb.w	r4, [sp, #18]
    3efe:	2c00      	cmp	r4, #0
    3f00:	d1ef      	bne.n	3ee2 <sdio_get_max_speed+0x6e>
	addr_new -= 3;
    3f02:	3d03      	subs	r5, #3
	for (i = 0; i < 6; i++) {
    3f04:	2c05      	cmp	r4, #5
    3f06:	d80c      	bhi.n	3f22 <sdio_get_max_speed+0xae>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
    3f08:	ab04      	add	r3, sp, #16
    3f0a:	4423      	add	r3, r4
    3f0c:	9300      	str	r3, [sp, #0]
    3f0e:	2300      	movs	r3, #0
    3f10:	462a      	mov	r2, r5
    3f12:	4619      	mov	r1, r3
    3f14:	4618      	mov	r0, r3
    3f16:	4e13      	ldr	r6, [pc, #76]	; (3f64 <sdio_get_max_speed+0xf0>)
    3f18:	47b0      	blx	r6
		addr_new++;
    3f1a:	3501      	adds	r5, #1
	for (i = 0; i < 6; i++) {
    3f1c:	3401      	adds	r4, #1
    3f1e:	b2e4      	uxtb	r4, r4
    3f20:	e7f0      	b.n	3f04 <sdio_get_max_speed+0x90>
	tplfe_max_tran_speed = buf[5];
    3f22:	f89d 3015 	ldrb.w	r3, [sp, #21]
	if (tplfe_max_tran_speed > 0x32) {
    3f26:	2b32      	cmp	r3, #50	; 0x32
    3f28:	d900      	bls.n	3f2c <sdio_get_max_speed+0xb8>
		tplfe_max_tran_speed = 0x32; /* 25Mhz */
    3f2a:	2332      	movs	r3, #50	; 0x32
	unit               = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
    3f2c:	f003 0107 	and.w	r1, r3, #7
    3f30:	4a0d      	ldr	r2, [pc, #52]	; (3f68 <sdio_get_max_speed+0xf4>)
    3f32:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	mul                = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
    3f36:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    3f3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3f3e:	69db      	ldr	r3, [r3, #28]
	sd_mmc_card->clock = unit * mul * 1000;
    3f40:	4a0a      	ldr	r2, [pc, #40]	; (3f6c <sdio_get_max_speed+0xf8>)
    3f42:	6811      	ldr	r1, [r2, #0]
    3f44:	fb03 f200 	mul.w	r2, r3, r0
    3f48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3f4c:	fb03 f302 	mul.w	r3, r3, r2
    3f50:	600b      	str	r3, [r1, #0]
	return true;
    3f52:	2001      	movs	r0, #1
    3f54:	e000      	b.n	3f58 <sdio_get_max_speed+0xe4>
			return false; /* Tuple error */
    3f56:	2000      	movs	r0, #0
}
    3f58:	b007      	add	sp, #28
    3f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false; /* Tuple error */
    3f5c:	2000      	movs	r0, #0
    3f5e:	e7fb      	b.n	3f58 <sdio_get_max_speed+0xe4>
			return false; /* Outoff CIS area */
    3f60:	2000      	movs	r0, #0
    3f62:	e7f9      	b.n	3f58 <sdio_get_max_speed+0xe4>
    3f64:	00003e0d 	.word	0x00003e0d
    3f68:	000062a0 	.word	0x000062a0
    3f6c:	200000fc 	.word	0x200000fc

00003f70 <sdio_cmd52_set_bus_width>:
{
    3f70:	b510      	push	{r4, lr}
    3f72:	b084      	sub	sp, #16
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP, 0, &u8_value)) {
    3f74:	f10d 030f 	add.w	r3, sp, #15
    3f78:	9300      	str	r3, [sp, #0]
    3f7a:	2300      	movs	r3, #0
    3f7c:	2208      	movs	r2, #8
    3f7e:	4619      	mov	r1, r3
    3f80:	4618      	mov	r0, r3
    3f82:	4c0e      	ldr	r4, [pc, #56]	; (3fbc <sdio_cmd52_set_bus_width+0x4c>)
    3f84:	47a0      	blx	r4
    3f86:	4603      	mov	r3, r0
    3f88:	b118      	cbz	r0, 3f92 <sdio_cmd52_set_bus_width+0x22>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
    3f8a:	f99d 200f 	ldrsb.w	r2, [sp, #15]
    3f8e:	2a00      	cmp	r2, #0
    3f90:	db02      	blt.n	3f98 <sdio_cmd52_set_bus_width+0x28>
}
    3f92:	4618      	mov	r0, r3
    3f94:	b004      	add	sp, #16
    3f96:	bd10      	pop	{r4, pc}
	u8_value = SDIO_BUSWIDTH_4B;
    3f98:	ab04      	add	r3, sp, #16
    3f9a:	2202      	movs	r2, #2
    3f9c:	f803 2d01 	strb.w	r2, [r3, #-1]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL, 1, &u8_value)) {
    3fa0:	9300      	str	r3, [sp, #0]
    3fa2:	2301      	movs	r3, #1
    3fa4:	2207      	movs	r2, #7
    3fa6:	2100      	movs	r1, #0
    3fa8:	4618      	mov	r0, r3
    3faa:	47a0      	blx	r4
    3fac:	4603      	mov	r3, r0
    3fae:	2800      	cmp	r0, #0
    3fb0:	d0ef      	beq.n	3f92 <sdio_cmd52_set_bus_width+0x22>
	sd_mmc_card->bus_width = 4;
    3fb2:	4a03      	ldr	r2, [pc, #12]	; (3fc0 <sdio_cmd52_set_bus_width+0x50>)
    3fb4:	6812      	ldr	r2, [r2, #0]
    3fb6:	2104      	movs	r1, #4
    3fb8:	7351      	strb	r1, [r2, #13]
	return true;
    3fba:	e7ea      	b.n	3f92 <sdio_cmd52_set_bus_width+0x22>
    3fbc:	00003e0d 	.word	0x00003e0d
    3fc0:	200000fc 	.word	0x200000fc

00003fc4 <sdio_cmd52_set_high_speed>:
{
    3fc4:	b510      	push	{r4, lr}
    3fc6:	b084      	sub	sp, #16
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
    3fc8:	f10d 030f 	add.w	r3, sp, #15
    3fcc:	9300      	str	r3, [sp, #0]
    3fce:	2300      	movs	r3, #0
    3fd0:	2213      	movs	r2, #19
    3fd2:	4619      	mov	r1, r3
    3fd4:	4618      	mov	r0, r3
    3fd6:	4c0f      	ldr	r4, [pc, #60]	; (4014 <sdio_cmd52_set_high_speed+0x50>)
    3fd8:	47a0      	blx	r4
    3fda:	4601      	mov	r1, r0
    3fdc:	b1b8      	cbz	r0, 400e <sdio_cmd52_set_high_speed+0x4a>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
    3fde:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3fe2:	f013 0f01 	tst.w	r3, #1
    3fe6:	d012      	beq.n	400e <sdio_cmd52_set_high_speed+0x4a>
	u8_value = SDIO_EHS;
    3fe8:	ab04      	add	r3, sp, #16
    3fea:	2202      	movs	r2, #2
    3fec:	f803 2d01 	strb.w	r2, [r3, #-1]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS, 1, &u8_value)) {
    3ff0:	9300      	str	r3, [sp, #0]
    3ff2:	2301      	movs	r3, #1
    3ff4:	2213      	movs	r2, #19
    3ff6:	2100      	movs	r1, #0
    3ff8:	4618      	mov	r0, r3
    3ffa:	47a0      	blx	r4
    3ffc:	4601      	mov	r1, r0
    3ffe:	b130      	cbz	r0, 400e <sdio_cmd52_set_high_speed+0x4a>
	sd_mmc_card->high_speed = 1;
    4000:	4b05      	ldr	r3, [pc, #20]	; (4018 <sdio_cmd52_set_high_speed+0x54>)
    4002:	681b      	ldr	r3, [r3, #0]
    4004:	2201      	movs	r2, #1
    4006:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
    4008:	681a      	ldr	r2, [r3, #0]
    400a:	0052      	lsls	r2, r2, #1
    400c:	601a      	str	r2, [r3, #0]
}
    400e:	4608      	mov	r0, r1
    4010:	b004      	add	sp, #16
    4012:	bd10      	pop	{r4, pc}
    4014:	00003e0d 	.word	0x00003e0d
    4018:	200000fc 	.word	0x200000fc

0000401c <sd_cmd8>:
{
    401c:	b538      	push	{r3, r4, r5, lr}
    401e:	4605      	mov	r5, r0
	*v2 = 0;
    4020:	2300      	movs	r3, #0
    4022:	7003      	strb	r3, [r0, #0]
	if (!driver_send_cmd(sd_mmc_hal, SD_CMD8_SEND_IF_COND, SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
    4024:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    4028:	f245 5108 	movw	r1, #21768	; 0x5508
    402c:	4b0c      	ldr	r3, [pc, #48]	; (4060 <sd_cmd8+0x44>)
    402e:	6898      	ldr	r0, [r3, #8]
    4030:	4b0c      	ldr	r3, [pc, #48]	; (4064 <sd_cmd8+0x48>)
    4032:	4798      	blx	r3
    4034:	b910      	cbnz	r0, 403c <sd_cmd8+0x20>
		return true; /* It is not a V2 */
    4036:	2401      	movs	r4, #1
}
    4038:	4620      	mov	r0, r4
    403a:	bd38      	pop	{r3, r4, r5, pc}
    403c:	4604      	mov	r4, r0
	resp = driver_get_response(sd_mmc_hal);
    403e:	4b08      	ldr	r3, [pc, #32]	; (4060 <sd_cmd8+0x44>)
    4040:	6898      	ldr	r0, [r3, #8]
    4042:	4b09      	ldr	r3, [pc, #36]	; (4068 <sd_cmd8+0x4c>)
    4044:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    4046:	f1b0 3fff 	cmp.w	r0, #4294967295
    404a:	d0f5      	beq.n	4038 <sd_cmd8+0x1c>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE)) != (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
    404c:	f3c0 000b 	ubfx	r0, r0, #0, #12
    4050:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
    4054:	d001      	beq.n	405a <sd_cmd8+0x3e>
		return false;
    4056:	2400      	movs	r4, #0
    4058:	e7ee      	b.n	4038 <sd_cmd8+0x1c>
	*v2 = 1;
    405a:	2301      	movs	r3, #1
    405c:	702b      	strb	r3, [r5, #0]
	return true;
    405e:	e7eb      	b.n	4038 <sd_cmd8+0x1c>
    4060:	200000fc 	.word	0x200000fc
    4064:	00002861 	.word	0x00002861
    4068:	00002891 	.word	0x00002891

0000406c <sdio_op_cond>:
{
    406c:	b538      	push	{r3, r4, r5, lr}
	if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, 0)) {
    406e:	2200      	movs	r2, #0
    4070:	f244 5105 	movw	r1, #17669	; 0x4505
    4074:	4b1a      	ldr	r3, [pc, #104]	; (40e0 <sdio_op_cond+0x74>)
    4076:	6898      	ldr	r0, [r3, #8]
    4078:	4b1a      	ldr	r3, [pc, #104]	; (40e4 <sdio_op_cond+0x78>)
    407a:	4798      	blx	r3
    407c:	b910      	cbnz	r0, 4084 <sdio_op_cond+0x18>
		return true; /* No error but card type not updated */
    407e:	2501      	movs	r5, #1
}
    4080:	4628      	mov	r0, r5
    4082:	bd38      	pop	{r3, r4, r5, pc}
    4084:	4605      	mov	r5, r0
	resp = driver_get_response(sd_mmc_hal);
    4086:	4b16      	ldr	r3, [pc, #88]	; (40e0 <sdio_op_cond+0x74>)
    4088:	6898      	ldr	r0, [r3, #8]
    408a:	4b17      	ldr	r3, [pc, #92]	; (40e8 <sdio_op_cond+0x7c>)
    408c:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
    408e:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
    4092:	d0f5      	beq.n	4080 <sdio_op_cond+0x14>
    4094:	f241 3488 	movw	r4, #5000	; 0x1388
		if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, resp & SD_MMC_VOLTAGE_SUPPORT)) {
    4098:	f400 12fc 	and.w	r2, r0, #2064384	; 0x1f8000
    409c:	f244 5105 	movw	r1, #17669	; 0x4505
    40a0:	4b0f      	ldr	r3, [pc, #60]	; (40e0 <sdio_op_cond+0x74>)
    40a2:	6898      	ldr	r0, [r3, #8]
    40a4:	4b0f      	ldr	r3, [pc, #60]	; (40e4 <sdio_op_cond+0x78>)
    40a6:	4798      	blx	r3
    40a8:	4605      	mov	r5, r0
    40aa:	2800      	cmp	r0, #0
    40ac:	d0e8      	beq.n	4080 <sdio_op_cond+0x14>
		resp = driver_get_response(sd_mmc_hal);
    40ae:	4b0c      	ldr	r3, [pc, #48]	; (40e0 <sdio_op_cond+0x74>)
    40b0:	6898      	ldr	r0, [r3, #8]
    40b2:	4b0d      	ldr	r3, [pc, #52]	; (40e8 <sdio_op_cond+0x7c>)
    40b4:	4798      	blx	r3
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
    40b6:	2800      	cmp	r0, #0
    40b8:	db03      	blt.n	40c2 <sdio_op_cond+0x56>
		if (cmd5_retry-- == 0) {
    40ba:	1e63      	subs	r3, r4, #1
    40bc:	b174      	cbz	r4, 40dc <sdio_op_cond+0x70>
    40be:	461c      	mov	r4, r3
    40c0:	e7ea      	b.n	4098 <sdio_op_cond+0x2c>
	if ((resp & OCR_SDIO_MP) > 0) {
    40c2:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
    40c6:	d104      	bne.n	40d2 <sdio_op_cond+0x66>
		sd_mmc_card->type = CARD_TYPE_SDIO;
    40c8:	4b05      	ldr	r3, [pc, #20]	; (40e0 <sdio_op_cond+0x74>)
    40ca:	681b      	ldr	r3, [r3, #0]
    40cc:	2204      	movs	r2, #4
    40ce:	72da      	strb	r2, [r3, #11]
    40d0:	e7d6      	b.n	4080 <sdio_op_cond+0x14>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
    40d2:	4b03      	ldr	r3, [pc, #12]	; (40e0 <sdio_op_cond+0x74>)
    40d4:	681b      	ldr	r3, [r3, #0]
    40d6:	2205      	movs	r2, #5
    40d8:	72da      	strb	r2, [r3, #11]
    40da:	e7d1      	b.n	4080 <sdio_op_cond+0x14>
			return false;
    40dc:	2500      	movs	r5, #0
    40de:	e7cf      	b.n	4080 <sdio_op_cond+0x14>
    40e0:	200000fc 	.word	0x200000fc
    40e4:	00002861 	.word	0x00002861
    40e8:	00002891 	.word	0x00002891

000040ec <sd_mci_op_cond>:
{
    40ec:	b570      	push	{r4, r5, r6, lr}
    40ee:	4606      	mov	r6, r0
	retry = 2100;
    40f0:	f640 0434 	movw	r4, #2100	; 0x834
    40f4:	e011      	b.n	411a <sd_mci_op_cond+0x2e>
			arg |= SD_ACMD41_HCS;
    40f6:	4a16      	ldr	r2, [pc, #88]	; (4150 <sd_mci_op_cond+0x64>)
		if (!driver_send_cmd(sd_mmc_hal, SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
    40f8:	f244 5129 	movw	r1, #17705	; 0x4529
    40fc:	4b15      	ldr	r3, [pc, #84]	; (4154 <sd_mci_op_cond+0x68>)
    40fe:	6898      	ldr	r0, [r3, #8]
    4100:	4b15      	ldr	r3, [pc, #84]	; (4158 <sd_mci_op_cond+0x6c>)
    4102:	4798      	blx	r3
    4104:	4605      	mov	r5, r0
    4106:	b1f8      	cbz	r0, 4148 <sd_mci_op_cond+0x5c>
		resp = driver_get_response(sd_mmc_hal);
    4108:	4b12      	ldr	r3, [pc, #72]	; (4154 <sd_mci_op_cond+0x68>)
    410a:	6898      	ldr	r0, [r3, #8]
    410c:	4b13      	ldr	r3, [pc, #76]	; (415c <sd_mci_op_cond+0x70>)
    410e:	4798      	blx	r3
		if (resp & OCR_POWER_UP_BUSY) {
    4110:	2800      	cmp	r0, #0
    4112:	db10      	blt.n	4136 <sd_mci_op_cond+0x4a>
		if (retry-- == 0) {
    4114:	1e63      	subs	r3, r4, #1
    4116:	b1cc      	cbz	r4, 414c <sd_mci_op_cond+0x60>
    4118:	461c      	mov	r4, r3
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, 0)) {
    411a:	2200      	movs	r2, #0
    411c:	f241 1137 	movw	r1, #4407	; 0x1137
    4120:	4b0c      	ldr	r3, [pc, #48]	; (4154 <sd_mci_op_cond+0x68>)
    4122:	6898      	ldr	r0, [r3, #8]
    4124:	4b0c      	ldr	r3, [pc, #48]	; (4158 <sd_mci_op_cond+0x6c>)
    4126:	4798      	blx	r3
    4128:	4605      	mov	r5, r0
    412a:	b168      	cbz	r0, 4148 <sd_mci_op_cond+0x5c>
		if (v2) {
    412c:	2e00      	cmp	r6, #0
    412e:	d1e2      	bne.n	40f6 <sd_mci_op_cond+0xa>
		arg = SD_MMC_VOLTAGE_SUPPORT;
    4130:	f44f 12fc 	mov.w	r2, #2064384	; 0x1f8000
    4134:	e7e0      	b.n	40f8 <sd_mci_op_cond+0xc>
			if ((resp & OCR_CCS) != 0) {
    4136:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    413a:	d005      	beq.n	4148 <sd_mci_op_cond+0x5c>
				sd_mmc_card->type |= CARD_TYPE_HC;
    413c:	4b05      	ldr	r3, [pc, #20]	; (4154 <sd_mci_op_cond+0x68>)
    413e:	681a      	ldr	r2, [r3, #0]
    4140:	7ad3      	ldrb	r3, [r2, #11]
    4142:	f043 0308 	orr.w	r3, r3, #8
    4146:	72d3      	strb	r3, [r2, #11]
}
    4148:	4628      	mov	r0, r5
    414a:	bd70      	pop	{r4, r5, r6, pc}
			return false;
    414c:	2500      	movs	r5, #0
    414e:	e7fb      	b.n	4148 <sd_mci_op_cond+0x5c>
    4150:	401f8000 	.word	0x401f8000
    4154:	200000fc 	.word	0x200000fc
    4158:	00002861 	.word	0x00002861
    415c:	00002891 	.word	0x00002891

00004160 <sd_mmc_cmd13>:
{
    4160:	b538      	push	{r3, r4, r5, lr}
	nec_timeout = 200000;
    4162:	4c0d      	ldr	r4, [pc, #52]	; (4198 <sd_mmc_cmd13+0x38>)
    4164:	e000      	b.n	4168 <sd_mmc_cmd13+0x8>
		if (nec_timeout-- == 0) {
    4166:	461c      	mov	r4, r3
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD13_SEND_STATUS, (uint32_t)sd_mmc_card->rca << 16)) {
    4168:	4b0c      	ldr	r3, [pc, #48]	; (419c <sd_mmc_cmd13+0x3c>)
    416a:	681a      	ldr	r2, [r3, #0]
    416c:	8912      	ldrh	r2, [r2, #8]
    416e:	0412      	lsls	r2, r2, #16
    4170:	f241 110d 	movw	r1, #4365	; 0x110d
    4174:	6898      	ldr	r0, [r3, #8]
    4176:	4b0a      	ldr	r3, [pc, #40]	; (41a0 <sd_mmc_cmd13+0x40>)
    4178:	4798      	blx	r3
    417a:	4605      	mov	r5, r0
    417c:	b150      	cbz	r0, 4194 <sd_mmc_cmd13+0x34>
		if (driver_get_response(sd_mmc_hal) & CARD_STATUS_READY_FOR_DATA) {
    417e:	4b07      	ldr	r3, [pc, #28]	; (419c <sd_mmc_cmd13+0x3c>)
    4180:	6898      	ldr	r0, [r3, #8]
    4182:	4b08      	ldr	r3, [pc, #32]	; (41a4 <sd_mmc_cmd13+0x44>)
    4184:	4798      	blx	r3
    4186:	f410 7f80 	tst.w	r0, #256	; 0x100
    418a:	d103      	bne.n	4194 <sd_mmc_cmd13+0x34>
		if (nec_timeout-- == 0) {
    418c:	1e63      	subs	r3, r4, #1
    418e:	2c00      	cmp	r4, #0
    4190:	d1e9      	bne.n	4166 <sd_mmc_cmd13+0x6>
			return false;
    4192:	2500      	movs	r5, #0
}
    4194:	4628      	mov	r0, r5
    4196:	bd38      	pop	{r3, r4, r5, pc}
    4198:	00030d40 	.word	0x00030d40
    419c:	200000fc 	.word	0x200000fc
    41a0:	00002861 	.word	0x00002861
    41a4:	00002891 	.word	0x00002891

000041a8 <sd_mmc_cmd9_mci>:
{
    41a8:	b510      	push	{r4, lr}
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
    41aa:	4b0a      	ldr	r3, [pc, #40]	; (41d4 <sd_mmc_cmd9_mci+0x2c>)
    41ac:	681a      	ldr	r2, [r3, #0]
    41ae:	8912      	ldrh	r2, [r2, #8]
    41b0:	0412      	lsls	r2, r2, #16
    41b2:	f641 3109 	movw	r1, #6921	; 0x1b09
    41b6:	6898      	ldr	r0, [r3, #8]
    41b8:	4b07      	ldr	r3, [pc, #28]	; (41d8 <sd_mmc_cmd9_mci+0x30>)
    41ba:	4798      	blx	r3
    41bc:	4604      	mov	r4, r0
    41be:	b908      	cbnz	r0, 41c4 <sd_mmc_cmd9_mci+0x1c>
}
    41c0:	4620      	mov	r0, r4
    41c2:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_hal, sd_mmc_card->csd);
    41c4:	4b03      	ldr	r3, [pc, #12]	; (41d4 <sd_mmc_cmd9_mci+0x2c>)
    41c6:	6819      	ldr	r1, [r3, #0]
    41c8:	310e      	adds	r1, #14
    41ca:	6898      	ldr	r0, [r3, #8]
    41cc:	4b03      	ldr	r3, [pc, #12]	; (41dc <sd_mmc_cmd9_mci+0x34>)
    41ce:	4798      	blx	r3
	return true;
    41d0:	e7f6      	b.n	41c0 <sd_mmc_cmd9_mci+0x18>
    41d2:	bf00      	nop
    41d4:	200000fc 	.word	0x200000fc
    41d8:	00002861 	.word	0x00002861
    41dc:	000028b9 	.word	0x000028b9

000041e0 <sd_acmd51>:
{
    41e0:	b510      	push	{r4, lr}
    41e2:	b084      	sub	sp, #16
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    41e4:	4b28      	ldr	r3, [pc, #160]	; (4288 <sd_acmd51+0xa8>)
    41e6:	681a      	ldr	r2, [r3, #0]
    41e8:	8912      	ldrh	r2, [r2, #8]
    41ea:	0412      	lsls	r2, r2, #16
    41ec:	f241 1137 	movw	r1, #4407	; 0x1137
    41f0:	6898      	ldr	r0, [r3, #8]
    41f2:	4b26      	ldr	r3, [pc, #152]	; (428c <sd_acmd51+0xac>)
    41f4:	4798      	blx	r3
    41f6:	4603      	mov	r3, r0
    41f8:	b910      	cbnz	r0, 4200 <sd_acmd51+0x20>
}
    41fa:	4618      	mov	r0, r3
    41fc:	b004      	add	sp, #16
    41fe:	bd10      	pop	{r4, pc}
	if (!driver_adtc_start(sd_mmc_hal, SD_ACMD51_SEND_SCR, 0, SD_SCR_REG_BSIZE, 1, true)) {
    4200:	4b21      	ldr	r3, [pc, #132]	; (4288 <sd_acmd51+0xa8>)
    4202:	6898      	ldr	r0, [r3, #8]
    4204:	2301      	movs	r3, #1
    4206:	9301      	str	r3, [sp, #4]
    4208:	9300      	str	r3, [sp, #0]
    420a:	2308      	movs	r3, #8
    420c:	2200      	movs	r2, #0
    420e:	4920      	ldr	r1, [pc, #128]	; (4290 <sd_acmd51+0xb0>)
    4210:	4c20      	ldr	r4, [pc, #128]	; (4294 <sd_acmd51+0xb4>)
    4212:	47a0      	blx	r4
    4214:	4603      	mov	r3, r0
    4216:	2800      	cmp	r0, #0
    4218:	d0ef      	beq.n	41fa <sd_acmd51+0x1a>
	if (!driver_start_read_blocks(sd_mmc_hal, scr, 1)) {
    421a:	2201      	movs	r2, #1
    421c:	a902      	add	r1, sp, #8
    421e:	4b1a      	ldr	r3, [pc, #104]	; (4288 <sd_acmd51+0xa8>)
    4220:	6898      	ldr	r0, [r3, #8]
    4222:	4b1d      	ldr	r3, [pc, #116]	; (4298 <sd_acmd51+0xb8>)
    4224:	4798      	blx	r3
    4226:	4603      	mov	r3, r0
    4228:	2800      	cmp	r0, #0
    422a:	d0e6      	beq.n	41fa <sd_acmd51+0x1a>
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    422c:	4b16      	ldr	r3, [pc, #88]	; (4288 <sd_acmd51+0xa8>)
    422e:	6898      	ldr	r0, [r3, #8]
    4230:	4b1a      	ldr	r3, [pc, #104]	; (429c <sd_acmd51+0xbc>)
    4232:	4798      	blx	r3
    4234:	4603      	mov	r3, r0
    4236:	2800      	cmp	r0, #0
    4238:	d0df      	beq.n	41fa <sd_acmd51+0x1a>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    423a:	f89d 2008 	ldrb.w	r2, [sp, #8]
	switch (SD_SCR_SD_SPEC(scr)) {
    423e:	f002 020f 	and.w	r2, r2, #15
    4242:	2a01      	cmp	r2, #1
    4244:	d00c      	beq.n	4260 <sd_acmd51+0x80>
    4246:	b132      	cbz	r2, 4256 <sd_acmd51+0x76>
    4248:	2a02      	cmp	r2, #2
    424a:	d00e      	beq.n	426a <sd_acmd51+0x8a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    424c:	4a0e      	ldr	r2, [pc, #56]	; (4288 <sd_acmd51+0xa8>)
    424e:	6812      	ldr	r2, [r2, #0]
    4250:	2110      	movs	r1, #16
    4252:	7311      	strb	r1, [r2, #12]
		break;
    4254:	e7d1      	b.n	41fa <sd_acmd51+0x1a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    4256:	4a0c      	ldr	r2, [pc, #48]	; (4288 <sd_acmd51+0xa8>)
    4258:	6812      	ldr	r2, [r2, #0]
    425a:	2110      	movs	r1, #16
    425c:	7311      	strb	r1, [r2, #12]
		break;
    425e:	e7cc      	b.n	41fa <sd_acmd51+0x1a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    4260:	4a09      	ldr	r2, [pc, #36]	; (4288 <sd_acmd51+0xa8>)
    4262:	6812      	ldr	r2, [r2, #0]
    4264:	211a      	movs	r1, #26
    4266:	7311      	strb	r1, [r2, #12]
		break;
    4268:	e7c7      	b.n	41fa <sd_acmd51+0x1a>
    426a:	f89d 200a 	ldrb.w	r2, [sp, #10]
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    426e:	09d2      	lsrs	r2, r2, #7
    4270:	d104      	bne.n	427c <sd_acmd51+0x9c>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    4272:	4a05      	ldr	r2, [pc, #20]	; (4288 <sd_acmd51+0xa8>)
    4274:	6812      	ldr	r2, [r2, #0]
    4276:	2120      	movs	r1, #32
    4278:	7311      	strb	r1, [r2, #12]
    427a:	e7be      	b.n	41fa <sd_acmd51+0x1a>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    427c:	4a02      	ldr	r2, [pc, #8]	; (4288 <sd_acmd51+0xa8>)
    427e:	6812      	ldr	r2, [r2, #0]
    4280:	2130      	movs	r1, #48	; 0x30
    4282:	7311      	strb	r1, [r2, #12]
    4284:	e7b9      	b.n	41fa <sd_acmd51+0x1a>
    4286:	bf00      	nop
    4288:	200000fc 	.word	0x200000fc
    428c:	00002861 	.word	0x00002861
    4290:	00081133 	.word	0x00081133
    4294:	000028ed 	.word	0x000028ed
    4298:	00002931 	.word	0x00002931
    429c:	000029a1 	.word	0x000029a1

000042a0 <sd_cm6_set_high_speed>:
{
    42a0:	b530      	push	{r4, r5, lr}
    42a2:	b093      	sub	sp, #76	; 0x4c
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
    42a4:	2440      	movs	r4, #64	; 0x40
    42a6:	4622      	mov	r2, r4
    42a8:	2100      	movs	r1, #0
    42aa:	a802      	add	r0, sp, #8
    42ac:	4b20      	ldr	r3, [pc, #128]	; (4330 <sd_cm6_set_high_speed+0x90>)
    42ae:	4798      	blx	r3
	if (!driver_adtc_start(sd_mmc_hal,
    42b0:	2301      	movs	r3, #1
    42b2:	9301      	str	r3, [sp, #4]
    42b4:	9300      	str	r3, [sp, #0]
    42b6:	4623      	mov	r3, r4
    42b8:	4a1e      	ldr	r2, [pc, #120]	; (4334 <sd_cm6_set_high_speed+0x94>)
    42ba:	491f      	ldr	r1, [pc, #124]	; (4338 <sd_cm6_set_high_speed+0x98>)
    42bc:	481f      	ldr	r0, [pc, #124]	; (433c <sd_cm6_set_high_speed+0x9c>)
    42be:	6880      	ldr	r0, [r0, #8]
    42c0:	4c1f      	ldr	r4, [pc, #124]	; (4340 <sd_cm6_set_high_speed+0xa0>)
    42c2:	47a0      	blx	r4
    42c4:	4604      	mov	r4, r0
    42c6:	b358      	cbz	r0, 4320 <sd_cm6_set_high_speed+0x80>
	if (!driver_start_read_blocks(sd_mmc_hal, switch_status, 1)) {
    42c8:	2201      	movs	r2, #1
    42ca:	a902      	add	r1, sp, #8
    42cc:	4b1b      	ldr	r3, [pc, #108]	; (433c <sd_cm6_set_high_speed+0x9c>)
    42ce:	6898      	ldr	r0, [r3, #8]
    42d0:	4b1c      	ldr	r3, [pc, #112]	; (4344 <sd_cm6_set_high_speed+0xa4>)
    42d2:	4798      	blx	r3
    42d4:	4604      	mov	r4, r0
    42d6:	b318      	cbz	r0, 4320 <sd_cm6_set_high_speed+0x80>
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    42d8:	4b18      	ldr	r3, [pc, #96]	; (433c <sd_cm6_set_high_speed+0x9c>)
    42da:	6898      	ldr	r0, [r3, #8]
    42dc:	4b1a      	ldr	r3, [pc, #104]	; (4348 <sd_cm6_set_high_speed+0xa8>)
    42de:	4798      	blx	r3
    42e0:	4604      	mov	r4, r0
    42e2:	b1e8      	cbz	r0, 4320 <sd_cm6_set_high_speed+0x80>
	if (driver_get_response(sd_mmc_hal) & CARD_STATUS_SWITCH_ERROR) {
    42e4:	4b15      	ldr	r3, [pc, #84]	; (433c <sd_cm6_set_high_speed+0x9c>)
    42e6:	6898      	ldr	r0, [r3, #8]
    42e8:	4b18      	ldr	r3, [pc, #96]	; (434c <sd_cm6_set_high_speed+0xac>)
    42ea:	4798      	blx	r3
    42ec:	f010 0f80 	tst.w	r0, #128	; 0x80
    42f0:	d119      	bne.n	4326 <sd_cm6_set_high_speed+0x86>
    42f2:	f89d 3018 	ldrb.w	r3, [sp, #24]
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status) == SD_SW_STATUS_FUN_GRP_RC_ERROR) {
    42f6:	f003 030f 	and.w	r3, r3, #15
    42fa:	2b0f      	cmp	r3, #15
    42fc:	d010      	beq.n	4320 <sd_cm6_set_high_speed+0x80>
    42fe:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    4302:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
    4306:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
    430a:	d10e      	bne.n	432a <sd_cm6_set_high_speed+0x8a>
	driver_send_clock(sd_mmc_hal);
    430c:	4d0b      	ldr	r5, [pc, #44]	; (433c <sd_cm6_set_high_speed+0x9c>)
    430e:	68a8      	ldr	r0, [r5, #8]
    4310:	4b0f      	ldr	r3, [pc, #60]	; (4350 <sd_cm6_set_high_speed+0xb0>)
    4312:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
    4314:	682b      	ldr	r3, [r5, #0]
    4316:	2201      	movs	r2, #1
    4318:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
    431a:	681a      	ldr	r2, [r3, #0]
    431c:	0052      	lsls	r2, r2, #1
    431e:	601a      	str	r2, [r3, #0]
}
    4320:	4620      	mov	r0, r4
    4322:	b013      	add	sp, #76	; 0x4c
    4324:	bd30      	pop	{r4, r5, pc}
		return false;
    4326:	2400      	movs	r4, #0
    4328:	e7fa      	b.n	4320 <sd_cm6_set_high_speed+0x80>
		return false;
    432a:	2400      	movs	r4, #0
    432c:	e7f8      	b.n	4320 <sd_cm6_set_high_speed+0x80>
    432e:	bf00      	nop
    4330:	00004dc1 	.word	0x00004dc1
    4334:	80ffff01 	.word	0x80ffff01
    4338:	00081106 	.word	0x00081106
    433c:	200000fc 	.word	0x200000fc
    4340:	000028ed 	.word	0x000028ed
    4344:	00002931 	.word	0x00002931
    4348:	000029a1 	.word	0x000029a1
    434c:	00002891 	.word	0x00002891
    4350:	00002839 	.word	0x00002839

00004354 <sd_mmc_mci_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_mci_card_init(void)
{
    4354:	b5f0      	push	{r4, r5, r6, r7, lr}
    4356:	b085      	sub	sp, #20
	uint8_t v2 = 0;
    4358:	2400      	movs	r4, #0
    435a:	f88d 400f 	strb.w	r4, [sp, #15]
#if (CONF_SDIO_SUPPORT == 1)
	uint8_t data = 0x08;
    435e:	ae04      	add	r6, sp, #16
    4360:	2308      	movs	r3, #8
    4362:	f806 3d02 	strb.w	r3, [r6, #-2]!
#endif

	/* In first, try to install SD/SDIO card */
	sd_mmc_card->type    = CARD_TYPE_SD;
    4366:	4d6f      	ldr	r5, [pc, #444]	; (4524 <sd_mmc_mci_card_init+0x1d0>)
    4368:	682b      	ldr	r3, [r5, #0]
    436a:	2701      	movs	r7, #1
    436c:	72df      	strb	r7, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    436e:	731c      	strb	r4, [r3, #12]
	sd_mmc_card->rca     = 0;
    4370:	811c      	strh	r4, [r3, #8]

	/* Card need of 74 cycles clock minimum to start */
	driver_send_clock(sd_mmc_hal);
    4372:	68a8      	ldr	r0, [r5, #8]
    4374:	4b6c      	ldr	r3, [pc, #432]	; (4528 <sd_mmc_mci_card_init+0x1d4>)
    4376:	4798      	blx	r3

#if (CONF_SDIO_SUPPORT == 1)
	/* CMD52 Reset SDIO */
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_IOA, 0, &data);
    4378:	9600      	str	r6, [sp, #0]
    437a:	4623      	mov	r3, r4
    437c:	2206      	movs	r2, #6
    437e:	4621      	mov	r1, r4
    4380:	4638      	mov	r0, r7
    4382:	4e6a      	ldr	r6, [pc, #424]	; (452c <sd_mmc_mci_card_init+0x1d8>)
    4384:	47b0      	blx	r6
#endif

	/* CMD0 - Reset all cards to idle state.*/
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
    4386:	4622      	mov	r2, r4
    4388:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    438c:	68a8      	ldr	r0, [r5, #8]
    438e:	4b68      	ldr	r3, [pc, #416]	; (4530 <sd_mmc_mci_card_init+0x1dc>)
    4390:	4798      	blx	r3
    4392:	4604      	mov	r4, r0
    4394:	b910      	cbnz	r0, 439c <sd_mmc_mci_card_init+0x48>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return false;
		}
	}
	return true;
}
    4396:	4620      	mov	r0, r4
    4398:	b005      	add	sp, #20
    439a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!sd_cmd8(&v2)) {
    439c:	f10d 000f 	add.w	r0, sp, #15
    43a0:	4b64      	ldr	r3, [pc, #400]	; (4534 <sd_mmc_mci_card_init+0x1e0>)
    43a2:	4798      	blx	r3
    43a4:	4604      	mov	r4, r0
    43a6:	2800      	cmp	r0, #0
    43a8:	d0f5      	beq.n	4396 <sd_mmc_mci_card_init+0x42>
	if (!sdio_op_cond()) {
    43aa:	4b63      	ldr	r3, [pc, #396]	; (4538 <sd_mmc_mci_card_init+0x1e4>)
    43ac:	4798      	blx	r3
    43ae:	4604      	mov	r4, r0
    43b0:	2800      	cmp	r0, #0
    43b2:	d0f0      	beq.n	4396 <sd_mmc_mci_card_init+0x42>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    43b4:	682b      	ldr	r3, [r5, #0]
    43b6:	7adb      	ldrb	r3, [r3, #11]
    43b8:	f013 0f01 	tst.w	r3, #1
    43bc:	f040 8089 	bne.w	44d2 <sd_mmc_mci_card_init+0x17e>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    43c0:	4b58      	ldr	r3, [pc, #352]	; (4524 <sd_mmc_mci_card_init+0x1d0>)
    43c2:	681b      	ldr	r3, [r3, #0]
    43c4:	7adb      	ldrb	r3, [r3, #11]
    43c6:	f013 0f01 	tst.w	r3, #1
    43ca:	d009      	beq.n	43e0 <sd_mmc_mci_card_init+0x8c>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD2_ALL_SEND_CID, 0)) {
    43cc:	2200      	movs	r2, #0
    43ce:	f645 3102 	movw	r1, #23298	; 0x5b02
    43d2:	4b54      	ldr	r3, [pc, #336]	; (4524 <sd_mmc_mci_card_init+0x1d0>)
    43d4:	6898      	ldr	r0, [r3, #8]
    43d6:	4b56      	ldr	r3, [pc, #344]	; (4530 <sd_mmc_mci_card_init+0x1dc>)
    43d8:	4798      	blx	r3
    43da:	4604      	mov	r4, r0
    43dc:	2800      	cmp	r0, #0
    43de:	d0da      	beq.n	4396 <sd_mmc_mci_card_init+0x42>
	if (!driver_send_cmd(sd_mmc_hal, SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
    43e0:	2200      	movs	r2, #0
    43e2:	f245 1103 	movw	r1, #20739	; 0x5103
    43e6:	4b4f      	ldr	r3, [pc, #316]	; (4524 <sd_mmc_mci_card_init+0x1d0>)
    43e8:	6898      	ldr	r0, [r3, #8]
    43ea:	4b51      	ldr	r3, [pc, #324]	; (4530 <sd_mmc_mci_card_init+0x1dc>)
    43ec:	4798      	blx	r3
    43ee:	4604      	mov	r4, r0
    43f0:	2800      	cmp	r0, #0
    43f2:	d0d0      	beq.n	4396 <sd_mmc_mci_card_init+0x42>
	sd_mmc_card->rca = (driver_get_response(sd_mmc_hal) >> 16) & 0xFFFF;
    43f4:	4c4b      	ldr	r4, [pc, #300]	; (4524 <sd_mmc_mci_card_init+0x1d0>)
    43f6:	6825      	ldr	r5, [r4, #0]
    43f8:	68a0      	ldr	r0, [r4, #8]
    43fa:	4b50      	ldr	r3, [pc, #320]	; (453c <sd_mmc_mci_card_init+0x1e8>)
    43fc:	4798      	blx	r3
    43fe:	0c00      	lsrs	r0, r0, #16
    4400:	8128      	strh	r0, [r5, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    4402:	6823      	ldr	r3, [r4, #0]
    4404:	7adb      	ldrb	r3, [r3, #11]
    4406:	f013 0f01 	tst.w	r3, #1
    440a:	d006      	beq.n	441a <sd_mmc_mci_card_init+0xc6>
		if (!sd_mmc_cmd9_mci()) {
    440c:	4b4c      	ldr	r3, [pc, #304]	; (4540 <sd_mmc_mci_card_init+0x1ec>)
    440e:	4798      	blx	r3
    4410:	4604      	mov	r4, r0
    4412:	2800      	cmp	r0, #0
    4414:	d0bf      	beq.n	4396 <sd_mmc_mci_card_init+0x42>
		sd_decode_csd();
    4416:	4b4b      	ldr	r3, [pc, #300]	; (4544 <sd_mmc_mci_card_init+0x1f0>)
    4418:	4798      	blx	r3
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD7_SELECT_CARD_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    441a:	4b42      	ldr	r3, [pc, #264]	; (4524 <sd_mmc_mci_card_init+0x1d0>)
    441c:	681a      	ldr	r2, [r3, #0]
    441e:	8912      	ldrh	r2, [r2, #8]
    4420:	0412      	lsls	r2, r2, #16
    4422:	f243 1107 	movw	r1, #12551	; 0x3107
    4426:	6898      	ldr	r0, [r3, #8]
    4428:	4b41      	ldr	r3, [pc, #260]	; (4530 <sd_mmc_mci_card_init+0x1dc>)
    442a:	4798      	blx	r3
    442c:	4604      	mov	r4, r0
    442e:	2800      	cmp	r0, #0
    4430:	d0b1      	beq.n	4396 <sd_mmc_mci_card_init+0x42>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    4432:	4b3c      	ldr	r3, [pc, #240]	; (4524 <sd_mmc_mci_card_init+0x1d0>)
    4434:	681b      	ldr	r3, [r3, #0]
    4436:	7adb      	ldrb	r3, [r3, #11]
    4438:	f013 0f01 	tst.w	r3, #1
    443c:	d155      	bne.n	44ea <sd_mmc_mci_card_init+0x196>
	if (IS_SDIO()) {
    443e:	4b39      	ldr	r3, [pc, #228]	; (4524 <sd_mmc_mci_card_init+0x1d0>)
    4440:	681b      	ldr	r3, [r3, #0]
    4442:	7adb      	ldrb	r3, [r3, #11]
    4444:	f013 0f04 	tst.w	r3, #4
    4448:	d003      	beq.n	4452 <sd_mmc_mci_card_init+0xfe>
		if (!sdio_get_max_speed()) {
    444a:	4b3f      	ldr	r3, [pc, #252]	; (4548 <sd_mmc_mci_card_init+0x1f4>)
    444c:	4798      	blx	r3
    444e:	2800      	cmp	r0, #0
    4450:	d063      	beq.n	451a <sd_mmc_mci_card_init+0x1c6>
	if ((4 <= driver_get_bus_width(sd_mmc_hal, sd_mmc_slot_sel))) {
    4452:	4b34      	ldr	r3, [pc, #208]	; (4524 <sd_mmc_mci_card_init+0x1d0>)
    4454:	7919      	ldrb	r1, [r3, #4]
    4456:	6898      	ldr	r0, [r3, #8]
    4458:	4b3c      	ldr	r3, [pc, #240]	; (454c <sd_mmc_mci_card_init+0x1f8>)
    445a:	4798      	blx	r3
    445c:	2803      	cmp	r0, #3
    445e:	d911      	bls.n	4484 <sd_mmc_mci_card_init+0x130>
		if (IS_SDIO()) {
    4460:	4b30      	ldr	r3, [pc, #192]	; (4524 <sd_mmc_mci_card_init+0x1d0>)
    4462:	681b      	ldr	r3, [r3, #0]
    4464:	7adb      	ldrb	r3, [r3, #11]
    4466:	f013 0f04 	tst.w	r3, #4
    446a:	d144      	bne.n	44f6 <sd_mmc_mci_card_init+0x1a2>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
    446c:	4b2d      	ldr	r3, [pc, #180]	; (4524 <sd_mmc_mci_card_init+0x1d0>)
    446e:	681b      	ldr	r3, [r3, #0]
    4470:	7adb      	ldrb	r3, [r3, #11]
    4472:	f013 0f01 	tst.w	r3, #1
    4476:	d003      	beq.n	4480 <sd_mmc_mci_card_init+0x12c>
			if (!sd_acmd6()) {
    4478:	4b35      	ldr	r3, [pc, #212]	; (4550 <sd_mmc_mci_card_init+0x1fc>)
    447a:	4798      	blx	r3
    447c:	2800      	cmp	r0, #0
    447e:	d04e      	beq.n	451e <sd_mmc_mci_card_init+0x1ca>
		sd_mmc_configure_slot();
    4480:	4b34      	ldr	r3, [pc, #208]	; (4554 <sd_mmc_mci_card_init+0x200>)
    4482:	4798      	blx	r3
	if (driver_is_high_speed_capable(sd_mmc_hal)) {
    4484:	4b27      	ldr	r3, [pc, #156]	; (4524 <sd_mmc_mci_card_init+0x1d0>)
    4486:	6898      	ldr	r0, [r3, #8]
    4488:	4b33      	ldr	r3, [pc, #204]	; (4558 <sd_mmc_mci_card_init+0x204>)
    448a:	4798      	blx	r3
    448c:	b180      	cbz	r0, 44b0 <sd_mmc_mci_card_init+0x15c>
		if (IS_SDIO()) {
    448e:	4b25      	ldr	r3, [pc, #148]	; (4524 <sd_mmc_mci_card_init+0x1d0>)
    4490:	681b      	ldr	r3, [r3, #0]
    4492:	7adb      	ldrb	r3, [r3, #11]
    4494:	f013 0f04 	tst.w	r3, #4
    4498:	d133      	bne.n	4502 <sd_mmc_mci_card_init+0x1ae>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
    449a:	4b22      	ldr	r3, [pc, #136]	; (4524 <sd_mmc_mci_card_init+0x1d0>)
    449c:	681b      	ldr	r3, [r3, #0]
    449e:	7ada      	ldrb	r2, [r3, #11]
    44a0:	f012 0f01 	tst.w	r2, #1
    44a4:	d002      	beq.n	44ac <sd_mmc_mci_card_init+0x158>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
    44a6:	7b1b      	ldrb	r3, [r3, #12]
    44a8:	2b10      	cmp	r3, #16
    44aa:	d830      	bhi.n	450e <sd_mmc_mci_card_init+0x1ba>
		sd_mmc_configure_slot();
    44ac:	4b29      	ldr	r3, [pc, #164]	; (4554 <sd_mmc_mci_card_init+0x200>)
    44ae:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    44b0:	4b1c      	ldr	r3, [pc, #112]	; (4524 <sd_mmc_mci_card_init+0x1d0>)
    44b2:	681b      	ldr	r3, [r3, #0]
    44b4:	7adb      	ldrb	r3, [r3, #11]
    44b6:	f013 0f01 	tst.w	r3, #1
    44ba:	f43f af6c 	beq.w	4396 <sd_mmc_mci_card_init+0x42>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    44be:	f44f 7200 	mov.w	r2, #512	; 0x200
    44c2:	f241 1110 	movw	r1, #4368	; 0x1110
    44c6:	4b17      	ldr	r3, [pc, #92]	; (4524 <sd_mmc_mci_card_init+0x1d0>)
    44c8:	6898      	ldr	r0, [r3, #8]
    44ca:	4b19      	ldr	r3, [pc, #100]	; (4530 <sd_mmc_mci_card_init+0x1dc>)
    44cc:	4798      	blx	r3
    44ce:	4604      	mov	r4, r0
    44d0:	e761      	b.n	4396 <sd_mmc_mci_card_init+0x42>
		if (!sd_mci_op_cond(v2)) {
    44d2:	f89d 000f 	ldrb.w	r0, [sp, #15]
    44d6:	4b21      	ldr	r3, [pc, #132]	; (455c <sd_mmc_mci_card_init+0x208>)
    44d8:	4798      	blx	r3
    44da:	4604      	mov	r4, r0
    44dc:	2800      	cmp	r0, #0
    44de:	f47f af6f 	bne.w	43c0 <sd_mmc_mci_card_init+0x6c>
			sd_mmc_card->type = CARD_TYPE_UNKNOWN;
    44e2:	682b      	ldr	r3, [r5, #0]
    44e4:	2200      	movs	r2, #0
    44e6:	72da      	strb	r2, [r3, #11]
			return false;
    44e8:	e755      	b.n	4396 <sd_mmc_mci_card_init+0x42>
		if (!sd_acmd51()) {
    44ea:	4b1d      	ldr	r3, [pc, #116]	; (4560 <sd_mmc_mci_card_init+0x20c>)
    44ec:	4798      	blx	r3
    44ee:	2800      	cmp	r0, #0
    44f0:	d1a5      	bne.n	443e <sd_mmc_mci_card_init+0xea>
			return false;
    44f2:	4604      	mov	r4, r0
    44f4:	e74f      	b.n	4396 <sd_mmc_mci_card_init+0x42>
			if (!sdio_cmd52_set_bus_width()) {
    44f6:	4b1b      	ldr	r3, [pc, #108]	; (4564 <sd_mmc_mci_card_init+0x210>)
    44f8:	4798      	blx	r3
    44fa:	2800      	cmp	r0, #0
    44fc:	d1b6      	bne.n	446c <sd_mmc_mci_card_init+0x118>
				return false;
    44fe:	4604      	mov	r4, r0
    4500:	e749      	b.n	4396 <sd_mmc_mci_card_init+0x42>
			if (!sdio_cmd52_set_high_speed()) {
    4502:	4b19      	ldr	r3, [pc, #100]	; (4568 <sd_mmc_mci_card_init+0x214>)
    4504:	4798      	blx	r3
    4506:	2800      	cmp	r0, #0
    4508:	d1c7      	bne.n	449a <sd_mmc_mci_card_init+0x146>
				return false;
    450a:	4604      	mov	r4, r0
    450c:	e743      	b.n	4396 <sd_mmc_mci_card_init+0x42>
				if (!sd_cm6_set_high_speed()) {
    450e:	4b17      	ldr	r3, [pc, #92]	; (456c <sd_mmc_mci_card_init+0x218>)
    4510:	4798      	blx	r3
    4512:	2800      	cmp	r0, #0
    4514:	d1ca      	bne.n	44ac <sd_mmc_mci_card_init+0x158>
					return false;
    4516:	4604      	mov	r4, r0
    4518:	e73d      	b.n	4396 <sd_mmc_mci_card_init+0x42>
			return false;
    451a:	4604      	mov	r4, r0
    451c:	e73b      	b.n	4396 <sd_mmc_mci_card_init+0x42>
				return false;
    451e:	4604      	mov	r4, r0
    4520:	e739      	b.n	4396 <sd_mmc_mci_card_init+0x42>
    4522:	bf00      	nop
    4524:	200000fc 	.word	0x200000fc
    4528:	00002839 	.word	0x00002839
    452c:	00003e0d 	.word	0x00003e0d
    4530:	00002861 	.word	0x00002861
    4534:	0000401d 	.word	0x0000401d
    4538:	0000406d 	.word	0x0000406d
    453c:	00002891 	.word	0x00002891
    4540:	000041a9 	.word	0x000041a9
    4544:	00003bd1 	.word	0x00003bd1
    4548:	00003e75 	.word	0x00003e75
    454c:	000027e5 	.word	0x000027e5
    4550:	00003dc9 	.word	0x00003dc9
    4554:	00003c59 	.word	0x00003c59
    4558:	00002811 	.word	0x00002811
    455c:	000040ed 	.word	0x000040ed
    4560:	000041e1 	.word	0x000041e1
    4564:	00003f71 	.word	0x00003f71
    4568:	00003fc5 	.word	0x00003fc5
    456c:	000042a1 	.word	0x000042a1

00004570 <sd_mmc_deselect_slot>:
{
    4570:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < CONF_SD_MMC_MEM_CNT) {
    4572:	4b04      	ldr	r3, [pc, #16]	; (4584 <sd_mmc_deselect_slot+0x14>)
    4574:	7919      	ldrb	r1, [r3, #4]
    4576:	b101      	cbz	r1, 457a <sd_mmc_deselect_slot+0xa>
    4578:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_hal, sd_mmc_slot_sel);
    457a:	6898      	ldr	r0, [r3, #8]
    457c:	4b02      	ldr	r3, [pc, #8]	; (4588 <sd_mmc_deselect_slot+0x18>)
    457e:	4798      	blx	r3
}
    4580:	e7fa      	b.n	4578 <sd_mmc_deselect_slot+0x8>
    4582:	bf00      	nop
    4584:	200000fc 	.word	0x200000fc
    4588:	000027b9 	.word	0x000027b9

0000458c <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
    458c:	b430      	push	{r4, r5}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    458e:	2300      	movs	r3, #0
    4590:	b13b      	cbz	r3, 45a2 <sd_mmc_init+0x16>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
    4592:	4b08      	ldr	r3, [pc, #32]	; (45b4 <sd_mmc_init+0x28>)
    4594:	24ff      	movs	r4, #255	; 0xff
    4596:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
    4598:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
    459a:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
    459c:	635a      	str	r2, [r3, #52]	; 0x34
}
    459e:	bc30      	pop	{r4, r5}
    45a0:	4770      	bx	lr
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    45a2:	4c04      	ldr	r4, [pc, #16]	; (45b4 <sd_mmc_init+0x28>)
    45a4:	eb04 1443 	add.w	r4, r4, r3, lsl #5
    45a8:	2504      	movs	r5, #4
    45aa:	76a5      	strb	r5, [r4, #26]
	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    45ac:	3301      	adds	r3, #1
    45ae:	b2db      	uxtb	r3, r3
    45b0:	e7ee      	b.n	4590 <sd_mmc_init+0x4>
    45b2:	bf00      	nop
    45b4:	200000fc 	.word	0x200000fc

000045b8 <sd_mmc_check>:
{
	return CONF_SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    45b8:	b510      	push	{r4, lr}
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    45ba:	4b0d      	ldr	r3, [pc, #52]	; (45f0 <sd_mmc_check+0x38>)
    45bc:	4798      	blx	r3
    45be:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    45c0:	2801      	cmp	r0, #1
    45c2:	d003      	beq.n	45cc <sd_mmc_check+0x14>
		sd_mmc_deselect_slot();
    45c4:	4b0b      	ldr	r3, [pc, #44]	; (45f4 <sd_mmc_check+0x3c>)
    45c6:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
	}
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    45c8:	4620      	mov	r0, r4
    45ca:	bd10      	pop	{r4, pc}
	if (sd_mmc_mci_card_init()) {
    45cc:	4b0a      	ldr	r3, [pc, #40]	; (45f8 <sd_mmc_check+0x40>)
    45ce:	4798      	blx	r3
    45d0:	b930      	cbnz	r0, 45e0 <sd_mmc_check+0x28>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    45d2:	4b0a      	ldr	r3, [pc, #40]	; (45fc <sd_mmc_check+0x44>)
    45d4:	681b      	ldr	r3, [r3, #0]
    45d6:	2403      	movs	r4, #3
    45d8:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
    45da:	4b06      	ldr	r3, [pc, #24]	; (45f4 <sd_mmc_check+0x3c>)
    45dc:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    45de:	e7f3      	b.n	45c8 <sd_mmc_check+0x10>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    45e0:	4b06      	ldr	r3, [pc, #24]	; (45fc <sd_mmc_check+0x44>)
    45e2:	681b      	ldr	r3, [r3, #0]
    45e4:	2200      	movs	r2, #0
    45e6:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    45e8:	4b02      	ldr	r3, [pc, #8]	; (45f4 <sd_mmc_check+0x3c>)
    45ea:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    45ec:	e7ec      	b.n	45c8 <sd_mmc_check+0x10>
    45ee:	bf00      	nop
    45f0:	00003c85 	.word	0x00003c85
    45f4:	00004571 	.word	0x00004571
    45f8:	00004355 	.word	0x00004355
    45fc:	200000fc 	.word	0x200000fc

00004600 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    4600:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    4602:	4b05      	ldr	r3, [pc, #20]	; (4618 <sd_mmc_get_type+0x18>)
    4604:	4798      	blx	r3
    4606:	b108      	cbz	r0, 460c <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
    4608:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    460a:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
    460c:	4b03      	ldr	r3, [pc, #12]	; (461c <sd_mmc_get_type+0x1c>)
    460e:	4798      	blx	r3
	return sd_mmc_card->type;
    4610:	4b03      	ldr	r3, [pc, #12]	; (4620 <sd_mmc_get_type+0x20>)
    4612:	681b      	ldr	r3, [r3, #0]
    4614:	7ad8      	ldrb	r0, [r3, #11]
    4616:	bd08      	pop	{r3, pc}
    4618:	00003c85 	.word	0x00003c85
    461c:	00004571 	.word	0x00004571
    4620:	200000fc 	.word	0x200000fc

00004624 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    4624:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    4626:	4b05      	ldr	r3, [pc, #20]	; (463c <sd_mmc_get_capacity+0x18>)
    4628:	4798      	blx	r3
    462a:	b108      	cbz	r0, 4630 <sd_mmc_get_capacity+0xc>
		return 0;
    462c:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    462e:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
    4630:	4b03      	ldr	r3, [pc, #12]	; (4640 <sd_mmc_get_capacity+0x1c>)
    4632:	4798      	blx	r3
	return sd_mmc_card->capacity;
    4634:	4b03      	ldr	r3, [pc, #12]	; (4644 <sd_mmc_get_capacity+0x20>)
    4636:	681b      	ldr	r3, [r3, #0]
    4638:	6858      	ldr	r0, [r3, #4]
    463a:	bd08      	pop	{r3, pc}
    463c:	00003c85 	.word	0x00003c85
    4640:	00004571 	.word	0x00004571
    4644:	200000fc 	.word	0x200000fc

00004648 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
	/* No detection, always writable */
	if (!_wp || _wp[slot].pin == -1) {
    4648:	4b19      	ldr	r3, [pc, #100]	; (46b0 <sd_mmc_is_write_protected+0x68>)
    464a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    464c:	b35b      	cbz	r3, 46a6 <sd_mmc_is_write_protected+0x5e>
{
    464e:	b570      	push	{r4, r5, r6, lr}
    4650:	b082      	sub	sp, #8
	if (!_wp || _wp[slot].pin == -1) {
    4652:	0085      	lsls	r5, r0, #2
    4654:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
    4658:	f1b3 3fff 	cmp.w	r3, #4294967295
    465c:	d025      	beq.n	46aa <sd_mmc_is_write_protected+0x62>
		return false;
	}
	/* Write Protect Detect */
	if (gpio_get_pin_level(_wp[slot].pin) == _wp[slot].val) {
    465e:	b2de      	uxtb	r6, r3
    4660:	0974      	lsrs	r4, r6, #5
	CRITICAL_SECTION_ENTER();
    4662:	a801      	add	r0, sp, #4
    4664:	4b13      	ldr	r3, [pc, #76]	; (46b4 <sd_mmc_is_write_protected+0x6c>)
    4666:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    4668:	4913      	ldr	r1, [pc, #76]	; (46b8 <sd_mmc_is_write_protected+0x70>)
    466a:	01e3      	lsls	r3, r4, #7
    466c:	18ca      	adds	r2, r1, r3
    466e:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    4670:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    4672:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    4674:	405c      	eors	r4, r3
    4676:	400c      	ands	r4, r1
    4678:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    467a:	a801      	add	r0, sp, #4
    467c:	4b0f      	ldr	r3, [pc, #60]	; (46bc <sd_mmc_is_write_protected+0x74>)
    467e:	4798      	blx	r3
    4680:	f006 031f 	and.w	r3, r6, #31
    4684:	2201      	movs	r2, #1
    4686:	fa02 f303 	lsl.w	r3, r2, r3
    468a:	4223      	tst	r3, r4
    468c:	bf08      	it	eq
    468e:	2200      	moveq	r2, #0
    4690:	4b07      	ldr	r3, [pc, #28]	; (46b0 <sd_mmc_is_write_protected+0x68>)
    4692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4694:	441d      	add	r5, r3
    4696:	886b      	ldrh	r3, [r5, #2]
    4698:	429a      	cmp	r2, r3
    469a:	d002      	beq.n	46a2 <sd_mmc_is_write_protected+0x5a>
		return true;
	}
	return false;
    469c:	2000      	movs	r0, #0
}
    469e:	b002      	add	sp, #8
    46a0:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    46a2:	2001      	movs	r0, #1
    46a4:	e7fb      	b.n	469e <sd_mmc_is_write_protected+0x56>
		return false;
    46a6:	2000      	movs	r0, #0
    46a8:	4770      	bx	lr
    46aa:	2000      	movs	r0, #0
    46ac:	e7f7      	b.n	469e <sd_mmc_is_write_protected+0x56>
    46ae:	bf00      	nop
    46b0:	200000fc 	.word	0x200000fc
    46b4:	000024a5 	.word	0x000024a5
    46b8:	41008000 	.word	0x41008000
    46bc:	000024b3 	.word	0x000024b3

000046c0 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
    46c0:	b570      	push	{r4, r5, r6, lr}
    46c2:	b082      	sub	sp, #8
    46c4:	460e      	mov	r6, r1
    46c6:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    46c8:	4b1b      	ldr	r3, [pc, #108]	; (4738 <sd_mmc_init_read_blocks+0x78>)
    46ca:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    46cc:	4604      	mov	r4, r0
    46ce:	b110      	cbz	r0, 46d6 <sd_mmc_init_read_blocks+0x16>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    46d0:	4620      	mov	r0, r4
    46d2:	b002      	add	sp, #8
    46d4:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    46d6:	4b19      	ldr	r3, [pc, #100]	; (473c <sd_mmc_init_read_blocks+0x7c>)
    46d8:	4798      	blx	r3
    46da:	b1c0      	cbz	r0, 470e <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    46dc:	2d01      	cmp	r5, #1
    46de:	d91a      	bls.n	4716 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    46e0:	4917      	ldr	r1, [pc, #92]	; (4740 <sd_mmc_init_read_blocks+0x80>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    46e2:	4b18      	ldr	r3, [pc, #96]	; (4744 <sd_mmc_init_read_blocks+0x84>)
    46e4:	681b      	ldr	r3, [r3, #0]
    46e6:	7adb      	ldrb	r3, [r3, #11]
    46e8:	f013 0f08 	tst.w	r3, #8
    46ec:	d100      	bne.n	46f0 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    46ee:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    46f0:	4b14      	ldr	r3, [pc, #80]	; (4744 <sd_mmc_init_read_blocks+0x84>)
    46f2:	6898      	ldr	r0, [r3, #8]
    46f4:	2301      	movs	r3, #1
    46f6:	9301      	str	r3, [sp, #4]
    46f8:	9500      	str	r5, [sp, #0]
    46fa:	f44f 7300 	mov.w	r3, #512	; 0x200
    46fe:	4632      	mov	r2, r6
    4700:	4e11      	ldr	r6, [pc, #68]	; (4748 <sd_mmc_init_read_blocks+0x88>)
    4702:	47b0      	blx	r6
    4704:	b948      	cbnz	r0, 471a <sd_mmc_init_read_blocks+0x5a>
		sd_mmc_deselect_slot();
    4706:	4b11      	ldr	r3, [pc, #68]	; (474c <sd_mmc_init_read_blocks+0x8c>)
    4708:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    470a:	2405      	movs	r4, #5
    470c:	e7e0      	b.n	46d0 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    470e:	4b0f      	ldr	r3, [pc, #60]	; (474c <sd_mmc_init_read_blocks+0x8c>)
    4710:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    4712:	2405      	movs	r4, #5
    4714:	e7dc      	b.n	46d0 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    4716:	490e      	ldr	r1, [pc, #56]	; (4750 <sd_mmc_init_read_blocks+0x90>)
    4718:	e7e3      	b.n	46e2 <sd_mmc_init_read_blocks+0x22>
	resp = driver_get_response(sd_mmc_hal);
    471a:	4b0a      	ldr	r3, [pc, #40]	; (4744 <sd_mmc_init_read_blocks+0x84>)
    471c:	6898      	ldr	r0, [r3, #8]
    471e:	4b0d      	ldr	r3, [pc, #52]	; (4754 <sd_mmc_init_read_blocks+0x94>)
    4720:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    4722:	4b0d      	ldr	r3, [pc, #52]	; (4758 <sd_mmc_init_read_blocks+0x98>)
    4724:	4003      	ands	r3, r0
    4726:	b91b      	cbnz	r3, 4730 <sd_mmc_init_read_blocks+0x70>
	sd_mmc_nb_block_remaining  = nb_block;
    4728:	4b06      	ldr	r3, [pc, #24]	; (4744 <sd_mmc_init_read_blocks+0x84>)
    472a:	861d      	strh	r5, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
    472c:	871d      	strh	r5, [r3, #56]	; 0x38
	return SD_MMC_OK;
    472e:	e7cf      	b.n	46d0 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    4730:	4b06      	ldr	r3, [pc, #24]	; (474c <sd_mmc_init_read_blocks+0x8c>)
    4732:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    4734:	2405      	movs	r4, #5
    4736:	e7cb      	b.n	46d0 <sd_mmc_init_read_blocks+0x10>
    4738:	00003c85 	.word	0x00003c85
    473c:	00004161 	.word	0x00004161
    4740:	00101112 	.word	0x00101112
    4744:	200000fc 	.word	0x200000fc
    4748:	000028ed 	.word	0x000028ed
    474c:	00004571 	.word	0x00004571
    4750:	00081111 	.word	0x00081111
    4754:	00002891 	.word	0x00002891
    4758:	e4580000 	.word	0xe4580000

0000475c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    475c:	b570      	push	{r4, r5, r6, lr}
    475e:	4606      	mov	r6, r0
    4760:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
    4762:	4d0d      	ldr	r5, [pc, #52]	; (4798 <sd_mmc_start_read_blocks+0x3c>)
    4764:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    4766:	f240 52a7 	movw	r2, #1447	; 0x5a7
    476a:	490c      	ldr	r1, [pc, #48]	; (479c <sd_mmc_start_read_blocks+0x40>)
    476c:	42a0      	cmp	r0, r4
    476e:	bf34      	ite	cc
    4770:	2000      	movcc	r0, #0
    4772:	2001      	movcs	r0, #1
    4774:	4b0a      	ldr	r3, [pc, #40]	; (47a0 <sd_mmc_start_read_blocks+0x44>)
    4776:	4798      	blx	r3

	if (!driver_start_read_blocks(sd_mmc_hal, dest, nb_block)) {
    4778:	4622      	mov	r2, r4
    477a:	4631      	mov	r1, r6
    477c:	68a8      	ldr	r0, [r5, #8]
    477e:	4b09      	ldr	r3, [pc, #36]	; (47a4 <sd_mmc_start_read_blocks+0x48>)
    4780:	4798      	blx	r3
    4782:	b918      	cbnz	r0, 478c <sd_mmc_start_read_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
    4784:	2200      	movs	r2, #0
    4786:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
    4788:	2005      	movs	r0, #5
    478a:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
    478c:	4a02      	ldr	r2, [pc, #8]	; (4798 <sd_mmc_start_read_blocks+0x3c>)
    478e:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    4790:	1b1c      	subs	r4, r3, r4
    4792:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
    4794:	2000      	movs	r0, #0
}
    4796:	bd70      	pop	{r4, r5, r6, pc}
    4798:	200000fc 	.word	0x200000fc
    479c:	0000633c 	.word	0x0000633c
    47a0:	00002b35 	.word	0x00002b35
    47a4:	00002931 	.word	0x00002931

000047a8 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    47a8:	b510      	push	{r4, lr}
    47aa:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    47ac:	4b16      	ldr	r3, [pc, #88]	; (4808 <sd_mmc_wait_end_of_read_blocks+0x60>)
    47ae:	6898      	ldr	r0, [r3, #8]
    47b0:	4b16      	ldr	r3, [pc, #88]	; (480c <sd_mmc_wait_end_of_read_blocks+0x64>)
    47b2:	4798      	blx	r3
    47b4:	b908      	cbnz	r0, 47ba <sd_mmc_wait_end_of_read_blocks+0x12>
		return SD_MMC_ERR_COMM;
    47b6:	2005      	movs	r0, #5
    47b8:	bd10      	pop	{r4, pc}
	}
	if (abort) {
    47ba:	b194      	cbz	r4, 47e2 <sd_mmc_wait_end_of_read_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    47bc:	2200      	movs	r2, #0
    47be:	4b12      	ldr	r3, [pc, #72]	; (4808 <sd_mmc_wait_end_of_read_blocks+0x60>)
    47c0:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop read operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
    47c2:	4b11      	ldr	r3, [pc, #68]	; (4808 <sd_mmc_wait_end_of_read_blocks+0x60>)
    47c4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    47c6:	2b01      	cmp	r3, #1
    47c8:	d011      	beq.n	47ee <sd_mmc_wait_end_of_read_blocks+0x46>
		return SD_MMC_OK;
	}
	/* WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	 * The errors on this command must be ignored
	 * and one retry can be necessary in SPI mode for no compliance card.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    47ca:	2200      	movs	r2, #0
    47cc:	f243 110c 	movw	r1, #12556	; 0x310c
    47d0:	4b0d      	ldr	r3, [pc, #52]	; (4808 <sd_mmc_wait_end_of_read_blocks+0x60>)
    47d2:	6898      	ldr	r0, [r3, #8]
    47d4:	4b0e      	ldr	r3, [pc, #56]	; (4810 <sd_mmc_wait_end_of_read_blocks+0x68>)
    47d6:	4798      	blx	r3
    47d8:	b168      	cbz	r0, 47f6 <sd_mmc_wait_end_of_read_blocks+0x4e>
		driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
    47da:	4b0e      	ldr	r3, [pc, #56]	; (4814 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    47dc:	4798      	blx	r3
	return SD_MMC_OK;
    47de:	2000      	movs	r0, #0
    47e0:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
    47e2:	4b09      	ldr	r3, [pc, #36]	; (4808 <sd_mmc_wait_end_of_read_blocks+0x60>)
    47e4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    47e6:	2b00      	cmp	r3, #0
    47e8:	d0eb      	beq.n	47c2 <sd_mmc_wait_end_of_read_blocks+0x1a>
		return SD_MMC_OK;
    47ea:	2000      	movs	r0, #0
}
    47ec:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
    47ee:	4b09      	ldr	r3, [pc, #36]	; (4814 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    47f0:	4798      	blx	r3
		return SD_MMC_OK;
    47f2:	2000      	movs	r0, #0
    47f4:	bd10      	pop	{r4, pc}
		driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0);
    47f6:	2200      	movs	r2, #0
    47f8:	f243 110c 	movw	r1, #12556	; 0x310c
    47fc:	4b02      	ldr	r3, [pc, #8]	; (4808 <sd_mmc_wait_end_of_read_blocks+0x60>)
    47fe:	6898      	ldr	r0, [r3, #8]
    4800:	4b03      	ldr	r3, [pc, #12]	; (4810 <sd_mmc_wait_end_of_read_blocks+0x68>)
    4802:	4798      	blx	r3
    4804:	e7e9      	b.n	47da <sd_mmc_wait_end_of_read_blocks+0x32>
    4806:	bf00      	nop
    4808:	200000fc 	.word	0x200000fc
    480c:	000029a1 	.word	0x000029a1
    4810:	00002861 	.word	0x00002861
    4814:	00004571 	.word	0x00004571

00004818 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
    4818:	b5f0      	push	{r4, r5, r6, r7, lr}
    481a:	b083      	sub	sp, #12
    481c:	4607      	mov	r7, r0
    481e:	460e      	mov	r6, r1
    4820:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    4822:	4b1c      	ldr	r3, [pc, #112]	; (4894 <sd_mmc_init_write_blocks+0x7c>)
    4824:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    4826:	4604      	mov	r4, r0
    4828:	b110      	cbz	r0, 4830 <sd_mmc_init_write_blocks+0x18>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    482a:	4620      	mov	r0, r4
    482c:	b003      	add	sp, #12
    482e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (sd_mmc_is_write_protected(slot)) {
    4830:	4638      	mov	r0, r7
    4832:	4b19      	ldr	r3, [pc, #100]	; (4898 <sd_mmc_init_write_blocks+0x80>)
    4834:	4798      	blx	r3
    4836:	b9c0      	cbnz	r0, 486a <sd_mmc_init_write_blocks+0x52>
	if (nb_block > 1) {
    4838:	2d01      	cmp	r5, #1
    483a:	d91a      	bls.n	4872 <sd_mmc_init_write_blocks+0x5a>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    483c:	4917      	ldr	r1, [pc, #92]	; (489c <sd_mmc_init_write_blocks+0x84>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    483e:	4b18      	ldr	r3, [pc, #96]	; (48a0 <sd_mmc_init_write_blocks+0x88>)
    4840:	681b      	ldr	r3, [r3, #0]
    4842:	7adb      	ldrb	r3, [r3, #11]
    4844:	f013 0f08 	tst.w	r3, #8
    4848:	d100      	bne.n	484c <sd_mmc_init_write_blocks+0x34>
		arg = (start * SD_MMC_BLOCK_SIZE);
    484a:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    484c:	4b14      	ldr	r3, [pc, #80]	; (48a0 <sd_mmc_init_write_blocks+0x88>)
    484e:	6898      	ldr	r0, [r3, #8]
    4850:	2301      	movs	r3, #1
    4852:	9301      	str	r3, [sp, #4]
    4854:	9500      	str	r5, [sp, #0]
    4856:	f44f 7300 	mov.w	r3, #512	; 0x200
    485a:	4632      	mov	r2, r6
    485c:	4e11      	ldr	r6, [pc, #68]	; (48a4 <sd_mmc_init_write_blocks+0x8c>)
    485e:	47b0      	blx	r6
    4860:	b948      	cbnz	r0, 4876 <sd_mmc_init_write_blocks+0x5e>
		sd_mmc_deselect_slot();
    4862:	4b11      	ldr	r3, [pc, #68]	; (48a8 <sd_mmc_init_write_blocks+0x90>)
    4864:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    4866:	2405      	movs	r4, #5
    4868:	e7df      	b.n	482a <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    486a:	4b0f      	ldr	r3, [pc, #60]	; (48a8 <sd_mmc_init_write_blocks+0x90>)
    486c:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    486e:	2407      	movs	r4, #7
    4870:	e7db      	b.n	482a <sd_mmc_init_write_blocks+0x12>
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    4872:	490e      	ldr	r1, [pc, #56]	; (48ac <sd_mmc_init_write_blocks+0x94>)
    4874:	e7e3      	b.n	483e <sd_mmc_init_write_blocks+0x26>
	resp = driver_get_response(sd_mmc_hal);
    4876:	4b0a      	ldr	r3, [pc, #40]	; (48a0 <sd_mmc_init_write_blocks+0x88>)
    4878:	6898      	ldr	r0, [r3, #8]
    487a:	4b0d      	ldr	r3, [pc, #52]	; (48b0 <sd_mmc_init_write_blocks+0x98>)
    487c:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    487e:	4b0d      	ldr	r3, [pc, #52]	; (48b4 <sd_mmc_init_write_blocks+0x9c>)
    4880:	4003      	ands	r3, r0
    4882:	b91b      	cbnz	r3, 488c <sd_mmc_init_write_blocks+0x74>
	sd_mmc_nb_block_remaining  = nb_block;
    4884:	4b06      	ldr	r3, [pc, #24]	; (48a0 <sd_mmc_init_write_blocks+0x88>)
    4886:	861d      	strh	r5, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
    4888:	871d      	strh	r5, [r3, #56]	; 0x38
	return SD_MMC_OK;
    488a:	e7ce      	b.n	482a <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    488c:	4b06      	ldr	r3, [pc, #24]	; (48a8 <sd_mmc_init_write_blocks+0x90>)
    488e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    4890:	2405      	movs	r4, #5
    4892:	e7ca      	b.n	482a <sd_mmc_init_write_blocks+0x12>
    4894:	00003c85 	.word	0x00003c85
    4898:	00004649 	.word	0x00004649
    489c:	00109119 	.word	0x00109119
    48a0:	200000fc 	.word	0x200000fc
    48a4:	000028ed 	.word	0x000028ed
    48a8:	00004571 	.word	0x00004571
    48ac:	00089118 	.word	0x00089118
    48b0:	00002891 	.word	0x00002891
    48b4:	e4580000 	.word	0xe4580000

000048b8 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    48b8:	b570      	push	{r4, r5, r6, lr}
    48ba:	4606      	mov	r6, r0
    48bc:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
    48be:	4d0d      	ldr	r5, [pc, #52]	; (48f4 <sd_mmc_start_write_blocks+0x3c>)
    48c0:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    48c2:	f240 52fa 	movw	r2, #1530	; 0x5fa
    48c6:	490c      	ldr	r1, [pc, #48]	; (48f8 <sd_mmc_start_write_blocks+0x40>)
    48c8:	42a0      	cmp	r0, r4
    48ca:	bf34      	ite	cc
    48cc:	2000      	movcc	r0, #0
    48ce:	2001      	movcs	r0, #1
    48d0:	4b0a      	ldr	r3, [pc, #40]	; (48fc <sd_mmc_start_write_blocks+0x44>)
    48d2:	4798      	blx	r3
	if (!driver_start_write_blocks(sd_mmc_hal, src, nb_block)) {
    48d4:	4622      	mov	r2, r4
    48d6:	4631      	mov	r1, r6
    48d8:	68a8      	ldr	r0, [r5, #8]
    48da:	4b09      	ldr	r3, [pc, #36]	; (4900 <sd_mmc_start_write_blocks+0x48>)
    48dc:	4798      	blx	r3
    48de:	b918      	cbnz	r0, 48e8 <sd_mmc_start_write_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
    48e0:	2200      	movs	r2, #0
    48e2:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
    48e4:	2005      	movs	r0, #5
    48e6:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
    48e8:	4a02      	ldr	r2, [pc, #8]	; (48f4 <sd_mmc_start_write_blocks+0x3c>)
    48ea:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    48ec:	1b1c      	subs	r4, r3, r4
    48ee:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
    48f0:	2000      	movs	r0, #0
}
    48f2:	bd70      	pop	{r4, r5, r6, pc}
    48f4:	200000fc 	.word	0x200000fc
    48f8:	0000633c 	.word	0x0000633c
    48fc:	00002b35 	.word	0x00002b35
    4900:	00002969 	.word	0x00002969

00004904 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    4904:	b510      	push	{r4, lr}
    4906:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks(sd_mmc_hal)) {
    4908:	4b14      	ldr	r3, [pc, #80]	; (495c <sd_mmc_wait_end_of_write_blocks+0x58>)
    490a:	6898      	ldr	r0, [r3, #8]
    490c:	4b14      	ldr	r3, [pc, #80]	; (4960 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    490e:	4798      	blx	r3
    4910:	b908      	cbnz	r0, 4916 <sd_mmc_wait_end_of_write_blocks+0x12>
		return SD_MMC_ERR_COMM;
    4912:	2005      	movs	r0, #5
    4914:	bd10      	pop	{r4, pc}
	}
	if (abort) {
    4916:	b194      	cbz	r4, 493e <sd_mmc_wait_end_of_write_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    4918:	2200      	movs	r2, #0
    491a:	4b10      	ldr	r3, [pc, #64]	; (495c <sd_mmc_wait_end_of_write_blocks+0x58>)
    491c:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop write operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
    491e:	4b0f      	ldr	r3, [pc, #60]	; (495c <sd_mmc_wait_end_of_write_blocks+0x58>)
    4920:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    4922:	2b01      	cmp	r3, #1
    4924:	d011      	beq.n	494a <sd_mmc_wait_end_of_write_blocks+0x46>
		return SD_MMC_OK;
	}

	/* Note: SPI multiblock writes terminate using a special
	 * token, not a STOP_TRANSMISSION request.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    4926:	2200      	movs	r2, #0
    4928:	f243 110c 	movw	r1, #12556	; 0x310c
    492c:	4b0b      	ldr	r3, [pc, #44]	; (495c <sd_mmc_wait_end_of_write_blocks+0x58>)
    492e:	6898      	ldr	r0, [r3, #8]
    4930:	4b0c      	ldr	r3, [pc, #48]	; (4964 <sd_mmc_wait_end_of_write_blocks+0x60>)
    4932:	4798      	blx	r3
    4934:	b968      	cbnz	r0, 4952 <sd_mmc_wait_end_of_write_blocks+0x4e>
		sd_mmc_deselect_slot();
    4936:	4b0c      	ldr	r3, [pc, #48]	; (4968 <sd_mmc_wait_end_of_write_blocks+0x64>)
    4938:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    493a:	2005      	movs	r0, #5
    493c:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
    493e:	4b07      	ldr	r3, [pc, #28]	; (495c <sd_mmc_wait_end_of_write_blocks+0x58>)
    4940:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4942:	2b00      	cmp	r3, #0
    4944:	d0eb      	beq.n	491e <sd_mmc_wait_end_of_write_blocks+0x1a>
		return SD_MMC_OK;
    4946:	2000      	movs	r0, #0
	}

	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    4948:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
    494a:	4b07      	ldr	r3, [pc, #28]	; (4968 <sd_mmc_wait_end_of_write_blocks+0x64>)
    494c:	4798      	blx	r3
		return SD_MMC_OK;
    494e:	2000      	movs	r0, #0
    4950:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    4952:	4b05      	ldr	r3, [pc, #20]	; (4968 <sd_mmc_wait_end_of_write_blocks+0x64>)
    4954:	4798      	blx	r3
	return SD_MMC_OK;
    4956:	2000      	movs	r0, #0
    4958:	bd10      	pop	{r4, pc}
    495a:	bf00      	nop
    495c:	200000fc 	.word	0x200000fc
    4960:	000029c9 	.word	0x000029c9
    4964:	00002861 	.word	0x00002861
    4968:	00004571 	.word	0x00004571

0000496c <sd_mmc_stack_init>:
	}
#endif
}

void sd_mmc_stack_init(void)
{
    496c:	b508      	push	{r3, lr}

	sd_mmc_init(&IO_BUS, SDMMC_cd, SDMMC_wp);
    496e:	4903      	ldr	r1, [pc, #12]	; (497c <sd_mmc_stack_init+0x10>)
    4970:	460a      	mov	r2, r1
    4972:	3104      	adds	r1, #4
    4974:	4802      	ldr	r0, [pc, #8]	; (4980 <sd_mmc_stack_init+0x14>)
    4976:	4b03      	ldr	r3, [pc, #12]	; (4984 <sd_mmc_stack_init+0x18>)
    4978:	4798      	blx	r3
    497a:	bd08      	pop	{r3, pc}
    497c:	20000000 	.word	0x20000000
    4980:	20000a18 	.word	0x20000a18
    4984:	0000458d 	.word	0x0000458d

00004988 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    4988:	b958      	cbnz	r0, 49a2 <_read+0x1a>
{
    498a:	b508      	push	{r3, lr}
    498c:	460b      	mov	r3, r1
    498e:	4611      	mov	r1, r2
    4990:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    4992:	4b05      	ldr	r3, [pc, #20]	; (49a8 <_read+0x20>)
    4994:	4798      	blx	r3
	if (n < 0) {
    4996:	2800      	cmp	r0, #0
    4998:	db00      	blt.n	499c <_read+0x14>
		return -1;
	}

	return n;
}
    499a:	bd08      	pop	{r3, pc}
		return -1;
    499c:	f04f 30ff 	mov.w	r0, #4294967295
    49a0:	bd08      	pop	{r3, pc}
		return -1;
    49a2:	f04f 30ff 	mov.w	r0, #4294967295
    49a6:	4770      	bx	lr
    49a8:	00004a01 	.word	0x00004a01

000049ac <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    49ac:	3801      	subs	r0, #1
    49ae:	2802      	cmp	r0, #2
    49b0:	d80b      	bhi.n	49ca <_write+0x1e>
{
    49b2:	b508      	push	{r3, lr}
    49b4:	460b      	mov	r3, r1
    49b6:	4611      	mov	r1, r2
    49b8:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    49ba:	4b05      	ldr	r3, [pc, #20]	; (49d0 <_write+0x24>)
    49bc:	4798      	blx	r3
	if (n < 0) {
    49be:	2800      	cmp	r0, #0
    49c0:	db00      	blt.n	49c4 <_write+0x18>
		return -1;
	}

	return n;
}
    49c2:	bd08      	pop	{r3, pc}
		return -1;
    49c4:	f04f 30ff 	mov.w	r0, #4294967295
    49c8:	bd08      	pop	{r3, pc}
		return -1;
    49ca:	f04f 30ff 	mov.w	r0, #4294967295
    49ce:	4770      	bx	lr
    49d0:	00004a25 	.word	0x00004a25

000049d4 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    49d4:	b570      	push	{r4, r5, r6, lr}
    49d6:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    49d8:	4d06      	ldr	r5, [pc, #24]	; (49f4 <stdio_io_init+0x20>)
    49da:	682b      	ldr	r3, [r5, #0]
    49dc:	2100      	movs	r1, #0
    49de:	6898      	ldr	r0, [r3, #8]
    49e0:	4c05      	ldr	r4, [pc, #20]	; (49f8 <stdio_io_init+0x24>)
    49e2:	47a0      	blx	r4
	setbuf(stdin, NULL);
    49e4:	682b      	ldr	r3, [r5, #0]
    49e6:	2100      	movs	r1, #0
    49e8:	6858      	ldr	r0, [r3, #4]
    49ea:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    49ec:	4b03      	ldr	r3, [pc, #12]	; (49fc <stdio_io_init+0x28>)
    49ee:	601e      	str	r6, [r3, #0]
    49f0:	bd70      	pop	{r4, r5, r6, pc}
    49f2:	bf00      	nop
    49f4:	20000008 	.word	0x20000008
    49f8:	00004e29 	.word	0x00004e29
    49fc:	20000138 	.word	0x20000138

00004a00 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    4a00:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    4a02:	4b06      	ldr	r3, [pc, #24]	; (4a1c <stdio_io_read+0x1c>)
    4a04:	681b      	ldr	r3, [r3, #0]
    4a06:	b133      	cbz	r3, 4a16 <stdio_io_read+0x16>
    4a08:	460a      	mov	r2, r1
    4a0a:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    4a0c:	b292      	uxth	r2, r2
    4a0e:	4618      	mov	r0, r3
    4a10:	4b03      	ldr	r3, [pc, #12]	; (4a20 <stdio_io_read+0x20>)
    4a12:	4798      	blx	r3
    4a14:	bd08      	pop	{r3, pc}
		return 0;
    4a16:	2000      	movs	r0, #0
}
    4a18:	bd08      	pop	{r3, pc}
    4a1a:	bf00      	nop
    4a1c:	20000138 	.word	0x20000138
    4a20:	00002715 	.word	0x00002715

00004a24 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    4a24:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    4a26:	4b06      	ldr	r3, [pc, #24]	; (4a40 <stdio_io_write+0x1c>)
    4a28:	681b      	ldr	r3, [r3, #0]
    4a2a:	b133      	cbz	r3, 4a3a <stdio_io_write+0x16>
    4a2c:	460a      	mov	r2, r1
    4a2e:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    4a30:	b292      	uxth	r2, r2
    4a32:	4618      	mov	r0, r3
    4a34:	4b03      	ldr	r3, [pc, #12]	; (4a44 <stdio_io_write+0x20>)
    4a36:	4798      	blx	r3
    4a38:	bd08      	pop	{r3, pc}
		return 0;
    4a3a:	2000      	movs	r0, #0
}
    4a3c:	bd08      	pop	{r3, pc}
    4a3e:	bf00      	nop
    4a40:	20000138 	.word	0x20000138
    4a44:	000026e1 	.word	0x000026e1

00004a48 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    4a48:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    4a4a:	4c04      	ldr	r4, [pc, #16]	; (4a5c <stdio_redirect_init+0x14>)
    4a4c:	4620      	mov	r0, r4
    4a4e:	4b04      	ldr	r3, [pc, #16]	; (4a60 <stdio_redirect_init+0x18>)
    4a50:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    4a52:	4620      	mov	r0, r4
    4a54:	4b03      	ldr	r3, [pc, #12]	; (4a64 <stdio_redirect_init+0x1c>)
    4a56:	4798      	blx	r3
    4a58:	bd10      	pop	{r4, pc}
    4a5a:	bf00      	nop
    4a5c:	20000a08 	.word	0x20000a08
    4a60:	00002b09 	.word	0x00002b09
    4a64:	000049d5 	.word	0x000049d5

00004a68 <__aeabi_uldivmod>:
    4a68:	b953      	cbnz	r3, 4a80 <__aeabi_uldivmod+0x18>
    4a6a:	b94a      	cbnz	r2, 4a80 <__aeabi_uldivmod+0x18>
    4a6c:	2900      	cmp	r1, #0
    4a6e:	bf08      	it	eq
    4a70:	2800      	cmpeq	r0, #0
    4a72:	bf1c      	itt	ne
    4a74:	f04f 31ff 	movne.w	r1, #4294967295
    4a78:	f04f 30ff 	movne.w	r0, #4294967295
    4a7c:	f000 b97a 	b.w	4d74 <__aeabi_idiv0>
    4a80:	f1ad 0c08 	sub.w	ip, sp, #8
    4a84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    4a88:	f000 f806 	bl	4a98 <__udivmoddi4>
    4a8c:	f8dd e004 	ldr.w	lr, [sp, #4]
    4a90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4a94:	b004      	add	sp, #16
    4a96:	4770      	bx	lr

00004a98 <__udivmoddi4>:
    4a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a9c:	468c      	mov	ip, r1
    4a9e:	460d      	mov	r5, r1
    4aa0:	4604      	mov	r4, r0
    4aa2:	9e08      	ldr	r6, [sp, #32]
    4aa4:	2b00      	cmp	r3, #0
    4aa6:	d151      	bne.n	4b4c <__udivmoddi4+0xb4>
    4aa8:	428a      	cmp	r2, r1
    4aaa:	4617      	mov	r7, r2
    4aac:	d96d      	bls.n	4b8a <__udivmoddi4+0xf2>
    4aae:	fab2 fe82 	clz	lr, r2
    4ab2:	f1be 0f00 	cmp.w	lr, #0
    4ab6:	d00b      	beq.n	4ad0 <__udivmoddi4+0x38>
    4ab8:	f1ce 0c20 	rsb	ip, lr, #32
    4abc:	fa01 f50e 	lsl.w	r5, r1, lr
    4ac0:	fa20 fc0c 	lsr.w	ip, r0, ip
    4ac4:	fa02 f70e 	lsl.w	r7, r2, lr
    4ac8:	ea4c 0c05 	orr.w	ip, ip, r5
    4acc:	fa00 f40e 	lsl.w	r4, r0, lr
    4ad0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    4ad4:	0c25      	lsrs	r5, r4, #16
    4ad6:	fbbc f8fa 	udiv	r8, ip, sl
    4ada:	fa1f f987 	uxth.w	r9, r7
    4ade:	fb0a cc18 	mls	ip, sl, r8, ip
    4ae2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    4ae6:	fb08 f309 	mul.w	r3, r8, r9
    4aea:	42ab      	cmp	r3, r5
    4aec:	d90a      	bls.n	4b04 <__udivmoddi4+0x6c>
    4aee:	19ed      	adds	r5, r5, r7
    4af0:	f108 32ff 	add.w	r2, r8, #4294967295
    4af4:	f080 8123 	bcs.w	4d3e <__udivmoddi4+0x2a6>
    4af8:	42ab      	cmp	r3, r5
    4afa:	f240 8120 	bls.w	4d3e <__udivmoddi4+0x2a6>
    4afe:	f1a8 0802 	sub.w	r8, r8, #2
    4b02:	443d      	add	r5, r7
    4b04:	1aed      	subs	r5, r5, r3
    4b06:	b2a4      	uxth	r4, r4
    4b08:	fbb5 f0fa 	udiv	r0, r5, sl
    4b0c:	fb0a 5510 	mls	r5, sl, r0, r5
    4b10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    4b14:	fb00 f909 	mul.w	r9, r0, r9
    4b18:	45a1      	cmp	r9, r4
    4b1a:	d909      	bls.n	4b30 <__udivmoddi4+0x98>
    4b1c:	19e4      	adds	r4, r4, r7
    4b1e:	f100 33ff 	add.w	r3, r0, #4294967295
    4b22:	f080 810a 	bcs.w	4d3a <__udivmoddi4+0x2a2>
    4b26:	45a1      	cmp	r9, r4
    4b28:	f240 8107 	bls.w	4d3a <__udivmoddi4+0x2a2>
    4b2c:	3802      	subs	r0, #2
    4b2e:	443c      	add	r4, r7
    4b30:	eba4 0409 	sub.w	r4, r4, r9
    4b34:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    4b38:	2100      	movs	r1, #0
    4b3a:	2e00      	cmp	r6, #0
    4b3c:	d061      	beq.n	4c02 <__udivmoddi4+0x16a>
    4b3e:	fa24 f40e 	lsr.w	r4, r4, lr
    4b42:	2300      	movs	r3, #0
    4b44:	6034      	str	r4, [r6, #0]
    4b46:	6073      	str	r3, [r6, #4]
    4b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b4c:	428b      	cmp	r3, r1
    4b4e:	d907      	bls.n	4b60 <__udivmoddi4+0xc8>
    4b50:	2e00      	cmp	r6, #0
    4b52:	d054      	beq.n	4bfe <__udivmoddi4+0x166>
    4b54:	2100      	movs	r1, #0
    4b56:	e886 0021 	stmia.w	r6, {r0, r5}
    4b5a:	4608      	mov	r0, r1
    4b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b60:	fab3 f183 	clz	r1, r3
    4b64:	2900      	cmp	r1, #0
    4b66:	f040 808e 	bne.w	4c86 <__udivmoddi4+0x1ee>
    4b6a:	42ab      	cmp	r3, r5
    4b6c:	d302      	bcc.n	4b74 <__udivmoddi4+0xdc>
    4b6e:	4282      	cmp	r2, r0
    4b70:	f200 80fa 	bhi.w	4d68 <__udivmoddi4+0x2d0>
    4b74:	1a84      	subs	r4, r0, r2
    4b76:	eb65 0503 	sbc.w	r5, r5, r3
    4b7a:	2001      	movs	r0, #1
    4b7c:	46ac      	mov	ip, r5
    4b7e:	2e00      	cmp	r6, #0
    4b80:	d03f      	beq.n	4c02 <__udivmoddi4+0x16a>
    4b82:	e886 1010 	stmia.w	r6, {r4, ip}
    4b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b8a:	b912      	cbnz	r2, 4b92 <__udivmoddi4+0xfa>
    4b8c:	2701      	movs	r7, #1
    4b8e:	fbb7 f7f2 	udiv	r7, r7, r2
    4b92:	fab7 fe87 	clz	lr, r7
    4b96:	f1be 0f00 	cmp.w	lr, #0
    4b9a:	d134      	bne.n	4c06 <__udivmoddi4+0x16e>
    4b9c:	1beb      	subs	r3, r5, r7
    4b9e:	0c3a      	lsrs	r2, r7, #16
    4ba0:	fa1f fc87 	uxth.w	ip, r7
    4ba4:	2101      	movs	r1, #1
    4ba6:	fbb3 f8f2 	udiv	r8, r3, r2
    4baa:	0c25      	lsrs	r5, r4, #16
    4bac:	fb02 3318 	mls	r3, r2, r8, r3
    4bb0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    4bb4:	fb0c f308 	mul.w	r3, ip, r8
    4bb8:	42ab      	cmp	r3, r5
    4bba:	d907      	bls.n	4bcc <__udivmoddi4+0x134>
    4bbc:	19ed      	adds	r5, r5, r7
    4bbe:	f108 30ff 	add.w	r0, r8, #4294967295
    4bc2:	d202      	bcs.n	4bca <__udivmoddi4+0x132>
    4bc4:	42ab      	cmp	r3, r5
    4bc6:	f200 80d1 	bhi.w	4d6c <__udivmoddi4+0x2d4>
    4bca:	4680      	mov	r8, r0
    4bcc:	1aed      	subs	r5, r5, r3
    4bce:	b2a3      	uxth	r3, r4
    4bd0:	fbb5 f0f2 	udiv	r0, r5, r2
    4bd4:	fb02 5510 	mls	r5, r2, r0, r5
    4bd8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    4bdc:	fb0c fc00 	mul.w	ip, ip, r0
    4be0:	45a4      	cmp	ip, r4
    4be2:	d907      	bls.n	4bf4 <__udivmoddi4+0x15c>
    4be4:	19e4      	adds	r4, r4, r7
    4be6:	f100 33ff 	add.w	r3, r0, #4294967295
    4bea:	d202      	bcs.n	4bf2 <__udivmoddi4+0x15a>
    4bec:	45a4      	cmp	ip, r4
    4bee:	f200 80b8 	bhi.w	4d62 <__udivmoddi4+0x2ca>
    4bf2:	4618      	mov	r0, r3
    4bf4:	eba4 040c 	sub.w	r4, r4, ip
    4bf8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    4bfc:	e79d      	b.n	4b3a <__udivmoddi4+0xa2>
    4bfe:	4631      	mov	r1, r6
    4c00:	4630      	mov	r0, r6
    4c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c06:	f1ce 0420 	rsb	r4, lr, #32
    4c0a:	fa05 f30e 	lsl.w	r3, r5, lr
    4c0e:	fa07 f70e 	lsl.w	r7, r7, lr
    4c12:	fa20 f804 	lsr.w	r8, r0, r4
    4c16:	0c3a      	lsrs	r2, r7, #16
    4c18:	fa25 f404 	lsr.w	r4, r5, r4
    4c1c:	ea48 0803 	orr.w	r8, r8, r3
    4c20:	fbb4 f1f2 	udiv	r1, r4, r2
    4c24:	ea4f 4518 	mov.w	r5, r8, lsr #16
    4c28:	fb02 4411 	mls	r4, r2, r1, r4
    4c2c:	fa1f fc87 	uxth.w	ip, r7
    4c30:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    4c34:	fb01 f30c 	mul.w	r3, r1, ip
    4c38:	42ab      	cmp	r3, r5
    4c3a:	fa00 f40e 	lsl.w	r4, r0, lr
    4c3e:	d909      	bls.n	4c54 <__udivmoddi4+0x1bc>
    4c40:	19ed      	adds	r5, r5, r7
    4c42:	f101 30ff 	add.w	r0, r1, #4294967295
    4c46:	f080 808a 	bcs.w	4d5e <__udivmoddi4+0x2c6>
    4c4a:	42ab      	cmp	r3, r5
    4c4c:	f240 8087 	bls.w	4d5e <__udivmoddi4+0x2c6>
    4c50:	3902      	subs	r1, #2
    4c52:	443d      	add	r5, r7
    4c54:	1aeb      	subs	r3, r5, r3
    4c56:	fa1f f588 	uxth.w	r5, r8
    4c5a:	fbb3 f0f2 	udiv	r0, r3, r2
    4c5e:	fb02 3310 	mls	r3, r2, r0, r3
    4c62:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    4c66:	fb00 f30c 	mul.w	r3, r0, ip
    4c6a:	42ab      	cmp	r3, r5
    4c6c:	d907      	bls.n	4c7e <__udivmoddi4+0x1e6>
    4c6e:	19ed      	adds	r5, r5, r7
    4c70:	f100 38ff 	add.w	r8, r0, #4294967295
    4c74:	d26f      	bcs.n	4d56 <__udivmoddi4+0x2be>
    4c76:	42ab      	cmp	r3, r5
    4c78:	d96d      	bls.n	4d56 <__udivmoddi4+0x2be>
    4c7a:	3802      	subs	r0, #2
    4c7c:	443d      	add	r5, r7
    4c7e:	1aeb      	subs	r3, r5, r3
    4c80:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    4c84:	e78f      	b.n	4ba6 <__udivmoddi4+0x10e>
    4c86:	f1c1 0720 	rsb	r7, r1, #32
    4c8a:	fa22 f807 	lsr.w	r8, r2, r7
    4c8e:	408b      	lsls	r3, r1
    4c90:	fa05 f401 	lsl.w	r4, r5, r1
    4c94:	ea48 0303 	orr.w	r3, r8, r3
    4c98:	fa20 fe07 	lsr.w	lr, r0, r7
    4c9c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    4ca0:	40fd      	lsrs	r5, r7
    4ca2:	ea4e 0e04 	orr.w	lr, lr, r4
    4ca6:	fbb5 f9fc 	udiv	r9, r5, ip
    4caa:	ea4f 441e 	mov.w	r4, lr, lsr #16
    4cae:	fb0c 5519 	mls	r5, ip, r9, r5
    4cb2:	fa1f f883 	uxth.w	r8, r3
    4cb6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    4cba:	fb09 f408 	mul.w	r4, r9, r8
    4cbe:	42ac      	cmp	r4, r5
    4cc0:	fa02 f201 	lsl.w	r2, r2, r1
    4cc4:	fa00 fa01 	lsl.w	sl, r0, r1
    4cc8:	d908      	bls.n	4cdc <__udivmoddi4+0x244>
    4cca:	18ed      	adds	r5, r5, r3
    4ccc:	f109 30ff 	add.w	r0, r9, #4294967295
    4cd0:	d243      	bcs.n	4d5a <__udivmoddi4+0x2c2>
    4cd2:	42ac      	cmp	r4, r5
    4cd4:	d941      	bls.n	4d5a <__udivmoddi4+0x2c2>
    4cd6:	f1a9 0902 	sub.w	r9, r9, #2
    4cda:	441d      	add	r5, r3
    4cdc:	1b2d      	subs	r5, r5, r4
    4cde:	fa1f fe8e 	uxth.w	lr, lr
    4ce2:	fbb5 f0fc 	udiv	r0, r5, ip
    4ce6:	fb0c 5510 	mls	r5, ip, r0, r5
    4cea:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    4cee:	fb00 f808 	mul.w	r8, r0, r8
    4cf2:	45a0      	cmp	r8, r4
    4cf4:	d907      	bls.n	4d06 <__udivmoddi4+0x26e>
    4cf6:	18e4      	adds	r4, r4, r3
    4cf8:	f100 35ff 	add.w	r5, r0, #4294967295
    4cfc:	d229      	bcs.n	4d52 <__udivmoddi4+0x2ba>
    4cfe:	45a0      	cmp	r8, r4
    4d00:	d927      	bls.n	4d52 <__udivmoddi4+0x2ba>
    4d02:	3802      	subs	r0, #2
    4d04:	441c      	add	r4, r3
    4d06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    4d0a:	eba4 0408 	sub.w	r4, r4, r8
    4d0e:	fba0 8902 	umull	r8, r9, r0, r2
    4d12:	454c      	cmp	r4, r9
    4d14:	46c6      	mov	lr, r8
    4d16:	464d      	mov	r5, r9
    4d18:	d315      	bcc.n	4d46 <__udivmoddi4+0x2ae>
    4d1a:	d012      	beq.n	4d42 <__udivmoddi4+0x2aa>
    4d1c:	b156      	cbz	r6, 4d34 <__udivmoddi4+0x29c>
    4d1e:	ebba 030e 	subs.w	r3, sl, lr
    4d22:	eb64 0405 	sbc.w	r4, r4, r5
    4d26:	fa04 f707 	lsl.w	r7, r4, r7
    4d2a:	40cb      	lsrs	r3, r1
    4d2c:	431f      	orrs	r7, r3
    4d2e:	40cc      	lsrs	r4, r1
    4d30:	6037      	str	r7, [r6, #0]
    4d32:	6074      	str	r4, [r6, #4]
    4d34:	2100      	movs	r1, #0
    4d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d3a:	4618      	mov	r0, r3
    4d3c:	e6f8      	b.n	4b30 <__udivmoddi4+0x98>
    4d3e:	4690      	mov	r8, r2
    4d40:	e6e0      	b.n	4b04 <__udivmoddi4+0x6c>
    4d42:	45c2      	cmp	sl, r8
    4d44:	d2ea      	bcs.n	4d1c <__udivmoddi4+0x284>
    4d46:	ebb8 0e02 	subs.w	lr, r8, r2
    4d4a:	eb69 0503 	sbc.w	r5, r9, r3
    4d4e:	3801      	subs	r0, #1
    4d50:	e7e4      	b.n	4d1c <__udivmoddi4+0x284>
    4d52:	4628      	mov	r0, r5
    4d54:	e7d7      	b.n	4d06 <__udivmoddi4+0x26e>
    4d56:	4640      	mov	r0, r8
    4d58:	e791      	b.n	4c7e <__udivmoddi4+0x1e6>
    4d5a:	4681      	mov	r9, r0
    4d5c:	e7be      	b.n	4cdc <__udivmoddi4+0x244>
    4d5e:	4601      	mov	r1, r0
    4d60:	e778      	b.n	4c54 <__udivmoddi4+0x1bc>
    4d62:	3802      	subs	r0, #2
    4d64:	443c      	add	r4, r7
    4d66:	e745      	b.n	4bf4 <__udivmoddi4+0x15c>
    4d68:	4608      	mov	r0, r1
    4d6a:	e708      	b.n	4b7e <__udivmoddi4+0xe6>
    4d6c:	f1a8 0802 	sub.w	r8, r8, #2
    4d70:	443d      	add	r5, r7
    4d72:	e72b      	b.n	4bcc <__udivmoddi4+0x134>

00004d74 <__aeabi_idiv0>:
    4d74:	4770      	bx	lr
    4d76:	bf00      	nop

00004d78 <__libc_init_array>:
    4d78:	b570      	push	{r4, r5, r6, lr}
    4d7a:	4e0d      	ldr	r6, [pc, #52]	; (4db0 <__libc_init_array+0x38>)
    4d7c:	4c0d      	ldr	r4, [pc, #52]	; (4db4 <__libc_init_array+0x3c>)
    4d7e:	1ba4      	subs	r4, r4, r6
    4d80:	10a4      	asrs	r4, r4, #2
    4d82:	2500      	movs	r5, #0
    4d84:	42a5      	cmp	r5, r4
    4d86:	d109      	bne.n	4d9c <__libc_init_array+0x24>
    4d88:	4e0b      	ldr	r6, [pc, #44]	; (4db8 <__libc_init_array+0x40>)
    4d8a:	4c0c      	ldr	r4, [pc, #48]	; (4dbc <__libc_init_array+0x44>)
    4d8c:	f001 fb2c 	bl	63e8 <_init>
    4d90:	1ba4      	subs	r4, r4, r6
    4d92:	10a4      	asrs	r4, r4, #2
    4d94:	2500      	movs	r5, #0
    4d96:	42a5      	cmp	r5, r4
    4d98:	d105      	bne.n	4da6 <__libc_init_array+0x2e>
    4d9a:	bd70      	pop	{r4, r5, r6, pc}
    4d9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    4da0:	4798      	blx	r3
    4da2:	3501      	adds	r5, #1
    4da4:	e7ee      	b.n	4d84 <__libc_init_array+0xc>
    4da6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    4daa:	4798      	blx	r3
    4dac:	3501      	adds	r5, #1
    4dae:	e7f2      	b.n	4d96 <__libc_init_array+0x1e>
    4db0:	000063f4 	.word	0x000063f4
    4db4:	000063f4 	.word	0x000063f4
    4db8:	000063f4 	.word	0x000063f4
    4dbc:	000063f8 	.word	0x000063f8

00004dc0 <memset>:
    4dc0:	4402      	add	r2, r0
    4dc2:	4603      	mov	r3, r0
    4dc4:	4293      	cmp	r3, r2
    4dc6:	d100      	bne.n	4dca <memset+0xa>
    4dc8:	4770      	bx	lr
    4dca:	f803 1b01 	strb.w	r1, [r3], #1
    4dce:	e7f9      	b.n	4dc4 <memset+0x4>

00004dd0 <iprintf>:
    4dd0:	b40f      	push	{r0, r1, r2, r3}
    4dd2:	4b0a      	ldr	r3, [pc, #40]	; (4dfc <iprintf+0x2c>)
    4dd4:	b513      	push	{r0, r1, r4, lr}
    4dd6:	681c      	ldr	r4, [r3, #0]
    4dd8:	b124      	cbz	r4, 4de4 <iprintf+0x14>
    4dda:	69a3      	ldr	r3, [r4, #24]
    4ddc:	b913      	cbnz	r3, 4de4 <iprintf+0x14>
    4dde:	4620      	mov	r0, r4
    4de0:	f000 fa8a 	bl	52f8 <__sinit>
    4de4:	ab05      	add	r3, sp, #20
    4de6:	9a04      	ldr	r2, [sp, #16]
    4de8:	68a1      	ldr	r1, [r4, #8]
    4dea:	9301      	str	r3, [sp, #4]
    4dec:	4620      	mov	r0, r4
    4dee:	f000 fc4d 	bl	568c <_vfiprintf_r>
    4df2:	b002      	add	sp, #8
    4df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4df8:	b004      	add	sp, #16
    4dfa:	4770      	bx	lr
    4dfc:	20000008 	.word	0x20000008

00004e00 <putchar>:
    4e00:	b538      	push	{r3, r4, r5, lr}
    4e02:	4b08      	ldr	r3, [pc, #32]	; (4e24 <putchar+0x24>)
    4e04:	681c      	ldr	r4, [r3, #0]
    4e06:	4605      	mov	r5, r0
    4e08:	b124      	cbz	r4, 4e14 <putchar+0x14>
    4e0a:	69a3      	ldr	r3, [r4, #24]
    4e0c:	b913      	cbnz	r3, 4e14 <putchar+0x14>
    4e0e:	4620      	mov	r0, r4
    4e10:	f000 fa72 	bl	52f8 <__sinit>
    4e14:	68a2      	ldr	r2, [r4, #8]
    4e16:	4629      	mov	r1, r5
    4e18:	4620      	mov	r0, r4
    4e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4e1e:	f000 bee1 	b.w	5be4 <_putc_r>
    4e22:	bf00      	nop
    4e24:	20000008 	.word	0x20000008

00004e28 <setbuf>:
    4e28:	2900      	cmp	r1, #0
    4e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4e2e:	bf0c      	ite	eq
    4e30:	2202      	moveq	r2, #2
    4e32:	2200      	movne	r2, #0
    4e34:	f000 b800 	b.w	4e38 <setvbuf>

00004e38 <setvbuf>:
    4e38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4e3c:	461d      	mov	r5, r3
    4e3e:	4b51      	ldr	r3, [pc, #324]	; (4f84 <setvbuf+0x14c>)
    4e40:	681e      	ldr	r6, [r3, #0]
    4e42:	4604      	mov	r4, r0
    4e44:	460f      	mov	r7, r1
    4e46:	4690      	mov	r8, r2
    4e48:	b126      	cbz	r6, 4e54 <setvbuf+0x1c>
    4e4a:	69b3      	ldr	r3, [r6, #24]
    4e4c:	b913      	cbnz	r3, 4e54 <setvbuf+0x1c>
    4e4e:	4630      	mov	r0, r6
    4e50:	f000 fa52 	bl	52f8 <__sinit>
    4e54:	4b4c      	ldr	r3, [pc, #304]	; (4f88 <setvbuf+0x150>)
    4e56:	429c      	cmp	r4, r3
    4e58:	d152      	bne.n	4f00 <setvbuf+0xc8>
    4e5a:	6874      	ldr	r4, [r6, #4]
    4e5c:	f1b8 0f02 	cmp.w	r8, #2
    4e60:	d006      	beq.n	4e70 <setvbuf+0x38>
    4e62:	f1b8 0f01 	cmp.w	r8, #1
    4e66:	f200 8089 	bhi.w	4f7c <setvbuf+0x144>
    4e6a:	2d00      	cmp	r5, #0
    4e6c:	f2c0 8086 	blt.w	4f7c <setvbuf+0x144>
    4e70:	4621      	mov	r1, r4
    4e72:	4630      	mov	r0, r6
    4e74:	f000 f9d6 	bl	5224 <_fflush_r>
    4e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4e7a:	b141      	cbz	r1, 4e8e <setvbuf+0x56>
    4e7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    4e80:	4299      	cmp	r1, r3
    4e82:	d002      	beq.n	4e8a <setvbuf+0x52>
    4e84:	4630      	mov	r0, r6
    4e86:	f000 fb2d 	bl	54e4 <_free_r>
    4e8a:	2300      	movs	r3, #0
    4e8c:	6363      	str	r3, [r4, #52]	; 0x34
    4e8e:	2300      	movs	r3, #0
    4e90:	61a3      	str	r3, [r4, #24]
    4e92:	6063      	str	r3, [r4, #4]
    4e94:	89a3      	ldrh	r3, [r4, #12]
    4e96:	061b      	lsls	r3, r3, #24
    4e98:	d503      	bpl.n	4ea2 <setvbuf+0x6a>
    4e9a:	6921      	ldr	r1, [r4, #16]
    4e9c:	4630      	mov	r0, r6
    4e9e:	f000 fb21 	bl	54e4 <_free_r>
    4ea2:	89a3      	ldrh	r3, [r4, #12]
    4ea4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    4ea8:	f023 0303 	bic.w	r3, r3, #3
    4eac:	f1b8 0f02 	cmp.w	r8, #2
    4eb0:	81a3      	strh	r3, [r4, #12]
    4eb2:	d05d      	beq.n	4f70 <setvbuf+0x138>
    4eb4:	ab01      	add	r3, sp, #4
    4eb6:	466a      	mov	r2, sp
    4eb8:	4621      	mov	r1, r4
    4eba:	4630      	mov	r0, r6
    4ebc:	f000 faa6 	bl	540c <__swhatbuf_r>
    4ec0:	89a3      	ldrh	r3, [r4, #12]
    4ec2:	4318      	orrs	r0, r3
    4ec4:	81a0      	strh	r0, [r4, #12]
    4ec6:	bb2d      	cbnz	r5, 4f14 <setvbuf+0xdc>
    4ec8:	9d00      	ldr	r5, [sp, #0]
    4eca:	4628      	mov	r0, r5
    4ecc:	f000 fb02 	bl	54d4 <malloc>
    4ed0:	4607      	mov	r7, r0
    4ed2:	2800      	cmp	r0, #0
    4ed4:	d14e      	bne.n	4f74 <setvbuf+0x13c>
    4ed6:	f8dd 9000 	ldr.w	r9, [sp]
    4eda:	45a9      	cmp	r9, r5
    4edc:	d13c      	bne.n	4f58 <setvbuf+0x120>
    4ede:	f04f 30ff 	mov.w	r0, #4294967295
    4ee2:	89a3      	ldrh	r3, [r4, #12]
    4ee4:	f043 0302 	orr.w	r3, r3, #2
    4ee8:	81a3      	strh	r3, [r4, #12]
    4eea:	2300      	movs	r3, #0
    4eec:	60a3      	str	r3, [r4, #8]
    4eee:	f104 0347 	add.w	r3, r4, #71	; 0x47
    4ef2:	6023      	str	r3, [r4, #0]
    4ef4:	6123      	str	r3, [r4, #16]
    4ef6:	2301      	movs	r3, #1
    4ef8:	6163      	str	r3, [r4, #20]
    4efa:	b003      	add	sp, #12
    4efc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4f00:	4b22      	ldr	r3, [pc, #136]	; (4f8c <setvbuf+0x154>)
    4f02:	429c      	cmp	r4, r3
    4f04:	d101      	bne.n	4f0a <setvbuf+0xd2>
    4f06:	68b4      	ldr	r4, [r6, #8]
    4f08:	e7a8      	b.n	4e5c <setvbuf+0x24>
    4f0a:	4b21      	ldr	r3, [pc, #132]	; (4f90 <setvbuf+0x158>)
    4f0c:	429c      	cmp	r4, r3
    4f0e:	bf08      	it	eq
    4f10:	68f4      	ldreq	r4, [r6, #12]
    4f12:	e7a3      	b.n	4e5c <setvbuf+0x24>
    4f14:	2f00      	cmp	r7, #0
    4f16:	d0d8      	beq.n	4eca <setvbuf+0x92>
    4f18:	69b3      	ldr	r3, [r6, #24]
    4f1a:	b913      	cbnz	r3, 4f22 <setvbuf+0xea>
    4f1c:	4630      	mov	r0, r6
    4f1e:	f000 f9eb 	bl	52f8 <__sinit>
    4f22:	f1b8 0f01 	cmp.w	r8, #1
    4f26:	bf08      	it	eq
    4f28:	89a3      	ldrheq	r3, [r4, #12]
    4f2a:	6027      	str	r7, [r4, #0]
    4f2c:	bf04      	itt	eq
    4f2e:	f043 0301 	orreq.w	r3, r3, #1
    4f32:	81a3      	strheq	r3, [r4, #12]
    4f34:	89a3      	ldrh	r3, [r4, #12]
    4f36:	6127      	str	r7, [r4, #16]
    4f38:	f013 0008 	ands.w	r0, r3, #8
    4f3c:	6165      	str	r5, [r4, #20]
    4f3e:	d01b      	beq.n	4f78 <setvbuf+0x140>
    4f40:	f013 0001 	ands.w	r0, r3, #1
    4f44:	bf18      	it	ne
    4f46:	426d      	negne	r5, r5
    4f48:	f04f 0300 	mov.w	r3, #0
    4f4c:	bf1d      	ittte	ne
    4f4e:	60a3      	strne	r3, [r4, #8]
    4f50:	61a5      	strne	r5, [r4, #24]
    4f52:	4618      	movne	r0, r3
    4f54:	60a5      	streq	r5, [r4, #8]
    4f56:	e7d0      	b.n	4efa <setvbuf+0xc2>
    4f58:	4648      	mov	r0, r9
    4f5a:	f000 fabb 	bl	54d4 <malloc>
    4f5e:	4607      	mov	r7, r0
    4f60:	2800      	cmp	r0, #0
    4f62:	d0bc      	beq.n	4ede <setvbuf+0xa6>
    4f64:	89a3      	ldrh	r3, [r4, #12]
    4f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4f6a:	81a3      	strh	r3, [r4, #12]
    4f6c:	464d      	mov	r5, r9
    4f6e:	e7d3      	b.n	4f18 <setvbuf+0xe0>
    4f70:	2000      	movs	r0, #0
    4f72:	e7b6      	b.n	4ee2 <setvbuf+0xaa>
    4f74:	46a9      	mov	r9, r5
    4f76:	e7f5      	b.n	4f64 <setvbuf+0x12c>
    4f78:	60a0      	str	r0, [r4, #8]
    4f7a:	e7be      	b.n	4efa <setvbuf+0xc2>
    4f7c:	f04f 30ff 	mov.w	r0, #4294967295
    4f80:	e7bb      	b.n	4efa <setvbuf+0xc2>
    4f82:	bf00      	nop
    4f84:	20000008 	.word	0x20000008
    4f88:	00006374 	.word	0x00006374
    4f8c:	00006394 	.word	0x00006394
    4f90:	00006354 	.word	0x00006354

00004f94 <__swbuf_r>:
    4f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f96:	460e      	mov	r6, r1
    4f98:	4614      	mov	r4, r2
    4f9a:	4605      	mov	r5, r0
    4f9c:	b118      	cbz	r0, 4fa6 <__swbuf_r+0x12>
    4f9e:	6983      	ldr	r3, [r0, #24]
    4fa0:	b90b      	cbnz	r3, 4fa6 <__swbuf_r+0x12>
    4fa2:	f000 f9a9 	bl	52f8 <__sinit>
    4fa6:	4b21      	ldr	r3, [pc, #132]	; (502c <__swbuf_r+0x98>)
    4fa8:	429c      	cmp	r4, r3
    4faa:	d12a      	bne.n	5002 <__swbuf_r+0x6e>
    4fac:	686c      	ldr	r4, [r5, #4]
    4fae:	69a3      	ldr	r3, [r4, #24]
    4fb0:	60a3      	str	r3, [r4, #8]
    4fb2:	89a3      	ldrh	r3, [r4, #12]
    4fb4:	071a      	lsls	r2, r3, #28
    4fb6:	d52e      	bpl.n	5016 <__swbuf_r+0x82>
    4fb8:	6923      	ldr	r3, [r4, #16]
    4fba:	b363      	cbz	r3, 5016 <__swbuf_r+0x82>
    4fbc:	6923      	ldr	r3, [r4, #16]
    4fbe:	6820      	ldr	r0, [r4, #0]
    4fc0:	1ac0      	subs	r0, r0, r3
    4fc2:	6963      	ldr	r3, [r4, #20]
    4fc4:	b2f6      	uxtb	r6, r6
    4fc6:	4298      	cmp	r0, r3
    4fc8:	4637      	mov	r7, r6
    4fca:	db04      	blt.n	4fd6 <__swbuf_r+0x42>
    4fcc:	4621      	mov	r1, r4
    4fce:	4628      	mov	r0, r5
    4fd0:	f000 f928 	bl	5224 <_fflush_r>
    4fd4:	bb28      	cbnz	r0, 5022 <__swbuf_r+0x8e>
    4fd6:	68a3      	ldr	r3, [r4, #8]
    4fd8:	3b01      	subs	r3, #1
    4fda:	60a3      	str	r3, [r4, #8]
    4fdc:	6823      	ldr	r3, [r4, #0]
    4fde:	1c5a      	adds	r2, r3, #1
    4fe0:	6022      	str	r2, [r4, #0]
    4fe2:	701e      	strb	r6, [r3, #0]
    4fe4:	6963      	ldr	r3, [r4, #20]
    4fe6:	3001      	adds	r0, #1
    4fe8:	4298      	cmp	r0, r3
    4fea:	d004      	beq.n	4ff6 <__swbuf_r+0x62>
    4fec:	89a3      	ldrh	r3, [r4, #12]
    4fee:	07db      	lsls	r3, r3, #31
    4ff0:	d519      	bpl.n	5026 <__swbuf_r+0x92>
    4ff2:	2e0a      	cmp	r6, #10
    4ff4:	d117      	bne.n	5026 <__swbuf_r+0x92>
    4ff6:	4621      	mov	r1, r4
    4ff8:	4628      	mov	r0, r5
    4ffa:	f000 f913 	bl	5224 <_fflush_r>
    4ffe:	b190      	cbz	r0, 5026 <__swbuf_r+0x92>
    5000:	e00f      	b.n	5022 <__swbuf_r+0x8e>
    5002:	4b0b      	ldr	r3, [pc, #44]	; (5030 <__swbuf_r+0x9c>)
    5004:	429c      	cmp	r4, r3
    5006:	d101      	bne.n	500c <__swbuf_r+0x78>
    5008:	68ac      	ldr	r4, [r5, #8]
    500a:	e7d0      	b.n	4fae <__swbuf_r+0x1a>
    500c:	4b09      	ldr	r3, [pc, #36]	; (5034 <__swbuf_r+0xa0>)
    500e:	429c      	cmp	r4, r3
    5010:	bf08      	it	eq
    5012:	68ec      	ldreq	r4, [r5, #12]
    5014:	e7cb      	b.n	4fae <__swbuf_r+0x1a>
    5016:	4621      	mov	r1, r4
    5018:	4628      	mov	r0, r5
    501a:	f000 f80d 	bl	5038 <__swsetup_r>
    501e:	2800      	cmp	r0, #0
    5020:	d0cc      	beq.n	4fbc <__swbuf_r+0x28>
    5022:	f04f 37ff 	mov.w	r7, #4294967295
    5026:	4638      	mov	r0, r7
    5028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    502a:	bf00      	nop
    502c:	00006374 	.word	0x00006374
    5030:	00006394 	.word	0x00006394
    5034:	00006354 	.word	0x00006354

00005038 <__swsetup_r>:
    5038:	4b32      	ldr	r3, [pc, #200]	; (5104 <__swsetup_r+0xcc>)
    503a:	b570      	push	{r4, r5, r6, lr}
    503c:	681d      	ldr	r5, [r3, #0]
    503e:	4606      	mov	r6, r0
    5040:	460c      	mov	r4, r1
    5042:	b125      	cbz	r5, 504e <__swsetup_r+0x16>
    5044:	69ab      	ldr	r3, [r5, #24]
    5046:	b913      	cbnz	r3, 504e <__swsetup_r+0x16>
    5048:	4628      	mov	r0, r5
    504a:	f000 f955 	bl	52f8 <__sinit>
    504e:	4b2e      	ldr	r3, [pc, #184]	; (5108 <__swsetup_r+0xd0>)
    5050:	429c      	cmp	r4, r3
    5052:	d10f      	bne.n	5074 <__swsetup_r+0x3c>
    5054:	686c      	ldr	r4, [r5, #4]
    5056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    505a:	b29a      	uxth	r2, r3
    505c:	0715      	lsls	r5, r2, #28
    505e:	d42c      	bmi.n	50ba <__swsetup_r+0x82>
    5060:	06d0      	lsls	r0, r2, #27
    5062:	d411      	bmi.n	5088 <__swsetup_r+0x50>
    5064:	2209      	movs	r2, #9
    5066:	6032      	str	r2, [r6, #0]
    5068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    506c:	81a3      	strh	r3, [r4, #12]
    506e:	f04f 30ff 	mov.w	r0, #4294967295
    5072:	bd70      	pop	{r4, r5, r6, pc}
    5074:	4b25      	ldr	r3, [pc, #148]	; (510c <__swsetup_r+0xd4>)
    5076:	429c      	cmp	r4, r3
    5078:	d101      	bne.n	507e <__swsetup_r+0x46>
    507a:	68ac      	ldr	r4, [r5, #8]
    507c:	e7eb      	b.n	5056 <__swsetup_r+0x1e>
    507e:	4b24      	ldr	r3, [pc, #144]	; (5110 <__swsetup_r+0xd8>)
    5080:	429c      	cmp	r4, r3
    5082:	bf08      	it	eq
    5084:	68ec      	ldreq	r4, [r5, #12]
    5086:	e7e6      	b.n	5056 <__swsetup_r+0x1e>
    5088:	0751      	lsls	r1, r2, #29
    508a:	d512      	bpl.n	50b2 <__swsetup_r+0x7a>
    508c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    508e:	b141      	cbz	r1, 50a2 <__swsetup_r+0x6a>
    5090:	f104 0344 	add.w	r3, r4, #68	; 0x44
    5094:	4299      	cmp	r1, r3
    5096:	d002      	beq.n	509e <__swsetup_r+0x66>
    5098:	4630      	mov	r0, r6
    509a:	f000 fa23 	bl	54e4 <_free_r>
    509e:	2300      	movs	r3, #0
    50a0:	6363      	str	r3, [r4, #52]	; 0x34
    50a2:	89a3      	ldrh	r3, [r4, #12]
    50a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    50a8:	81a3      	strh	r3, [r4, #12]
    50aa:	2300      	movs	r3, #0
    50ac:	6063      	str	r3, [r4, #4]
    50ae:	6923      	ldr	r3, [r4, #16]
    50b0:	6023      	str	r3, [r4, #0]
    50b2:	89a3      	ldrh	r3, [r4, #12]
    50b4:	f043 0308 	orr.w	r3, r3, #8
    50b8:	81a3      	strh	r3, [r4, #12]
    50ba:	6923      	ldr	r3, [r4, #16]
    50bc:	b94b      	cbnz	r3, 50d2 <__swsetup_r+0x9a>
    50be:	89a3      	ldrh	r3, [r4, #12]
    50c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
    50c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    50c8:	d003      	beq.n	50d2 <__swsetup_r+0x9a>
    50ca:	4621      	mov	r1, r4
    50cc:	4630      	mov	r0, r6
    50ce:	f000 f9c1 	bl	5454 <__smakebuf_r>
    50d2:	89a2      	ldrh	r2, [r4, #12]
    50d4:	f012 0301 	ands.w	r3, r2, #1
    50d8:	d00c      	beq.n	50f4 <__swsetup_r+0xbc>
    50da:	2300      	movs	r3, #0
    50dc:	60a3      	str	r3, [r4, #8]
    50de:	6963      	ldr	r3, [r4, #20]
    50e0:	425b      	negs	r3, r3
    50e2:	61a3      	str	r3, [r4, #24]
    50e4:	6923      	ldr	r3, [r4, #16]
    50e6:	b953      	cbnz	r3, 50fe <__swsetup_r+0xc6>
    50e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    50ec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    50f0:	d1ba      	bne.n	5068 <__swsetup_r+0x30>
    50f2:	bd70      	pop	{r4, r5, r6, pc}
    50f4:	0792      	lsls	r2, r2, #30
    50f6:	bf58      	it	pl
    50f8:	6963      	ldrpl	r3, [r4, #20]
    50fa:	60a3      	str	r3, [r4, #8]
    50fc:	e7f2      	b.n	50e4 <__swsetup_r+0xac>
    50fe:	2000      	movs	r0, #0
    5100:	e7f7      	b.n	50f2 <__swsetup_r+0xba>
    5102:	bf00      	nop
    5104:	20000008 	.word	0x20000008
    5108:	00006374 	.word	0x00006374
    510c:	00006394 	.word	0x00006394
    5110:	00006354 	.word	0x00006354

00005114 <__sflush_r>:
    5114:	898a      	ldrh	r2, [r1, #12]
    5116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    511a:	4605      	mov	r5, r0
    511c:	0710      	lsls	r0, r2, #28
    511e:	460c      	mov	r4, r1
    5120:	d45a      	bmi.n	51d8 <__sflush_r+0xc4>
    5122:	684b      	ldr	r3, [r1, #4]
    5124:	2b00      	cmp	r3, #0
    5126:	dc05      	bgt.n	5134 <__sflush_r+0x20>
    5128:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    512a:	2b00      	cmp	r3, #0
    512c:	dc02      	bgt.n	5134 <__sflush_r+0x20>
    512e:	2000      	movs	r0, #0
    5130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5134:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    5136:	2e00      	cmp	r6, #0
    5138:	d0f9      	beq.n	512e <__sflush_r+0x1a>
    513a:	2300      	movs	r3, #0
    513c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    5140:	682f      	ldr	r7, [r5, #0]
    5142:	602b      	str	r3, [r5, #0]
    5144:	d033      	beq.n	51ae <__sflush_r+0x9a>
    5146:	6d60      	ldr	r0, [r4, #84]	; 0x54
    5148:	89a3      	ldrh	r3, [r4, #12]
    514a:	075a      	lsls	r2, r3, #29
    514c:	d505      	bpl.n	515a <__sflush_r+0x46>
    514e:	6863      	ldr	r3, [r4, #4]
    5150:	1ac0      	subs	r0, r0, r3
    5152:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5154:	b10b      	cbz	r3, 515a <__sflush_r+0x46>
    5156:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5158:	1ac0      	subs	r0, r0, r3
    515a:	2300      	movs	r3, #0
    515c:	4602      	mov	r2, r0
    515e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    5160:	6a21      	ldr	r1, [r4, #32]
    5162:	4628      	mov	r0, r5
    5164:	47b0      	blx	r6
    5166:	1c43      	adds	r3, r0, #1
    5168:	89a3      	ldrh	r3, [r4, #12]
    516a:	d106      	bne.n	517a <__sflush_r+0x66>
    516c:	6829      	ldr	r1, [r5, #0]
    516e:	291d      	cmp	r1, #29
    5170:	d84b      	bhi.n	520a <__sflush_r+0xf6>
    5172:	4a2b      	ldr	r2, [pc, #172]	; (5220 <__sflush_r+0x10c>)
    5174:	40ca      	lsrs	r2, r1
    5176:	07d6      	lsls	r6, r2, #31
    5178:	d547      	bpl.n	520a <__sflush_r+0xf6>
    517a:	2200      	movs	r2, #0
    517c:	6062      	str	r2, [r4, #4]
    517e:	04d9      	lsls	r1, r3, #19
    5180:	6922      	ldr	r2, [r4, #16]
    5182:	6022      	str	r2, [r4, #0]
    5184:	d504      	bpl.n	5190 <__sflush_r+0x7c>
    5186:	1c42      	adds	r2, r0, #1
    5188:	d101      	bne.n	518e <__sflush_r+0x7a>
    518a:	682b      	ldr	r3, [r5, #0]
    518c:	b903      	cbnz	r3, 5190 <__sflush_r+0x7c>
    518e:	6560      	str	r0, [r4, #84]	; 0x54
    5190:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5192:	602f      	str	r7, [r5, #0]
    5194:	2900      	cmp	r1, #0
    5196:	d0ca      	beq.n	512e <__sflush_r+0x1a>
    5198:	f104 0344 	add.w	r3, r4, #68	; 0x44
    519c:	4299      	cmp	r1, r3
    519e:	d002      	beq.n	51a6 <__sflush_r+0x92>
    51a0:	4628      	mov	r0, r5
    51a2:	f000 f99f 	bl	54e4 <_free_r>
    51a6:	2000      	movs	r0, #0
    51a8:	6360      	str	r0, [r4, #52]	; 0x34
    51aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    51ae:	6a21      	ldr	r1, [r4, #32]
    51b0:	2301      	movs	r3, #1
    51b2:	4628      	mov	r0, r5
    51b4:	47b0      	blx	r6
    51b6:	1c41      	adds	r1, r0, #1
    51b8:	d1c6      	bne.n	5148 <__sflush_r+0x34>
    51ba:	682b      	ldr	r3, [r5, #0]
    51bc:	2b00      	cmp	r3, #0
    51be:	d0c3      	beq.n	5148 <__sflush_r+0x34>
    51c0:	2b1d      	cmp	r3, #29
    51c2:	d001      	beq.n	51c8 <__sflush_r+0xb4>
    51c4:	2b16      	cmp	r3, #22
    51c6:	d101      	bne.n	51cc <__sflush_r+0xb8>
    51c8:	602f      	str	r7, [r5, #0]
    51ca:	e7b0      	b.n	512e <__sflush_r+0x1a>
    51cc:	89a3      	ldrh	r3, [r4, #12]
    51ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    51d2:	81a3      	strh	r3, [r4, #12]
    51d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    51d8:	690f      	ldr	r7, [r1, #16]
    51da:	2f00      	cmp	r7, #0
    51dc:	d0a7      	beq.n	512e <__sflush_r+0x1a>
    51de:	0793      	lsls	r3, r2, #30
    51e0:	680e      	ldr	r6, [r1, #0]
    51e2:	bf08      	it	eq
    51e4:	694b      	ldreq	r3, [r1, #20]
    51e6:	600f      	str	r7, [r1, #0]
    51e8:	bf18      	it	ne
    51ea:	2300      	movne	r3, #0
    51ec:	eba6 0807 	sub.w	r8, r6, r7
    51f0:	608b      	str	r3, [r1, #8]
    51f2:	f1b8 0f00 	cmp.w	r8, #0
    51f6:	dd9a      	ble.n	512e <__sflush_r+0x1a>
    51f8:	4643      	mov	r3, r8
    51fa:	463a      	mov	r2, r7
    51fc:	6a21      	ldr	r1, [r4, #32]
    51fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    5200:	4628      	mov	r0, r5
    5202:	47b0      	blx	r6
    5204:	2800      	cmp	r0, #0
    5206:	dc07      	bgt.n	5218 <__sflush_r+0x104>
    5208:	89a3      	ldrh	r3, [r4, #12]
    520a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    520e:	81a3      	strh	r3, [r4, #12]
    5210:	f04f 30ff 	mov.w	r0, #4294967295
    5214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5218:	4407      	add	r7, r0
    521a:	eba8 0800 	sub.w	r8, r8, r0
    521e:	e7e8      	b.n	51f2 <__sflush_r+0xde>
    5220:	20400001 	.word	0x20400001

00005224 <_fflush_r>:
    5224:	b538      	push	{r3, r4, r5, lr}
    5226:	690b      	ldr	r3, [r1, #16]
    5228:	4605      	mov	r5, r0
    522a:	460c      	mov	r4, r1
    522c:	b1db      	cbz	r3, 5266 <_fflush_r+0x42>
    522e:	b118      	cbz	r0, 5238 <_fflush_r+0x14>
    5230:	6983      	ldr	r3, [r0, #24]
    5232:	b90b      	cbnz	r3, 5238 <_fflush_r+0x14>
    5234:	f000 f860 	bl	52f8 <__sinit>
    5238:	4b0c      	ldr	r3, [pc, #48]	; (526c <_fflush_r+0x48>)
    523a:	429c      	cmp	r4, r3
    523c:	d109      	bne.n	5252 <_fflush_r+0x2e>
    523e:	686c      	ldr	r4, [r5, #4]
    5240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    5244:	b17b      	cbz	r3, 5266 <_fflush_r+0x42>
    5246:	4621      	mov	r1, r4
    5248:	4628      	mov	r0, r5
    524a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    524e:	f7ff bf61 	b.w	5114 <__sflush_r>
    5252:	4b07      	ldr	r3, [pc, #28]	; (5270 <_fflush_r+0x4c>)
    5254:	429c      	cmp	r4, r3
    5256:	d101      	bne.n	525c <_fflush_r+0x38>
    5258:	68ac      	ldr	r4, [r5, #8]
    525a:	e7f1      	b.n	5240 <_fflush_r+0x1c>
    525c:	4b05      	ldr	r3, [pc, #20]	; (5274 <_fflush_r+0x50>)
    525e:	429c      	cmp	r4, r3
    5260:	bf08      	it	eq
    5262:	68ec      	ldreq	r4, [r5, #12]
    5264:	e7ec      	b.n	5240 <_fflush_r+0x1c>
    5266:	2000      	movs	r0, #0
    5268:	bd38      	pop	{r3, r4, r5, pc}
    526a:	bf00      	nop
    526c:	00006374 	.word	0x00006374
    5270:	00006394 	.word	0x00006394
    5274:	00006354 	.word	0x00006354

00005278 <_cleanup_r>:
    5278:	4901      	ldr	r1, [pc, #4]	; (5280 <_cleanup_r+0x8>)
    527a:	f000 b8a9 	b.w	53d0 <_fwalk_reent>
    527e:	bf00      	nop
    5280:	00005225 	.word	0x00005225

00005284 <std.isra.0>:
    5284:	2300      	movs	r3, #0
    5286:	b510      	push	{r4, lr}
    5288:	4604      	mov	r4, r0
    528a:	6003      	str	r3, [r0, #0]
    528c:	6043      	str	r3, [r0, #4]
    528e:	6083      	str	r3, [r0, #8]
    5290:	8181      	strh	r1, [r0, #12]
    5292:	6643      	str	r3, [r0, #100]	; 0x64
    5294:	81c2      	strh	r2, [r0, #14]
    5296:	6103      	str	r3, [r0, #16]
    5298:	6143      	str	r3, [r0, #20]
    529a:	6183      	str	r3, [r0, #24]
    529c:	4619      	mov	r1, r3
    529e:	2208      	movs	r2, #8
    52a0:	305c      	adds	r0, #92	; 0x5c
    52a2:	f7ff fd8d 	bl	4dc0 <memset>
    52a6:	4b05      	ldr	r3, [pc, #20]	; (52bc <std.isra.0+0x38>)
    52a8:	6263      	str	r3, [r4, #36]	; 0x24
    52aa:	4b05      	ldr	r3, [pc, #20]	; (52c0 <std.isra.0+0x3c>)
    52ac:	62a3      	str	r3, [r4, #40]	; 0x28
    52ae:	4b05      	ldr	r3, [pc, #20]	; (52c4 <std.isra.0+0x40>)
    52b0:	62e3      	str	r3, [r4, #44]	; 0x2c
    52b2:	4b05      	ldr	r3, [pc, #20]	; (52c8 <std.isra.0+0x44>)
    52b4:	6224      	str	r4, [r4, #32]
    52b6:	6323      	str	r3, [r4, #48]	; 0x30
    52b8:	bd10      	pop	{r4, pc}
    52ba:	bf00      	nop
    52bc:	00005c71 	.word	0x00005c71
    52c0:	00005c93 	.word	0x00005c93
    52c4:	00005ccb 	.word	0x00005ccb
    52c8:	00005cef 	.word	0x00005cef

000052cc <__sfmoreglue>:
    52cc:	b570      	push	{r4, r5, r6, lr}
    52ce:	1e4a      	subs	r2, r1, #1
    52d0:	2568      	movs	r5, #104	; 0x68
    52d2:	4355      	muls	r5, r2
    52d4:	460e      	mov	r6, r1
    52d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
    52da:	f000 f951 	bl	5580 <_malloc_r>
    52de:	4604      	mov	r4, r0
    52e0:	b140      	cbz	r0, 52f4 <__sfmoreglue+0x28>
    52e2:	2100      	movs	r1, #0
    52e4:	e880 0042 	stmia.w	r0, {r1, r6}
    52e8:	300c      	adds	r0, #12
    52ea:	60a0      	str	r0, [r4, #8]
    52ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
    52f0:	f7ff fd66 	bl	4dc0 <memset>
    52f4:	4620      	mov	r0, r4
    52f6:	bd70      	pop	{r4, r5, r6, pc}

000052f8 <__sinit>:
    52f8:	6983      	ldr	r3, [r0, #24]
    52fa:	b510      	push	{r4, lr}
    52fc:	4604      	mov	r4, r0
    52fe:	bb33      	cbnz	r3, 534e <__sinit+0x56>
    5300:	6483      	str	r3, [r0, #72]	; 0x48
    5302:	64c3      	str	r3, [r0, #76]	; 0x4c
    5304:	6503      	str	r3, [r0, #80]	; 0x50
    5306:	4b12      	ldr	r3, [pc, #72]	; (5350 <__sinit+0x58>)
    5308:	4a12      	ldr	r2, [pc, #72]	; (5354 <__sinit+0x5c>)
    530a:	681b      	ldr	r3, [r3, #0]
    530c:	6282      	str	r2, [r0, #40]	; 0x28
    530e:	4298      	cmp	r0, r3
    5310:	bf04      	itt	eq
    5312:	2301      	moveq	r3, #1
    5314:	6183      	streq	r3, [r0, #24]
    5316:	f000 f81f 	bl	5358 <__sfp>
    531a:	6060      	str	r0, [r4, #4]
    531c:	4620      	mov	r0, r4
    531e:	f000 f81b 	bl	5358 <__sfp>
    5322:	60a0      	str	r0, [r4, #8]
    5324:	4620      	mov	r0, r4
    5326:	f000 f817 	bl	5358 <__sfp>
    532a:	2200      	movs	r2, #0
    532c:	60e0      	str	r0, [r4, #12]
    532e:	2104      	movs	r1, #4
    5330:	6860      	ldr	r0, [r4, #4]
    5332:	f7ff ffa7 	bl	5284 <std.isra.0>
    5336:	2201      	movs	r2, #1
    5338:	2109      	movs	r1, #9
    533a:	68a0      	ldr	r0, [r4, #8]
    533c:	f7ff ffa2 	bl	5284 <std.isra.0>
    5340:	2202      	movs	r2, #2
    5342:	2112      	movs	r1, #18
    5344:	68e0      	ldr	r0, [r4, #12]
    5346:	f7ff ff9d 	bl	5284 <std.isra.0>
    534a:	2301      	movs	r3, #1
    534c:	61a3      	str	r3, [r4, #24]
    534e:	bd10      	pop	{r4, pc}
    5350:	00006350 	.word	0x00006350
    5354:	00005279 	.word	0x00005279

00005358 <__sfp>:
    5358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    535a:	4b1c      	ldr	r3, [pc, #112]	; (53cc <__sfp+0x74>)
    535c:	681e      	ldr	r6, [r3, #0]
    535e:	69b3      	ldr	r3, [r6, #24]
    5360:	4607      	mov	r7, r0
    5362:	b913      	cbnz	r3, 536a <__sfp+0x12>
    5364:	4630      	mov	r0, r6
    5366:	f7ff ffc7 	bl	52f8 <__sinit>
    536a:	3648      	adds	r6, #72	; 0x48
    536c:	68b4      	ldr	r4, [r6, #8]
    536e:	6873      	ldr	r3, [r6, #4]
    5370:	3b01      	subs	r3, #1
    5372:	d503      	bpl.n	537c <__sfp+0x24>
    5374:	6833      	ldr	r3, [r6, #0]
    5376:	b133      	cbz	r3, 5386 <__sfp+0x2e>
    5378:	6836      	ldr	r6, [r6, #0]
    537a:	e7f7      	b.n	536c <__sfp+0x14>
    537c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    5380:	b16d      	cbz	r5, 539e <__sfp+0x46>
    5382:	3468      	adds	r4, #104	; 0x68
    5384:	e7f4      	b.n	5370 <__sfp+0x18>
    5386:	2104      	movs	r1, #4
    5388:	4638      	mov	r0, r7
    538a:	f7ff ff9f 	bl	52cc <__sfmoreglue>
    538e:	6030      	str	r0, [r6, #0]
    5390:	2800      	cmp	r0, #0
    5392:	d1f1      	bne.n	5378 <__sfp+0x20>
    5394:	230c      	movs	r3, #12
    5396:	603b      	str	r3, [r7, #0]
    5398:	4604      	mov	r4, r0
    539a:	4620      	mov	r0, r4
    539c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    539e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    53a2:	81e3      	strh	r3, [r4, #14]
    53a4:	2301      	movs	r3, #1
    53a6:	81a3      	strh	r3, [r4, #12]
    53a8:	6665      	str	r5, [r4, #100]	; 0x64
    53aa:	6025      	str	r5, [r4, #0]
    53ac:	60a5      	str	r5, [r4, #8]
    53ae:	6065      	str	r5, [r4, #4]
    53b0:	6125      	str	r5, [r4, #16]
    53b2:	6165      	str	r5, [r4, #20]
    53b4:	61a5      	str	r5, [r4, #24]
    53b6:	2208      	movs	r2, #8
    53b8:	4629      	mov	r1, r5
    53ba:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    53be:	f7ff fcff 	bl	4dc0 <memset>
    53c2:	6365      	str	r5, [r4, #52]	; 0x34
    53c4:	63a5      	str	r5, [r4, #56]	; 0x38
    53c6:	64a5      	str	r5, [r4, #72]	; 0x48
    53c8:	64e5      	str	r5, [r4, #76]	; 0x4c
    53ca:	e7e6      	b.n	539a <__sfp+0x42>
    53cc:	00006350 	.word	0x00006350

000053d0 <_fwalk_reent>:
    53d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    53d4:	4680      	mov	r8, r0
    53d6:	4689      	mov	r9, r1
    53d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
    53dc:	2600      	movs	r6, #0
    53de:	b914      	cbnz	r4, 53e6 <_fwalk_reent+0x16>
    53e0:	4630      	mov	r0, r6
    53e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    53e6:	68a5      	ldr	r5, [r4, #8]
    53e8:	6867      	ldr	r7, [r4, #4]
    53ea:	3f01      	subs	r7, #1
    53ec:	d501      	bpl.n	53f2 <_fwalk_reent+0x22>
    53ee:	6824      	ldr	r4, [r4, #0]
    53f0:	e7f5      	b.n	53de <_fwalk_reent+0xe>
    53f2:	89ab      	ldrh	r3, [r5, #12]
    53f4:	2b01      	cmp	r3, #1
    53f6:	d907      	bls.n	5408 <_fwalk_reent+0x38>
    53f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    53fc:	3301      	adds	r3, #1
    53fe:	d003      	beq.n	5408 <_fwalk_reent+0x38>
    5400:	4629      	mov	r1, r5
    5402:	4640      	mov	r0, r8
    5404:	47c8      	blx	r9
    5406:	4306      	orrs	r6, r0
    5408:	3568      	adds	r5, #104	; 0x68
    540a:	e7ee      	b.n	53ea <_fwalk_reent+0x1a>

0000540c <__swhatbuf_r>:
    540c:	b570      	push	{r4, r5, r6, lr}
    540e:	460e      	mov	r6, r1
    5410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5414:	2900      	cmp	r1, #0
    5416:	b090      	sub	sp, #64	; 0x40
    5418:	4614      	mov	r4, r2
    541a:	461d      	mov	r5, r3
    541c:	da07      	bge.n	542e <__swhatbuf_r+0x22>
    541e:	2300      	movs	r3, #0
    5420:	602b      	str	r3, [r5, #0]
    5422:	89b3      	ldrh	r3, [r6, #12]
    5424:	061a      	lsls	r2, r3, #24
    5426:	d410      	bmi.n	544a <__swhatbuf_r+0x3e>
    5428:	f44f 6380 	mov.w	r3, #1024	; 0x400
    542c:	e00e      	b.n	544c <__swhatbuf_r+0x40>
    542e:	aa01      	add	r2, sp, #4
    5430:	f000 fc84 	bl	5d3c <_fstat_r>
    5434:	2800      	cmp	r0, #0
    5436:	dbf2      	blt.n	541e <__swhatbuf_r+0x12>
    5438:	9a02      	ldr	r2, [sp, #8]
    543a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    543e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    5442:	425a      	negs	r2, r3
    5444:	415a      	adcs	r2, r3
    5446:	602a      	str	r2, [r5, #0]
    5448:	e7ee      	b.n	5428 <__swhatbuf_r+0x1c>
    544a:	2340      	movs	r3, #64	; 0x40
    544c:	2000      	movs	r0, #0
    544e:	6023      	str	r3, [r4, #0]
    5450:	b010      	add	sp, #64	; 0x40
    5452:	bd70      	pop	{r4, r5, r6, pc}

00005454 <__smakebuf_r>:
    5454:	898b      	ldrh	r3, [r1, #12]
    5456:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5458:	079d      	lsls	r5, r3, #30
    545a:	4606      	mov	r6, r0
    545c:	460c      	mov	r4, r1
    545e:	d507      	bpl.n	5470 <__smakebuf_r+0x1c>
    5460:	f104 0347 	add.w	r3, r4, #71	; 0x47
    5464:	6023      	str	r3, [r4, #0]
    5466:	6123      	str	r3, [r4, #16]
    5468:	2301      	movs	r3, #1
    546a:	6163      	str	r3, [r4, #20]
    546c:	b002      	add	sp, #8
    546e:	bd70      	pop	{r4, r5, r6, pc}
    5470:	ab01      	add	r3, sp, #4
    5472:	466a      	mov	r2, sp
    5474:	f7ff ffca 	bl	540c <__swhatbuf_r>
    5478:	9900      	ldr	r1, [sp, #0]
    547a:	4605      	mov	r5, r0
    547c:	4630      	mov	r0, r6
    547e:	f000 f87f 	bl	5580 <_malloc_r>
    5482:	b948      	cbnz	r0, 5498 <__smakebuf_r+0x44>
    5484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    5488:	059a      	lsls	r2, r3, #22
    548a:	d4ef      	bmi.n	546c <__smakebuf_r+0x18>
    548c:	f023 0303 	bic.w	r3, r3, #3
    5490:	f043 0302 	orr.w	r3, r3, #2
    5494:	81a3      	strh	r3, [r4, #12]
    5496:	e7e3      	b.n	5460 <__smakebuf_r+0xc>
    5498:	4b0d      	ldr	r3, [pc, #52]	; (54d0 <__smakebuf_r+0x7c>)
    549a:	62b3      	str	r3, [r6, #40]	; 0x28
    549c:	89a3      	ldrh	r3, [r4, #12]
    549e:	6020      	str	r0, [r4, #0]
    54a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    54a4:	81a3      	strh	r3, [r4, #12]
    54a6:	9b00      	ldr	r3, [sp, #0]
    54a8:	6163      	str	r3, [r4, #20]
    54aa:	9b01      	ldr	r3, [sp, #4]
    54ac:	6120      	str	r0, [r4, #16]
    54ae:	b15b      	cbz	r3, 54c8 <__smakebuf_r+0x74>
    54b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    54b4:	4630      	mov	r0, r6
    54b6:	f000 fc53 	bl	5d60 <_isatty_r>
    54ba:	b128      	cbz	r0, 54c8 <__smakebuf_r+0x74>
    54bc:	89a3      	ldrh	r3, [r4, #12]
    54be:	f023 0303 	bic.w	r3, r3, #3
    54c2:	f043 0301 	orr.w	r3, r3, #1
    54c6:	81a3      	strh	r3, [r4, #12]
    54c8:	89a3      	ldrh	r3, [r4, #12]
    54ca:	431d      	orrs	r5, r3
    54cc:	81a5      	strh	r5, [r4, #12]
    54ce:	e7cd      	b.n	546c <__smakebuf_r+0x18>
    54d0:	00005279 	.word	0x00005279

000054d4 <malloc>:
    54d4:	4b02      	ldr	r3, [pc, #8]	; (54e0 <malloc+0xc>)
    54d6:	4601      	mov	r1, r0
    54d8:	6818      	ldr	r0, [r3, #0]
    54da:	f000 b851 	b.w	5580 <_malloc_r>
    54de:	bf00      	nop
    54e0:	20000008 	.word	0x20000008

000054e4 <_free_r>:
    54e4:	b538      	push	{r3, r4, r5, lr}
    54e6:	4605      	mov	r5, r0
    54e8:	2900      	cmp	r1, #0
    54ea:	d045      	beq.n	5578 <_free_r+0x94>
    54ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
    54f0:	1f0c      	subs	r4, r1, #4
    54f2:	2b00      	cmp	r3, #0
    54f4:	bfb8      	it	lt
    54f6:	18e4      	addlt	r4, r4, r3
    54f8:	f000 fcaa 	bl	5e50 <__malloc_lock>
    54fc:	4a1f      	ldr	r2, [pc, #124]	; (557c <_free_r+0x98>)
    54fe:	6813      	ldr	r3, [r2, #0]
    5500:	4610      	mov	r0, r2
    5502:	b933      	cbnz	r3, 5512 <_free_r+0x2e>
    5504:	6063      	str	r3, [r4, #4]
    5506:	6014      	str	r4, [r2, #0]
    5508:	4628      	mov	r0, r5
    550a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    550e:	f000 bca0 	b.w	5e52 <__malloc_unlock>
    5512:	42a3      	cmp	r3, r4
    5514:	d90c      	bls.n	5530 <_free_r+0x4c>
    5516:	6821      	ldr	r1, [r4, #0]
    5518:	1862      	adds	r2, r4, r1
    551a:	4293      	cmp	r3, r2
    551c:	bf04      	itt	eq
    551e:	681a      	ldreq	r2, [r3, #0]
    5520:	685b      	ldreq	r3, [r3, #4]
    5522:	6063      	str	r3, [r4, #4]
    5524:	bf04      	itt	eq
    5526:	1852      	addeq	r2, r2, r1
    5528:	6022      	streq	r2, [r4, #0]
    552a:	6004      	str	r4, [r0, #0]
    552c:	e7ec      	b.n	5508 <_free_r+0x24>
    552e:	4613      	mov	r3, r2
    5530:	685a      	ldr	r2, [r3, #4]
    5532:	b10a      	cbz	r2, 5538 <_free_r+0x54>
    5534:	42a2      	cmp	r2, r4
    5536:	d9fa      	bls.n	552e <_free_r+0x4a>
    5538:	6819      	ldr	r1, [r3, #0]
    553a:	1858      	adds	r0, r3, r1
    553c:	42a0      	cmp	r0, r4
    553e:	d10b      	bne.n	5558 <_free_r+0x74>
    5540:	6820      	ldr	r0, [r4, #0]
    5542:	4401      	add	r1, r0
    5544:	1858      	adds	r0, r3, r1
    5546:	4282      	cmp	r2, r0
    5548:	6019      	str	r1, [r3, #0]
    554a:	d1dd      	bne.n	5508 <_free_r+0x24>
    554c:	6810      	ldr	r0, [r2, #0]
    554e:	6852      	ldr	r2, [r2, #4]
    5550:	605a      	str	r2, [r3, #4]
    5552:	4401      	add	r1, r0
    5554:	6019      	str	r1, [r3, #0]
    5556:	e7d7      	b.n	5508 <_free_r+0x24>
    5558:	d902      	bls.n	5560 <_free_r+0x7c>
    555a:	230c      	movs	r3, #12
    555c:	602b      	str	r3, [r5, #0]
    555e:	e7d3      	b.n	5508 <_free_r+0x24>
    5560:	6820      	ldr	r0, [r4, #0]
    5562:	1821      	adds	r1, r4, r0
    5564:	428a      	cmp	r2, r1
    5566:	bf04      	itt	eq
    5568:	6811      	ldreq	r1, [r2, #0]
    556a:	6852      	ldreq	r2, [r2, #4]
    556c:	6062      	str	r2, [r4, #4]
    556e:	bf04      	itt	eq
    5570:	1809      	addeq	r1, r1, r0
    5572:	6021      	streq	r1, [r4, #0]
    5574:	605c      	str	r4, [r3, #4]
    5576:	e7c7      	b.n	5508 <_free_r+0x24>
    5578:	bd38      	pop	{r3, r4, r5, pc}
    557a:	bf00      	nop
    557c:	2000013c 	.word	0x2000013c

00005580 <_malloc_r>:
    5580:	b570      	push	{r4, r5, r6, lr}
    5582:	1ccd      	adds	r5, r1, #3
    5584:	f025 0503 	bic.w	r5, r5, #3
    5588:	3508      	adds	r5, #8
    558a:	2d0c      	cmp	r5, #12
    558c:	bf38      	it	cc
    558e:	250c      	movcc	r5, #12
    5590:	2d00      	cmp	r5, #0
    5592:	4606      	mov	r6, r0
    5594:	db01      	blt.n	559a <_malloc_r+0x1a>
    5596:	42a9      	cmp	r1, r5
    5598:	d903      	bls.n	55a2 <_malloc_r+0x22>
    559a:	230c      	movs	r3, #12
    559c:	6033      	str	r3, [r6, #0]
    559e:	2000      	movs	r0, #0
    55a0:	bd70      	pop	{r4, r5, r6, pc}
    55a2:	f000 fc55 	bl	5e50 <__malloc_lock>
    55a6:	4a23      	ldr	r2, [pc, #140]	; (5634 <_malloc_r+0xb4>)
    55a8:	6814      	ldr	r4, [r2, #0]
    55aa:	4621      	mov	r1, r4
    55ac:	b991      	cbnz	r1, 55d4 <_malloc_r+0x54>
    55ae:	4c22      	ldr	r4, [pc, #136]	; (5638 <_malloc_r+0xb8>)
    55b0:	6823      	ldr	r3, [r4, #0]
    55b2:	b91b      	cbnz	r3, 55bc <_malloc_r+0x3c>
    55b4:	4630      	mov	r0, r6
    55b6:	f000 fb4b 	bl	5c50 <_sbrk_r>
    55ba:	6020      	str	r0, [r4, #0]
    55bc:	4629      	mov	r1, r5
    55be:	4630      	mov	r0, r6
    55c0:	f000 fb46 	bl	5c50 <_sbrk_r>
    55c4:	1c43      	adds	r3, r0, #1
    55c6:	d126      	bne.n	5616 <_malloc_r+0x96>
    55c8:	230c      	movs	r3, #12
    55ca:	6033      	str	r3, [r6, #0]
    55cc:	4630      	mov	r0, r6
    55ce:	f000 fc40 	bl	5e52 <__malloc_unlock>
    55d2:	e7e4      	b.n	559e <_malloc_r+0x1e>
    55d4:	680b      	ldr	r3, [r1, #0]
    55d6:	1b5b      	subs	r3, r3, r5
    55d8:	d41a      	bmi.n	5610 <_malloc_r+0x90>
    55da:	2b0b      	cmp	r3, #11
    55dc:	d90f      	bls.n	55fe <_malloc_r+0x7e>
    55de:	600b      	str	r3, [r1, #0]
    55e0:	50cd      	str	r5, [r1, r3]
    55e2:	18cc      	adds	r4, r1, r3
    55e4:	4630      	mov	r0, r6
    55e6:	f000 fc34 	bl	5e52 <__malloc_unlock>
    55ea:	f104 000b 	add.w	r0, r4, #11
    55ee:	1d23      	adds	r3, r4, #4
    55f0:	f020 0007 	bic.w	r0, r0, #7
    55f4:	1ac3      	subs	r3, r0, r3
    55f6:	d01b      	beq.n	5630 <_malloc_r+0xb0>
    55f8:	425a      	negs	r2, r3
    55fa:	50e2      	str	r2, [r4, r3]
    55fc:	bd70      	pop	{r4, r5, r6, pc}
    55fe:	428c      	cmp	r4, r1
    5600:	bf0d      	iteet	eq
    5602:	6863      	ldreq	r3, [r4, #4]
    5604:	684b      	ldrne	r3, [r1, #4]
    5606:	6063      	strne	r3, [r4, #4]
    5608:	6013      	streq	r3, [r2, #0]
    560a:	bf18      	it	ne
    560c:	460c      	movne	r4, r1
    560e:	e7e9      	b.n	55e4 <_malloc_r+0x64>
    5610:	460c      	mov	r4, r1
    5612:	6849      	ldr	r1, [r1, #4]
    5614:	e7ca      	b.n	55ac <_malloc_r+0x2c>
    5616:	1cc4      	adds	r4, r0, #3
    5618:	f024 0403 	bic.w	r4, r4, #3
    561c:	42a0      	cmp	r0, r4
    561e:	d005      	beq.n	562c <_malloc_r+0xac>
    5620:	1a21      	subs	r1, r4, r0
    5622:	4630      	mov	r0, r6
    5624:	f000 fb14 	bl	5c50 <_sbrk_r>
    5628:	3001      	adds	r0, #1
    562a:	d0cd      	beq.n	55c8 <_malloc_r+0x48>
    562c:	6025      	str	r5, [r4, #0]
    562e:	e7d9      	b.n	55e4 <_malloc_r+0x64>
    5630:	bd70      	pop	{r4, r5, r6, pc}
    5632:	bf00      	nop
    5634:	2000013c 	.word	0x2000013c
    5638:	20000140 	.word	0x20000140

0000563c <__sfputc_r>:
    563c:	6893      	ldr	r3, [r2, #8]
    563e:	3b01      	subs	r3, #1
    5640:	2b00      	cmp	r3, #0
    5642:	b410      	push	{r4}
    5644:	6093      	str	r3, [r2, #8]
    5646:	da08      	bge.n	565a <__sfputc_r+0x1e>
    5648:	6994      	ldr	r4, [r2, #24]
    564a:	42a3      	cmp	r3, r4
    564c:	db02      	blt.n	5654 <__sfputc_r+0x18>
    564e:	b2cb      	uxtb	r3, r1
    5650:	2b0a      	cmp	r3, #10
    5652:	d102      	bne.n	565a <__sfputc_r+0x1e>
    5654:	bc10      	pop	{r4}
    5656:	f7ff bc9d 	b.w	4f94 <__swbuf_r>
    565a:	6813      	ldr	r3, [r2, #0]
    565c:	1c58      	adds	r0, r3, #1
    565e:	6010      	str	r0, [r2, #0]
    5660:	7019      	strb	r1, [r3, #0]
    5662:	b2c8      	uxtb	r0, r1
    5664:	bc10      	pop	{r4}
    5666:	4770      	bx	lr

00005668 <__sfputs_r>:
    5668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    566a:	4606      	mov	r6, r0
    566c:	460f      	mov	r7, r1
    566e:	4614      	mov	r4, r2
    5670:	18d5      	adds	r5, r2, r3
    5672:	42ac      	cmp	r4, r5
    5674:	d101      	bne.n	567a <__sfputs_r+0x12>
    5676:	2000      	movs	r0, #0
    5678:	e007      	b.n	568a <__sfputs_r+0x22>
    567a:	463a      	mov	r2, r7
    567c:	f814 1b01 	ldrb.w	r1, [r4], #1
    5680:	4630      	mov	r0, r6
    5682:	f7ff ffdb 	bl	563c <__sfputc_r>
    5686:	1c43      	adds	r3, r0, #1
    5688:	d1f3      	bne.n	5672 <__sfputs_r+0xa>
    568a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000568c <_vfiprintf_r>:
    568c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5690:	b09d      	sub	sp, #116	; 0x74
    5692:	460c      	mov	r4, r1
    5694:	4617      	mov	r7, r2
    5696:	9303      	str	r3, [sp, #12]
    5698:	4606      	mov	r6, r0
    569a:	b118      	cbz	r0, 56a4 <_vfiprintf_r+0x18>
    569c:	6983      	ldr	r3, [r0, #24]
    569e:	b90b      	cbnz	r3, 56a4 <_vfiprintf_r+0x18>
    56a0:	f7ff fe2a 	bl	52f8 <__sinit>
    56a4:	4b7c      	ldr	r3, [pc, #496]	; (5898 <_vfiprintf_r+0x20c>)
    56a6:	429c      	cmp	r4, r3
    56a8:	d157      	bne.n	575a <_vfiprintf_r+0xce>
    56aa:	6874      	ldr	r4, [r6, #4]
    56ac:	89a3      	ldrh	r3, [r4, #12]
    56ae:	0718      	lsls	r0, r3, #28
    56b0:	d55d      	bpl.n	576e <_vfiprintf_r+0xe2>
    56b2:	6923      	ldr	r3, [r4, #16]
    56b4:	2b00      	cmp	r3, #0
    56b6:	d05a      	beq.n	576e <_vfiprintf_r+0xe2>
    56b8:	2300      	movs	r3, #0
    56ba:	9309      	str	r3, [sp, #36]	; 0x24
    56bc:	2320      	movs	r3, #32
    56be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    56c2:	2330      	movs	r3, #48	; 0x30
    56c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    56c8:	f04f 0b01 	mov.w	fp, #1
    56cc:	46b8      	mov	r8, r7
    56ce:	4645      	mov	r5, r8
    56d0:	f815 3b01 	ldrb.w	r3, [r5], #1
    56d4:	2b00      	cmp	r3, #0
    56d6:	d155      	bne.n	5784 <_vfiprintf_r+0xf8>
    56d8:	ebb8 0a07 	subs.w	sl, r8, r7
    56dc:	d00b      	beq.n	56f6 <_vfiprintf_r+0x6a>
    56de:	4653      	mov	r3, sl
    56e0:	463a      	mov	r2, r7
    56e2:	4621      	mov	r1, r4
    56e4:	4630      	mov	r0, r6
    56e6:	f7ff ffbf 	bl	5668 <__sfputs_r>
    56ea:	3001      	adds	r0, #1
    56ec:	f000 80c4 	beq.w	5878 <_vfiprintf_r+0x1ec>
    56f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    56f2:	4453      	add	r3, sl
    56f4:	9309      	str	r3, [sp, #36]	; 0x24
    56f6:	f898 3000 	ldrb.w	r3, [r8]
    56fa:	2b00      	cmp	r3, #0
    56fc:	f000 80bc 	beq.w	5878 <_vfiprintf_r+0x1ec>
    5700:	2300      	movs	r3, #0
    5702:	f04f 32ff 	mov.w	r2, #4294967295
    5706:	9304      	str	r3, [sp, #16]
    5708:	9307      	str	r3, [sp, #28]
    570a:	9205      	str	r2, [sp, #20]
    570c:	9306      	str	r3, [sp, #24]
    570e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    5712:	931a      	str	r3, [sp, #104]	; 0x68
    5714:	2205      	movs	r2, #5
    5716:	7829      	ldrb	r1, [r5, #0]
    5718:	4860      	ldr	r0, [pc, #384]	; (589c <_vfiprintf_r+0x210>)
    571a:	f000 fb49 	bl	5db0 <memchr>
    571e:	f105 0801 	add.w	r8, r5, #1
    5722:	9b04      	ldr	r3, [sp, #16]
    5724:	2800      	cmp	r0, #0
    5726:	d131      	bne.n	578c <_vfiprintf_r+0x100>
    5728:	06d9      	lsls	r1, r3, #27
    572a:	bf44      	itt	mi
    572c:	2220      	movmi	r2, #32
    572e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    5732:	071a      	lsls	r2, r3, #28
    5734:	bf44      	itt	mi
    5736:	222b      	movmi	r2, #43	; 0x2b
    5738:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    573c:	782a      	ldrb	r2, [r5, #0]
    573e:	2a2a      	cmp	r2, #42	; 0x2a
    5740:	d02c      	beq.n	579c <_vfiprintf_r+0x110>
    5742:	9a07      	ldr	r2, [sp, #28]
    5744:	2100      	movs	r1, #0
    5746:	200a      	movs	r0, #10
    5748:	46a8      	mov	r8, r5
    574a:	3501      	adds	r5, #1
    574c:	f898 3000 	ldrb.w	r3, [r8]
    5750:	3b30      	subs	r3, #48	; 0x30
    5752:	2b09      	cmp	r3, #9
    5754:	d96d      	bls.n	5832 <_vfiprintf_r+0x1a6>
    5756:	b371      	cbz	r1, 57b6 <_vfiprintf_r+0x12a>
    5758:	e026      	b.n	57a8 <_vfiprintf_r+0x11c>
    575a:	4b51      	ldr	r3, [pc, #324]	; (58a0 <_vfiprintf_r+0x214>)
    575c:	429c      	cmp	r4, r3
    575e:	d101      	bne.n	5764 <_vfiprintf_r+0xd8>
    5760:	68b4      	ldr	r4, [r6, #8]
    5762:	e7a3      	b.n	56ac <_vfiprintf_r+0x20>
    5764:	4b4f      	ldr	r3, [pc, #316]	; (58a4 <_vfiprintf_r+0x218>)
    5766:	429c      	cmp	r4, r3
    5768:	bf08      	it	eq
    576a:	68f4      	ldreq	r4, [r6, #12]
    576c:	e79e      	b.n	56ac <_vfiprintf_r+0x20>
    576e:	4621      	mov	r1, r4
    5770:	4630      	mov	r0, r6
    5772:	f7ff fc61 	bl	5038 <__swsetup_r>
    5776:	2800      	cmp	r0, #0
    5778:	d09e      	beq.n	56b8 <_vfiprintf_r+0x2c>
    577a:	f04f 30ff 	mov.w	r0, #4294967295
    577e:	b01d      	add	sp, #116	; 0x74
    5780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5784:	2b25      	cmp	r3, #37	; 0x25
    5786:	d0a7      	beq.n	56d8 <_vfiprintf_r+0x4c>
    5788:	46a8      	mov	r8, r5
    578a:	e7a0      	b.n	56ce <_vfiprintf_r+0x42>
    578c:	4a43      	ldr	r2, [pc, #268]	; (589c <_vfiprintf_r+0x210>)
    578e:	1a80      	subs	r0, r0, r2
    5790:	fa0b f000 	lsl.w	r0, fp, r0
    5794:	4318      	orrs	r0, r3
    5796:	9004      	str	r0, [sp, #16]
    5798:	4645      	mov	r5, r8
    579a:	e7bb      	b.n	5714 <_vfiprintf_r+0x88>
    579c:	9a03      	ldr	r2, [sp, #12]
    579e:	1d11      	adds	r1, r2, #4
    57a0:	6812      	ldr	r2, [r2, #0]
    57a2:	9103      	str	r1, [sp, #12]
    57a4:	2a00      	cmp	r2, #0
    57a6:	db01      	blt.n	57ac <_vfiprintf_r+0x120>
    57a8:	9207      	str	r2, [sp, #28]
    57aa:	e004      	b.n	57b6 <_vfiprintf_r+0x12a>
    57ac:	4252      	negs	r2, r2
    57ae:	f043 0302 	orr.w	r3, r3, #2
    57b2:	9207      	str	r2, [sp, #28]
    57b4:	9304      	str	r3, [sp, #16]
    57b6:	f898 3000 	ldrb.w	r3, [r8]
    57ba:	2b2e      	cmp	r3, #46	; 0x2e
    57bc:	d110      	bne.n	57e0 <_vfiprintf_r+0x154>
    57be:	f898 3001 	ldrb.w	r3, [r8, #1]
    57c2:	2b2a      	cmp	r3, #42	; 0x2a
    57c4:	f108 0101 	add.w	r1, r8, #1
    57c8:	d137      	bne.n	583a <_vfiprintf_r+0x1ae>
    57ca:	9b03      	ldr	r3, [sp, #12]
    57cc:	1d1a      	adds	r2, r3, #4
    57ce:	681b      	ldr	r3, [r3, #0]
    57d0:	9203      	str	r2, [sp, #12]
    57d2:	2b00      	cmp	r3, #0
    57d4:	bfb8      	it	lt
    57d6:	f04f 33ff 	movlt.w	r3, #4294967295
    57da:	f108 0802 	add.w	r8, r8, #2
    57de:	9305      	str	r3, [sp, #20]
    57e0:	4d31      	ldr	r5, [pc, #196]	; (58a8 <_vfiprintf_r+0x21c>)
    57e2:	f898 1000 	ldrb.w	r1, [r8]
    57e6:	2203      	movs	r2, #3
    57e8:	4628      	mov	r0, r5
    57ea:	f000 fae1 	bl	5db0 <memchr>
    57ee:	b140      	cbz	r0, 5802 <_vfiprintf_r+0x176>
    57f0:	2340      	movs	r3, #64	; 0x40
    57f2:	1b40      	subs	r0, r0, r5
    57f4:	fa03 f000 	lsl.w	r0, r3, r0
    57f8:	9b04      	ldr	r3, [sp, #16]
    57fa:	4303      	orrs	r3, r0
    57fc:	9304      	str	r3, [sp, #16]
    57fe:	f108 0801 	add.w	r8, r8, #1
    5802:	f898 1000 	ldrb.w	r1, [r8]
    5806:	4829      	ldr	r0, [pc, #164]	; (58ac <_vfiprintf_r+0x220>)
    5808:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    580c:	2206      	movs	r2, #6
    580e:	f108 0701 	add.w	r7, r8, #1
    5812:	f000 facd 	bl	5db0 <memchr>
    5816:	2800      	cmp	r0, #0
    5818:	d034      	beq.n	5884 <_vfiprintf_r+0x1f8>
    581a:	4b25      	ldr	r3, [pc, #148]	; (58b0 <_vfiprintf_r+0x224>)
    581c:	bb03      	cbnz	r3, 5860 <_vfiprintf_r+0x1d4>
    581e:	9b03      	ldr	r3, [sp, #12]
    5820:	3307      	adds	r3, #7
    5822:	f023 0307 	bic.w	r3, r3, #7
    5826:	3308      	adds	r3, #8
    5828:	9303      	str	r3, [sp, #12]
    582a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    582c:	444b      	add	r3, r9
    582e:	9309      	str	r3, [sp, #36]	; 0x24
    5830:	e74c      	b.n	56cc <_vfiprintf_r+0x40>
    5832:	fb00 3202 	mla	r2, r0, r2, r3
    5836:	2101      	movs	r1, #1
    5838:	e786      	b.n	5748 <_vfiprintf_r+0xbc>
    583a:	2300      	movs	r3, #0
    583c:	9305      	str	r3, [sp, #20]
    583e:	4618      	mov	r0, r3
    5840:	250a      	movs	r5, #10
    5842:	4688      	mov	r8, r1
    5844:	3101      	adds	r1, #1
    5846:	f898 2000 	ldrb.w	r2, [r8]
    584a:	3a30      	subs	r2, #48	; 0x30
    584c:	2a09      	cmp	r2, #9
    584e:	d903      	bls.n	5858 <_vfiprintf_r+0x1cc>
    5850:	2b00      	cmp	r3, #0
    5852:	d0c5      	beq.n	57e0 <_vfiprintf_r+0x154>
    5854:	9005      	str	r0, [sp, #20]
    5856:	e7c3      	b.n	57e0 <_vfiprintf_r+0x154>
    5858:	fb05 2000 	mla	r0, r5, r0, r2
    585c:	2301      	movs	r3, #1
    585e:	e7f0      	b.n	5842 <_vfiprintf_r+0x1b6>
    5860:	ab03      	add	r3, sp, #12
    5862:	9300      	str	r3, [sp, #0]
    5864:	4622      	mov	r2, r4
    5866:	4b13      	ldr	r3, [pc, #76]	; (58b4 <_vfiprintf_r+0x228>)
    5868:	a904      	add	r1, sp, #16
    586a:	4630      	mov	r0, r6
    586c:	f3af 8000 	nop.w
    5870:	f1b0 3fff 	cmp.w	r0, #4294967295
    5874:	4681      	mov	r9, r0
    5876:	d1d8      	bne.n	582a <_vfiprintf_r+0x19e>
    5878:	89a3      	ldrh	r3, [r4, #12]
    587a:	065b      	lsls	r3, r3, #25
    587c:	f53f af7d 	bmi.w	577a <_vfiprintf_r+0xee>
    5880:	9809      	ldr	r0, [sp, #36]	; 0x24
    5882:	e77c      	b.n	577e <_vfiprintf_r+0xf2>
    5884:	ab03      	add	r3, sp, #12
    5886:	9300      	str	r3, [sp, #0]
    5888:	4622      	mov	r2, r4
    588a:	4b0a      	ldr	r3, [pc, #40]	; (58b4 <_vfiprintf_r+0x228>)
    588c:	a904      	add	r1, sp, #16
    588e:	4630      	mov	r0, r6
    5890:	f000 f888 	bl	59a4 <_printf_i>
    5894:	e7ec      	b.n	5870 <_vfiprintf_r+0x1e4>
    5896:	bf00      	nop
    5898:	00006374 	.word	0x00006374
    589c:	000063b4 	.word	0x000063b4
    58a0:	00006394 	.word	0x00006394
    58a4:	00006354 	.word	0x00006354
    58a8:	000063ba 	.word	0x000063ba
    58ac:	000063be 	.word	0x000063be
    58b0:	00000000 	.word	0x00000000
    58b4:	00005669 	.word	0x00005669

000058b8 <_printf_common>:
    58b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    58bc:	4691      	mov	r9, r2
    58be:	461f      	mov	r7, r3
    58c0:	688a      	ldr	r2, [r1, #8]
    58c2:	690b      	ldr	r3, [r1, #16]
    58c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
    58c8:	4293      	cmp	r3, r2
    58ca:	bfb8      	it	lt
    58cc:	4613      	movlt	r3, r2
    58ce:	f8c9 3000 	str.w	r3, [r9]
    58d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    58d6:	4606      	mov	r6, r0
    58d8:	460c      	mov	r4, r1
    58da:	b112      	cbz	r2, 58e2 <_printf_common+0x2a>
    58dc:	3301      	adds	r3, #1
    58de:	f8c9 3000 	str.w	r3, [r9]
    58e2:	6823      	ldr	r3, [r4, #0]
    58e4:	0699      	lsls	r1, r3, #26
    58e6:	bf42      	ittt	mi
    58e8:	f8d9 3000 	ldrmi.w	r3, [r9]
    58ec:	3302      	addmi	r3, #2
    58ee:	f8c9 3000 	strmi.w	r3, [r9]
    58f2:	6825      	ldr	r5, [r4, #0]
    58f4:	f015 0506 	ands.w	r5, r5, #6
    58f8:	d107      	bne.n	590a <_printf_common+0x52>
    58fa:	f104 0a19 	add.w	sl, r4, #25
    58fe:	68e3      	ldr	r3, [r4, #12]
    5900:	f8d9 2000 	ldr.w	r2, [r9]
    5904:	1a9b      	subs	r3, r3, r2
    5906:	429d      	cmp	r5, r3
    5908:	db29      	blt.n	595e <_printf_common+0xa6>
    590a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    590e:	6822      	ldr	r2, [r4, #0]
    5910:	3300      	adds	r3, #0
    5912:	bf18      	it	ne
    5914:	2301      	movne	r3, #1
    5916:	0692      	lsls	r2, r2, #26
    5918:	d42e      	bmi.n	5978 <_printf_common+0xc0>
    591a:	f104 0243 	add.w	r2, r4, #67	; 0x43
    591e:	4639      	mov	r1, r7
    5920:	4630      	mov	r0, r6
    5922:	47c0      	blx	r8
    5924:	3001      	adds	r0, #1
    5926:	d021      	beq.n	596c <_printf_common+0xb4>
    5928:	6823      	ldr	r3, [r4, #0]
    592a:	68e5      	ldr	r5, [r4, #12]
    592c:	f8d9 2000 	ldr.w	r2, [r9]
    5930:	f003 0306 	and.w	r3, r3, #6
    5934:	2b04      	cmp	r3, #4
    5936:	bf08      	it	eq
    5938:	1aad      	subeq	r5, r5, r2
    593a:	68a3      	ldr	r3, [r4, #8]
    593c:	6922      	ldr	r2, [r4, #16]
    593e:	bf0c      	ite	eq
    5940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    5944:	2500      	movne	r5, #0
    5946:	4293      	cmp	r3, r2
    5948:	bfc4      	itt	gt
    594a:	1a9b      	subgt	r3, r3, r2
    594c:	18ed      	addgt	r5, r5, r3
    594e:	f04f 0900 	mov.w	r9, #0
    5952:	341a      	adds	r4, #26
    5954:	454d      	cmp	r5, r9
    5956:	d11b      	bne.n	5990 <_printf_common+0xd8>
    5958:	2000      	movs	r0, #0
    595a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    595e:	2301      	movs	r3, #1
    5960:	4652      	mov	r2, sl
    5962:	4639      	mov	r1, r7
    5964:	4630      	mov	r0, r6
    5966:	47c0      	blx	r8
    5968:	3001      	adds	r0, #1
    596a:	d103      	bne.n	5974 <_printf_common+0xbc>
    596c:	f04f 30ff 	mov.w	r0, #4294967295
    5970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5974:	3501      	adds	r5, #1
    5976:	e7c2      	b.n	58fe <_printf_common+0x46>
    5978:	18e1      	adds	r1, r4, r3
    597a:	1c5a      	adds	r2, r3, #1
    597c:	2030      	movs	r0, #48	; 0x30
    597e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    5982:	4422      	add	r2, r4
    5984:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    5988:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    598c:	3302      	adds	r3, #2
    598e:	e7c4      	b.n	591a <_printf_common+0x62>
    5990:	2301      	movs	r3, #1
    5992:	4622      	mov	r2, r4
    5994:	4639      	mov	r1, r7
    5996:	4630      	mov	r0, r6
    5998:	47c0      	blx	r8
    599a:	3001      	adds	r0, #1
    599c:	d0e6      	beq.n	596c <_printf_common+0xb4>
    599e:	f109 0901 	add.w	r9, r9, #1
    59a2:	e7d7      	b.n	5954 <_printf_common+0x9c>

000059a4 <_printf_i>:
    59a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    59a8:	4617      	mov	r7, r2
    59aa:	7e0a      	ldrb	r2, [r1, #24]
    59ac:	b085      	sub	sp, #20
    59ae:	2a6e      	cmp	r2, #110	; 0x6e
    59b0:	4698      	mov	r8, r3
    59b2:	4606      	mov	r6, r0
    59b4:	460c      	mov	r4, r1
    59b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    59b8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    59bc:	f000 80bc 	beq.w	5b38 <_printf_i+0x194>
    59c0:	d81a      	bhi.n	59f8 <_printf_i+0x54>
    59c2:	2a63      	cmp	r2, #99	; 0x63
    59c4:	d02e      	beq.n	5a24 <_printf_i+0x80>
    59c6:	d80a      	bhi.n	59de <_printf_i+0x3a>
    59c8:	2a00      	cmp	r2, #0
    59ca:	f000 80c8 	beq.w	5b5e <_printf_i+0x1ba>
    59ce:	2a58      	cmp	r2, #88	; 0x58
    59d0:	f000 808a 	beq.w	5ae8 <_printf_i+0x144>
    59d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
    59d8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    59dc:	e02a      	b.n	5a34 <_printf_i+0x90>
    59de:	2a64      	cmp	r2, #100	; 0x64
    59e0:	d001      	beq.n	59e6 <_printf_i+0x42>
    59e2:	2a69      	cmp	r2, #105	; 0x69
    59e4:	d1f6      	bne.n	59d4 <_printf_i+0x30>
    59e6:	6821      	ldr	r1, [r4, #0]
    59e8:	681a      	ldr	r2, [r3, #0]
    59ea:	f011 0f80 	tst.w	r1, #128	; 0x80
    59ee:	d023      	beq.n	5a38 <_printf_i+0x94>
    59f0:	1d11      	adds	r1, r2, #4
    59f2:	6019      	str	r1, [r3, #0]
    59f4:	6813      	ldr	r3, [r2, #0]
    59f6:	e027      	b.n	5a48 <_printf_i+0xa4>
    59f8:	2a73      	cmp	r2, #115	; 0x73
    59fa:	f000 80b4 	beq.w	5b66 <_printf_i+0x1c2>
    59fe:	d808      	bhi.n	5a12 <_printf_i+0x6e>
    5a00:	2a6f      	cmp	r2, #111	; 0x6f
    5a02:	d02a      	beq.n	5a5a <_printf_i+0xb6>
    5a04:	2a70      	cmp	r2, #112	; 0x70
    5a06:	d1e5      	bne.n	59d4 <_printf_i+0x30>
    5a08:	680a      	ldr	r2, [r1, #0]
    5a0a:	f042 0220 	orr.w	r2, r2, #32
    5a0e:	600a      	str	r2, [r1, #0]
    5a10:	e003      	b.n	5a1a <_printf_i+0x76>
    5a12:	2a75      	cmp	r2, #117	; 0x75
    5a14:	d021      	beq.n	5a5a <_printf_i+0xb6>
    5a16:	2a78      	cmp	r2, #120	; 0x78
    5a18:	d1dc      	bne.n	59d4 <_printf_i+0x30>
    5a1a:	2278      	movs	r2, #120	; 0x78
    5a1c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    5a20:	496e      	ldr	r1, [pc, #440]	; (5bdc <_printf_i+0x238>)
    5a22:	e064      	b.n	5aee <_printf_i+0x14a>
    5a24:	681a      	ldr	r2, [r3, #0]
    5a26:	f101 0542 	add.w	r5, r1, #66	; 0x42
    5a2a:	1d11      	adds	r1, r2, #4
    5a2c:	6019      	str	r1, [r3, #0]
    5a2e:	6813      	ldr	r3, [r2, #0]
    5a30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5a34:	2301      	movs	r3, #1
    5a36:	e0a3      	b.n	5b80 <_printf_i+0x1dc>
    5a38:	f011 0f40 	tst.w	r1, #64	; 0x40
    5a3c:	f102 0104 	add.w	r1, r2, #4
    5a40:	6019      	str	r1, [r3, #0]
    5a42:	d0d7      	beq.n	59f4 <_printf_i+0x50>
    5a44:	f9b2 3000 	ldrsh.w	r3, [r2]
    5a48:	2b00      	cmp	r3, #0
    5a4a:	da03      	bge.n	5a54 <_printf_i+0xb0>
    5a4c:	222d      	movs	r2, #45	; 0x2d
    5a4e:	425b      	negs	r3, r3
    5a50:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    5a54:	4962      	ldr	r1, [pc, #392]	; (5be0 <_printf_i+0x23c>)
    5a56:	220a      	movs	r2, #10
    5a58:	e017      	b.n	5a8a <_printf_i+0xe6>
    5a5a:	6820      	ldr	r0, [r4, #0]
    5a5c:	6819      	ldr	r1, [r3, #0]
    5a5e:	f010 0f80 	tst.w	r0, #128	; 0x80
    5a62:	d003      	beq.n	5a6c <_printf_i+0xc8>
    5a64:	1d08      	adds	r0, r1, #4
    5a66:	6018      	str	r0, [r3, #0]
    5a68:	680b      	ldr	r3, [r1, #0]
    5a6a:	e006      	b.n	5a7a <_printf_i+0xd6>
    5a6c:	f010 0f40 	tst.w	r0, #64	; 0x40
    5a70:	f101 0004 	add.w	r0, r1, #4
    5a74:	6018      	str	r0, [r3, #0]
    5a76:	d0f7      	beq.n	5a68 <_printf_i+0xc4>
    5a78:	880b      	ldrh	r3, [r1, #0]
    5a7a:	4959      	ldr	r1, [pc, #356]	; (5be0 <_printf_i+0x23c>)
    5a7c:	2a6f      	cmp	r2, #111	; 0x6f
    5a7e:	bf14      	ite	ne
    5a80:	220a      	movne	r2, #10
    5a82:	2208      	moveq	r2, #8
    5a84:	2000      	movs	r0, #0
    5a86:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    5a8a:	6865      	ldr	r5, [r4, #4]
    5a8c:	60a5      	str	r5, [r4, #8]
    5a8e:	2d00      	cmp	r5, #0
    5a90:	f2c0 809c 	blt.w	5bcc <_printf_i+0x228>
    5a94:	6820      	ldr	r0, [r4, #0]
    5a96:	f020 0004 	bic.w	r0, r0, #4
    5a9a:	6020      	str	r0, [r4, #0]
    5a9c:	2b00      	cmp	r3, #0
    5a9e:	d13f      	bne.n	5b20 <_printf_i+0x17c>
    5aa0:	2d00      	cmp	r5, #0
    5aa2:	f040 8095 	bne.w	5bd0 <_printf_i+0x22c>
    5aa6:	4675      	mov	r5, lr
    5aa8:	2a08      	cmp	r2, #8
    5aaa:	d10b      	bne.n	5ac4 <_printf_i+0x120>
    5aac:	6823      	ldr	r3, [r4, #0]
    5aae:	07da      	lsls	r2, r3, #31
    5ab0:	d508      	bpl.n	5ac4 <_printf_i+0x120>
    5ab2:	6923      	ldr	r3, [r4, #16]
    5ab4:	6862      	ldr	r2, [r4, #4]
    5ab6:	429a      	cmp	r2, r3
    5ab8:	bfde      	ittt	le
    5aba:	2330      	movle	r3, #48	; 0x30
    5abc:	f805 3c01 	strble.w	r3, [r5, #-1]
    5ac0:	f105 35ff 	addle.w	r5, r5, #4294967295
    5ac4:	ebae 0305 	sub.w	r3, lr, r5
    5ac8:	6123      	str	r3, [r4, #16]
    5aca:	f8cd 8000 	str.w	r8, [sp]
    5ace:	463b      	mov	r3, r7
    5ad0:	aa03      	add	r2, sp, #12
    5ad2:	4621      	mov	r1, r4
    5ad4:	4630      	mov	r0, r6
    5ad6:	f7ff feef 	bl	58b8 <_printf_common>
    5ada:	3001      	adds	r0, #1
    5adc:	d155      	bne.n	5b8a <_printf_i+0x1e6>
    5ade:	f04f 30ff 	mov.w	r0, #4294967295
    5ae2:	b005      	add	sp, #20
    5ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5ae8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    5aec:	493c      	ldr	r1, [pc, #240]	; (5be0 <_printf_i+0x23c>)
    5aee:	6822      	ldr	r2, [r4, #0]
    5af0:	6818      	ldr	r0, [r3, #0]
    5af2:	f012 0f80 	tst.w	r2, #128	; 0x80
    5af6:	f100 0504 	add.w	r5, r0, #4
    5afa:	601d      	str	r5, [r3, #0]
    5afc:	d001      	beq.n	5b02 <_printf_i+0x15e>
    5afe:	6803      	ldr	r3, [r0, #0]
    5b00:	e002      	b.n	5b08 <_printf_i+0x164>
    5b02:	0655      	lsls	r5, r2, #25
    5b04:	d5fb      	bpl.n	5afe <_printf_i+0x15a>
    5b06:	8803      	ldrh	r3, [r0, #0]
    5b08:	07d0      	lsls	r0, r2, #31
    5b0a:	bf44      	itt	mi
    5b0c:	f042 0220 	orrmi.w	r2, r2, #32
    5b10:	6022      	strmi	r2, [r4, #0]
    5b12:	b91b      	cbnz	r3, 5b1c <_printf_i+0x178>
    5b14:	6822      	ldr	r2, [r4, #0]
    5b16:	f022 0220 	bic.w	r2, r2, #32
    5b1a:	6022      	str	r2, [r4, #0]
    5b1c:	2210      	movs	r2, #16
    5b1e:	e7b1      	b.n	5a84 <_printf_i+0xe0>
    5b20:	4675      	mov	r5, lr
    5b22:	fbb3 f0f2 	udiv	r0, r3, r2
    5b26:	fb02 3310 	mls	r3, r2, r0, r3
    5b2a:	5ccb      	ldrb	r3, [r1, r3]
    5b2c:	f805 3d01 	strb.w	r3, [r5, #-1]!
    5b30:	4603      	mov	r3, r0
    5b32:	2800      	cmp	r0, #0
    5b34:	d1f5      	bne.n	5b22 <_printf_i+0x17e>
    5b36:	e7b7      	b.n	5aa8 <_printf_i+0x104>
    5b38:	6808      	ldr	r0, [r1, #0]
    5b3a:	681a      	ldr	r2, [r3, #0]
    5b3c:	6949      	ldr	r1, [r1, #20]
    5b3e:	f010 0f80 	tst.w	r0, #128	; 0x80
    5b42:	d004      	beq.n	5b4e <_printf_i+0x1aa>
    5b44:	1d10      	adds	r0, r2, #4
    5b46:	6018      	str	r0, [r3, #0]
    5b48:	6813      	ldr	r3, [r2, #0]
    5b4a:	6019      	str	r1, [r3, #0]
    5b4c:	e007      	b.n	5b5e <_printf_i+0x1ba>
    5b4e:	f010 0f40 	tst.w	r0, #64	; 0x40
    5b52:	f102 0004 	add.w	r0, r2, #4
    5b56:	6018      	str	r0, [r3, #0]
    5b58:	6813      	ldr	r3, [r2, #0]
    5b5a:	d0f6      	beq.n	5b4a <_printf_i+0x1a6>
    5b5c:	8019      	strh	r1, [r3, #0]
    5b5e:	2300      	movs	r3, #0
    5b60:	6123      	str	r3, [r4, #16]
    5b62:	4675      	mov	r5, lr
    5b64:	e7b1      	b.n	5aca <_printf_i+0x126>
    5b66:	681a      	ldr	r2, [r3, #0]
    5b68:	1d11      	adds	r1, r2, #4
    5b6a:	6019      	str	r1, [r3, #0]
    5b6c:	6815      	ldr	r5, [r2, #0]
    5b6e:	6862      	ldr	r2, [r4, #4]
    5b70:	2100      	movs	r1, #0
    5b72:	4628      	mov	r0, r5
    5b74:	f000 f91c 	bl	5db0 <memchr>
    5b78:	b108      	cbz	r0, 5b7e <_printf_i+0x1da>
    5b7a:	1b40      	subs	r0, r0, r5
    5b7c:	6060      	str	r0, [r4, #4]
    5b7e:	6863      	ldr	r3, [r4, #4]
    5b80:	6123      	str	r3, [r4, #16]
    5b82:	2300      	movs	r3, #0
    5b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    5b88:	e79f      	b.n	5aca <_printf_i+0x126>
    5b8a:	6923      	ldr	r3, [r4, #16]
    5b8c:	462a      	mov	r2, r5
    5b8e:	4639      	mov	r1, r7
    5b90:	4630      	mov	r0, r6
    5b92:	47c0      	blx	r8
    5b94:	3001      	adds	r0, #1
    5b96:	d0a2      	beq.n	5ade <_printf_i+0x13a>
    5b98:	6823      	ldr	r3, [r4, #0]
    5b9a:	079b      	lsls	r3, r3, #30
    5b9c:	d507      	bpl.n	5bae <_printf_i+0x20a>
    5b9e:	2500      	movs	r5, #0
    5ba0:	f104 0919 	add.w	r9, r4, #25
    5ba4:	68e3      	ldr	r3, [r4, #12]
    5ba6:	9a03      	ldr	r2, [sp, #12]
    5ba8:	1a9b      	subs	r3, r3, r2
    5baa:	429d      	cmp	r5, r3
    5bac:	db05      	blt.n	5bba <_printf_i+0x216>
    5bae:	68e0      	ldr	r0, [r4, #12]
    5bb0:	9b03      	ldr	r3, [sp, #12]
    5bb2:	4298      	cmp	r0, r3
    5bb4:	bfb8      	it	lt
    5bb6:	4618      	movlt	r0, r3
    5bb8:	e793      	b.n	5ae2 <_printf_i+0x13e>
    5bba:	2301      	movs	r3, #1
    5bbc:	464a      	mov	r2, r9
    5bbe:	4639      	mov	r1, r7
    5bc0:	4630      	mov	r0, r6
    5bc2:	47c0      	blx	r8
    5bc4:	3001      	adds	r0, #1
    5bc6:	d08a      	beq.n	5ade <_printf_i+0x13a>
    5bc8:	3501      	adds	r5, #1
    5bca:	e7eb      	b.n	5ba4 <_printf_i+0x200>
    5bcc:	2b00      	cmp	r3, #0
    5bce:	d1a7      	bne.n	5b20 <_printf_i+0x17c>
    5bd0:	780b      	ldrb	r3, [r1, #0]
    5bd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5bd6:	f104 0542 	add.w	r5, r4, #66	; 0x42
    5bda:	e765      	b.n	5aa8 <_printf_i+0x104>
    5bdc:	000063d6 	.word	0x000063d6
    5be0:	000063c5 	.word	0x000063c5

00005be4 <_putc_r>:
    5be4:	b570      	push	{r4, r5, r6, lr}
    5be6:	460d      	mov	r5, r1
    5be8:	4614      	mov	r4, r2
    5bea:	4606      	mov	r6, r0
    5bec:	b118      	cbz	r0, 5bf6 <_putc_r+0x12>
    5bee:	6983      	ldr	r3, [r0, #24]
    5bf0:	b90b      	cbnz	r3, 5bf6 <_putc_r+0x12>
    5bf2:	f7ff fb81 	bl	52f8 <__sinit>
    5bf6:	4b13      	ldr	r3, [pc, #76]	; (5c44 <_putc_r+0x60>)
    5bf8:	429c      	cmp	r4, r3
    5bfa:	d112      	bne.n	5c22 <_putc_r+0x3e>
    5bfc:	6874      	ldr	r4, [r6, #4]
    5bfe:	68a3      	ldr	r3, [r4, #8]
    5c00:	3b01      	subs	r3, #1
    5c02:	2b00      	cmp	r3, #0
    5c04:	60a3      	str	r3, [r4, #8]
    5c06:	da16      	bge.n	5c36 <_putc_r+0x52>
    5c08:	69a2      	ldr	r2, [r4, #24]
    5c0a:	4293      	cmp	r3, r2
    5c0c:	db02      	blt.n	5c14 <_putc_r+0x30>
    5c0e:	b2eb      	uxtb	r3, r5
    5c10:	2b0a      	cmp	r3, #10
    5c12:	d110      	bne.n	5c36 <_putc_r+0x52>
    5c14:	4622      	mov	r2, r4
    5c16:	4629      	mov	r1, r5
    5c18:	4630      	mov	r0, r6
    5c1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5c1e:	f7ff b9b9 	b.w	4f94 <__swbuf_r>
    5c22:	4b09      	ldr	r3, [pc, #36]	; (5c48 <_putc_r+0x64>)
    5c24:	429c      	cmp	r4, r3
    5c26:	d101      	bne.n	5c2c <_putc_r+0x48>
    5c28:	68b4      	ldr	r4, [r6, #8]
    5c2a:	e7e8      	b.n	5bfe <_putc_r+0x1a>
    5c2c:	4b07      	ldr	r3, [pc, #28]	; (5c4c <_putc_r+0x68>)
    5c2e:	429c      	cmp	r4, r3
    5c30:	bf08      	it	eq
    5c32:	68f4      	ldreq	r4, [r6, #12]
    5c34:	e7e3      	b.n	5bfe <_putc_r+0x1a>
    5c36:	6823      	ldr	r3, [r4, #0]
    5c38:	1c5a      	adds	r2, r3, #1
    5c3a:	6022      	str	r2, [r4, #0]
    5c3c:	701d      	strb	r5, [r3, #0]
    5c3e:	b2e8      	uxtb	r0, r5
    5c40:	bd70      	pop	{r4, r5, r6, pc}
    5c42:	bf00      	nop
    5c44:	00006374 	.word	0x00006374
    5c48:	00006394 	.word	0x00006394
    5c4c:	00006354 	.word	0x00006354

00005c50 <_sbrk_r>:
    5c50:	b538      	push	{r3, r4, r5, lr}
    5c52:	4c06      	ldr	r4, [pc, #24]	; (5c6c <_sbrk_r+0x1c>)
    5c54:	2300      	movs	r3, #0
    5c56:	4605      	mov	r5, r0
    5c58:	4608      	mov	r0, r1
    5c5a:	6023      	str	r3, [r4, #0]
    5c5c:	f7fc ff6e 	bl	2b3c <_sbrk>
    5c60:	1c43      	adds	r3, r0, #1
    5c62:	d102      	bne.n	5c6a <_sbrk_r+0x1a>
    5c64:	6823      	ldr	r3, [r4, #0]
    5c66:	b103      	cbz	r3, 5c6a <_sbrk_r+0x1a>
    5c68:	602b      	str	r3, [r5, #0]
    5c6a:	bd38      	pop	{r3, r4, r5, pc}
    5c6c:	20000a70 	.word	0x20000a70

00005c70 <__sread>:
    5c70:	b510      	push	{r4, lr}
    5c72:	460c      	mov	r4, r1
    5c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5c78:	f000 f8ec 	bl	5e54 <_read_r>
    5c7c:	2800      	cmp	r0, #0
    5c7e:	bfab      	itete	ge
    5c80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    5c82:	89a3      	ldrhlt	r3, [r4, #12]
    5c84:	181b      	addge	r3, r3, r0
    5c86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    5c8a:	bfac      	ite	ge
    5c8c:	6563      	strge	r3, [r4, #84]	; 0x54
    5c8e:	81a3      	strhlt	r3, [r4, #12]
    5c90:	bd10      	pop	{r4, pc}

00005c92 <__swrite>:
    5c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c96:	461f      	mov	r7, r3
    5c98:	898b      	ldrh	r3, [r1, #12]
    5c9a:	05db      	lsls	r3, r3, #23
    5c9c:	4605      	mov	r5, r0
    5c9e:	460c      	mov	r4, r1
    5ca0:	4616      	mov	r6, r2
    5ca2:	d505      	bpl.n	5cb0 <__swrite+0x1e>
    5ca4:	2302      	movs	r3, #2
    5ca6:	2200      	movs	r2, #0
    5ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5cac:	f000 f868 	bl	5d80 <_lseek_r>
    5cb0:	89a3      	ldrh	r3, [r4, #12]
    5cb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    5cba:	81a3      	strh	r3, [r4, #12]
    5cbc:	4632      	mov	r2, r6
    5cbe:	463b      	mov	r3, r7
    5cc0:	4628      	mov	r0, r5
    5cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5cc6:	f000 b817 	b.w	5cf8 <_write_r>

00005cca <__sseek>:
    5cca:	b510      	push	{r4, lr}
    5ccc:	460c      	mov	r4, r1
    5cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5cd2:	f000 f855 	bl	5d80 <_lseek_r>
    5cd6:	1c43      	adds	r3, r0, #1
    5cd8:	89a3      	ldrh	r3, [r4, #12]
    5cda:	bf15      	itete	ne
    5cdc:	6560      	strne	r0, [r4, #84]	; 0x54
    5cde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    5ce2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    5ce6:	81a3      	strheq	r3, [r4, #12]
    5ce8:	bf18      	it	ne
    5cea:	81a3      	strhne	r3, [r4, #12]
    5cec:	bd10      	pop	{r4, pc}

00005cee <__sclose>:
    5cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5cf2:	f000 b813 	b.w	5d1c <_close_r>
	...

00005cf8 <_write_r>:
    5cf8:	b538      	push	{r3, r4, r5, lr}
    5cfa:	4c07      	ldr	r4, [pc, #28]	; (5d18 <_write_r+0x20>)
    5cfc:	4605      	mov	r5, r0
    5cfe:	4608      	mov	r0, r1
    5d00:	4611      	mov	r1, r2
    5d02:	2200      	movs	r2, #0
    5d04:	6022      	str	r2, [r4, #0]
    5d06:	461a      	mov	r2, r3
    5d08:	f7fe fe50 	bl	49ac <_write>
    5d0c:	1c43      	adds	r3, r0, #1
    5d0e:	d102      	bne.n	5d16 <_write_r+0x1e>
    5d10:	6823      	ldr	r3, [r4, #0]
    5d12:	b103      	cbz	r3, 5d16 <_write_r+0x1e>
    5d14:	602b      	str	r3, [r5, #0]
    5d16:	bd38      	pop	{r3, r4, r5, pc}
    5d18:	20000a70 	.word	0x20000a70

00005d1c <_close_r>:
    5d1c:	b538      	push	{r3, r4, r5, lr}
    5d1e:	4c06      	ldr	r4, [pc, #24]	; (5d38 <_close_r+0x1c>)
    5d20:	2300      	movs	r3, #0
    5d22:	4605      	mov	r5, r0
    5d24:	4608      	mov	r0, r1
    5d26:	6023      	str	r3, [r4, #0]
    5d28:	f7fc ff1a 	bl	2b60 <_close>
    5d2c:	1c43      	adds	r3, r0, #1
    5d2e:	d102      	bne.n	5d36 <_close_r+0x1a>
    5d30:	6823      	ldr	r3, [r4, #0]
    5d32:	b103      	cbz	r3, 5d36 <_close_r+0x1a>
    5d34:	602b      	str	r3, [r5, #0]
    5d36:	bd38      	pop	{r3, r4, r5, pc}
    5d38:	20000a70 	.word	0x20000a70

00005d3c <_fstat_r>:
    5d3c:	b538      	push	{r3, r4, r5, lr}
    5d3e:	4c07      	ldr	r4, [pc, #28]	; (5d5c <_fstat_r+0x20>)
    5d40:	2300      	movs	r3, #0
    5d42:	4605      	mov	r5, r0
    5d44:	4608      	mov	r0, r1
    5d46:	4611      	mov	r1, r2
    5d48:	6023      	str	r3, [r4, #0]
    5d4a:	f7fc ff0c 	bl	2b66 <_fstat>
    5d4e:	1c43      	adds	r3, r0, #1
    5d50:	d102      	bne.n	5d58 <_fstat_r+0x1c>
    5d52:	6823      	ldr	r3, [r4, #0]
    5d54:	b103      	cbz	r3, 5d58 <_fstat_r+0x1c>
    5d56:	602b      	str	r3, [r5, #0]
    5d58:	bd38      	pop	{r3, r4, r5, pc}
    5d5a:	bf00      	nop
    5d5c:	20000a70 	.word	0x20000a70

00005d60 <_isatty_r>:
    5d60:	b538      	push	{r3, r4, r5, lr}
    5d62:	4c06      	ldr	r4, [pc, #24]	; (5d7c <_isatty_r+0x1c>)
    5d64:	2300      	movs	r3, #0
    5d66:	4605      	mov	r5, r0
    5d68:	4608      	mov	r0, r1
    5d6a:	6023      	str	r3, [r4, #0]
    5d6c:	f7fc ff00 	bl	2b70 <_isatty>
    5d70:	1c43      	adds	r3, r0, #1
    5d72:	d102      	bne.n	5d7a <_isatty_r+0x1a>
    5d74:	6823      	ldr	r3, [r4, #0]
    5d76:	b103      	cbz	r3, 5d7a <_isatty_r+0x1a>
    5d78:	602b      	str	r3, [r5, #0]
    5d7a:	bd38      	pop	{r3, r4, r5, pc}
    5d7c:	20000a70 	.word	0x20000a70

00005d80 <_lseek_r>:
    5d80:	b538      	push	{r3, r4, r5, lr}
    5d82:	4c07      	ldr	r4, [pc, #28]	; (5da0 <_lseek_r+0x20>)
    5d84:	4605      	mov	r5, r0
    5d86:	4608      	mov	r0, r1
    5d88:	4611      	mov	r1, r2
    5d8a:	2200      	movs	r2, #0
    5d8c:	6022      	str	r2, [r4, #0]
    5d8e:	461a      	mov	r2, r3
    5d90:	f7fc fef0 	bl	2b74 <_lseek>
    5d94:	1c43      	adds	r3, r0, #1
    5d96:	d102      	bne.n	5d9e <_lseek_r+0x1e>
    5d98:	6823      	ldr	r3, [r4, #0]
    5d9a:	b103      	cbz	r3, 5d9e <_lseek_r+0x1e>
    5d9c:	602b      	str	r3, [r5, #0]
    5d9e:	bd38      	pop	{r3, r4, r5, pc}
    5da0:	20000a70 	.word	0x20000a70
	...

00005db0 <memchr>:
    5db0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5db4:	2a10      	cmp	r2, #16
    5db6:	db2b      	blt.n	5e10 <memchr+0x60>
    5db8:	f010 0f07 	tst.w	r0, #7
    5dbc:	d008      	beq.n	5dd0 <memchr+0x20>
    5dbe:	f810 3b01 	ldrb.w	r3, [r0], #1
    5dc2:	3a01      	subs	r2, #1
    5dc4:	428b      	cmp	r3, r1
    5dc6:	d02d      	beq.n	5e24 <memchr+0x74>
    5dc8:	f010 0f07 	tst.w	r0, #7
    5dcc:	b342      	cbz	r2, 5e20 <memchr+0x70>
    5dce:	d1f6      	bne.n	5dbe <memchr+0xe>
    5dd0:	b4f0      	push	{r4, r5, r6, r7}
    5dd2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    5dd6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    5dda:	f022 0407 	bic.w	r4, r2, #7
    5dde:	f07f 0700 	mvns.w	r7, #0
    5de2:	2300      	movs	r3, #0
    5de4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    5de8:	3c08      	subs	r4, #8
    5dea:	ea85 0501 	eor.w	r5, r5, r1
    5dee:	ea86 0601 	eor.w	r6, r6, r1
    5df2:	fa85 f547 	uadd8	r5, r5, r7
    5df6:	faa3 f587 	sel	r5, r3, r7
    5dfa:	fa86 f647 	uadd8	r6, r6, r7
    5dfe:	faa5 f687 	sel	r6, r5, r7
    5e02:	b98e      	cbnz	r6, 5e28 <memchr+0x78>
    5e04:	d1ee      	bne.n	5de4 <memchr+0x34>
    5e06:	bcf0      	pop	{r4, r5, r6, r7}
    5e08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5e0c:	f002 0207 	and.w	r2, r2, #7
    5e10:	b132      	cbz	r2, 5e20 <memchr+0x70>
    5e12:	f810 3b01 	ldrb.w	r3, [r0], #1
    5e16:	3a01      	subs	r2, #1
    5e18:	ea83 0301 	eor.w	r3, r3, r1
    5e1c:	b113      	cbz	r3, 5e24 <memchr+0x74>
    5e1e:	d1f8      	bne.n	5e12 <memchr+0x62>
    5e20:	2000      	movs	r0, #0
    5e22:	4770      	bx	lr
    5e24:	3801      	subs	r0, #1
    5e26:	4770      	bx	lr
    5e28:	2d00      	cmp	r5, #0
    5e2a:	bf06      	itte	eq
    5e2c:	4635      	moveq	r5, r6
    5e2e:	3803      	subeq	r0, #3
    5e30:	3807      	subne	r0, #7
    5e32:	f015 0f01 	tst.w	r5, #1
    5e36:	d107      	bne.n	5e48 <memchr+0x98>
    5e38:	3001      	adds	r0, #1
    5e3a:	f415 7f80 	tst.w	r5, #256	; 0x100
    5e3e:	bf02      	ittt	eq
    5e40:	3001      	addeq	r0, #1
    5e42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    5e46:	3001      	addeq	r0, #1
    5e48:	bcf0      	pop	{r4, r5, r6, r7}
    5e4a:	3801      	subs	r0, #1
    5e4c:	4770      	bx	lr
    5e4e:	bf00      	nop

00005e50 <__malloc_lock>:
    5e50:	4770      	bx	lr

00005e52 <__malloc_unlock>:
    5e52:	4770      	bx	lr

00005e54 <_read_r>:
    5e54:	b538      	push	{r3, r4, r5, lr}
    5e56:	4c07      	ldr	r4, [pc, #28]	; (5e74 <_read_r+0x20>)
    5e58:	4605      	mov	r5, r0
    5e5a:	4608      	mov	r0, r1
    5e5c:	4611      	mov	r1, r2
    5e5e:	2200      	movs	r2, #0
    5e60:	6022      	str	r2, [r4, #0]
    5e62:	461a      	mov	r2, r3
    5e64:	f7fe fd90 	bl	4988 <_read>
    5e68:	1c43      	adds	r3, r0, #1
    5e6a:	d102      	bne.n	5e72 <_read_r+0x1e>
    5e6c:	6823      	ldr	r3, [r4, #0]
    5e6e:	b103      	cbz	r3, 5e72 <_read_r+0x1e>
    5e70:	602b      	str	r3, [r5, #0]
    5e72:	bd38      	pop	{r3, r4, r5, pc}
    5e74:	20000a70 	.word	0x20000a70
    5e78:	65480d0a 	.word	0x65480d0a
    5e7c:	2c6f6c6c 	.word	0x2c6f6c6c
    5e80:	726f7720 	.word	0x726f7720
    5e84:	0a21646c 	.word	0x0a21646c
    5e88:	000d0a0d 	.word	0x000d0a0d
    5e8c:	62616e45 	.word	0x62616e45
    5e90:	676e696c 	.word	0x676e696c
    5e94:	414d4420 	.word	0x414d4420
    5e98:	00000d0a 	.word	0x00000d0a
    5e9c:	6e756f4d 	.word	0x6e756f4d
    5ea0:	676e6974 	.word	0x676e6974
    5ea4:	6c696620 	.word	0x6c696620
    5ea8:	73797365 	.word	0x73797365
    5eac:	2e6d6574 	.word	0x2e6d6574
    5eb0:	00000d0a 	.word	0x00000d0a
    5eb4:	202d452d 	.word	0x202d452d
    5eb8:	6f6d5f66 	.word	0x6f6d5f66
    5ebc:	20746e75 	.word	0x20746e75
    5ec0:	203a6270 	.word	0x203a6270
    5ec4:	58257830 	.word	0x58257830
    5ec8:	00000d0a 	.word	0x00000d0a
    5ecc:	6e65704f 	.word	0x6e65704f
    5ed0:	20676e69 	.word	0x20676e69
    5ed4:	69647561 	.word	0x69647561
    5ed8:	6966206f 	.word	0x6966206f
    5edc:	0a2e656c 	.word	0x0a2e656c
    5ee0:	0000000d 	.word	0x0000000d
    5ee4:	6d2f3a30 	.word	0x6d2f3a30
    5ee8:	74736e6f 	.word	0x74736e6f
    5eec:	772e7265 	.word	0x772e7265
    5ef0:	00007661 	.word	0x00007661
    5ef4:	202d452d 	.word	0x202d452d
    5ef8:	706f5f66 	.word	0x706f5f66
    5efc:	70206e65 	.word	0x70206e65
    5f00:	30203a62 	.word	0x30203a62
    5f04:	0a582578 	.word	0x0a582578
    5f08:	0000000d 	.word	0x0000000d
    5f0c:	70696b53 	.word	0x70696b53
    5f10:	676e6970 	.word	0x676e6970
    5f14:	56415720 	.word	0x56415720
    5f18:	61656820 	.word	0x61656820
    5f1c:	2e726564 	.word	0x2e726564
    5f20:	00000d0a 	.word	0x00000d0a
    5f24:	202d452d 	.word	0x202d452d
    5f28:	65725f66 	.word	0x65725f66
    5f2c:	70206461 	.word	0x70206461
    5f30:	30203a62 	.word	0x30203a62
    5f34:	0a582578 	.word	0x0a582578
    5f38:	0000000d 	.word	0x0000000d
    5f3c:	202d452d 	.word	0x202d452d
    5f40:	65725f66 	.word	0x65725f66
    5f44:	62206461 	.word	0x62206461
    5f48:	73657479 	.word	0x73657479
    5f4c:	7830203a 	.word	0x7830203a
    5f50:	0d0a5825 	.word	0x0d0a5825
    5f54:	00000000 	.word	0x00000000
    5f58:	20564157 	.word	0x20564157
    5f5c:	64616568 	.word	0x64616568
    5f60:	0a3a7265 	.word	0x0a3a7265
    5f64:	0000000d 	.word	0x0000000d
    5f68:	78323025 	.word	0x78323025
    5f6c:	00000020 	.word	0x00000020
    5f70:	61656c43 	.word	0x61656c43
    5f74:	676e6972 	.word	0x676e6972
    5f78:	64756120 	.word	0x64756120
    5f7c:	62206f69 	.word	0x62206f69
    5f80:	65666675 	.word	0x65666675
    5f84:	0a2e7372 	.word	0x0a2e7372
    5f88:	0000000d 	.word	0x0000000d
    5f8c:	796c6e6f 	.word	0x796c6e6f
    5f90:	61657220 	.word	0x61657220
    5f94:	64252064 	.word	0x64252064
    5f98:	74796220 	.word	0x74796220
    5f9c:	0d0a7365 	.word	0x0d0a7365
    5fa0:	00000000 	.word	0x00000000
    5fa4:	0d0a0d0a 	.word	0x0d0a0d0a
    5fa8:	00000000 	.word	0x00000000
    5fac:	736f6c43 	.word	0x736f6c43
    5fb0:	20676e69 	.word	0x20676e69
    5fb4:	69647561 	.word	0x69647561
    5fb8:	6966206f 	.word	0x6966206f
    5fbc:	0a2e656c 	.word	0x0a2e656c
    5fc0:	0000000d 	.word	0x0000000d
    5fc4:	202d452d 	.word	0x202d452d
    5fc8:	6c635f66 	.word	0x6c635f66
    5fcc:	2065736f 	.word	0x2065736f
    5fd0:	203a6270 	.word	0x203a6270
    5fd4:	58257830 	.word	0x58257830
    5fd8:	00000d0a 	.word	0x00000d0a
    5fdc:	61736944 	.word	0x61736944
    5fe0:	6e696c62 	.word	0x6e696c62
    5fe4:	4d442067 	.word	0x4d442067
    5fe8:	000d0a41 	.word	0x000d0a41
    5fec:	43414d44 	.word	0x43414d44
    5ff0:	485f305f 	.word	0x485f305f
    5ff4:	6c646e61 	.word	0x6c646e61
    5ff8:	203a7265 	.word	0x203a7265
    5ffc:	78383025 	.word	0x78383025
    6000:	00000d0a 	.word	0x00000d0a

00006004 <ExCvt>:
    6004:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
    6014:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
    6024:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
    6034:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
    6044:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
    6054:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
    6064:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
    6074:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

00006084 <vst.5977>:
    6084:	02000400 00800100 00200040 00080010     ........@. .....
    6094:	00020004 00000000                       ........

0000609c <cst.5978>:
    609c:	40008000 10002000 40000800 10002000     ...@. .....@. ..
    60ac:	04000800 00000200 2c2b2a22 3d3c3b3a     ........"*+,:;<=
    60bc:	5d5b3f3e 00007f7c 4d90feeb 534f4453     >?[]|......MSDOS
    60cc:	00302e35 4e204f4e 20454d41 46202020     5.0.NO NAME    F
    60dc:	32335441 00202020 4e204f4e 20454d41     AT32   .NO NAME 
    60ec:	46202020 20205441 00202020 682f2e2e        FAT     .../h
    60fc:	732f6c61 682f6372 635f6c61 6e656c61     al/src/hal_calen
    610c:	2e726164 00000063 682f2e2e 732f6c61     dar.c...../hal/s
    611c:	682f6372 695f6c61 635f7332 72746e6f     rc/hal_i2s_contr
    612c:	656c6c6f 79735f72 632e636e 00000000     oller_sync.c....
    613c:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    614c:	00632e6f 682f2e2e 732f6c61 682f6372     o.c.../hal/src/h
    615c:	6d5f6c61 735f6963 2e636e79 00000063     al_mci_sync.c...
    616c:	682f2e2e 732f6c61 682f6372 755f6c61     ../hal/src/hal_u
    617c:	74726173 6e79735f 00632e63              sart_sync.c.

00006188 <_init_cfg>:
    6188:	00034487 000300af 00fc0580 00fa04a0     .D..............
    6198:	0000001c 12141820 00081010              .... .......

000061a4 <_i2s_ws_cfg>:
    61a4:	00040008 00050010 00060018 00070020     ............ ...
    61b4:	002e0030 002f0040 00360048 00370060     0...@./.H.6.`.7.
    61c4:	003f0080 682f2e2e 692f6c70 682f7332     ..?.../hpl/i2s/h
    61d4:	695f6c70 632e7332 00000000 682f2e2e     pl_i2s.c....../h
    61e4:	722f6c70 682f6374 725f6c70 632e6374     pl/rtc/hpl_rtc.c
    61f4:	00000000 682f2e2e 732f6c70 2f636864     ....../hpl/sdhc/
    6204:	5f6c7068 63686473 0000632e 40003000     hpl_sdhc.c...0.@
    6214:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    6224:	43000400 43000800 43000c00              ...C...C...C

00006230 <_usarts>:
    6230:	00000002 40100004 00030000 00700002     .......@......p.
    6240:	0000fcb9 00000000                       ........

00006248 <_i2cms>:
	...

00006260 <_i2css>:
	...

00006270 <sercomspi_regs>:
	...
    6284:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    6294:	65735f6c 6d6f6372 0000632e              l_sercom.c..

000062a0 <sd_mmc_trans_units>:
    62a0:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

000062bc <sd_trans_multipliers>:
    62bc:	00000000 0000000a 0000000c 0000000d     ................
    62cc:	0000000f 00000014 00000019 0000001e     ................
    62dc:	00000023 00000028 0000002d 00000032     #...(...-...2...
    62ec:	00000037 0000003c 00000046 00000050     7...<...F...P...

000062fc <mmc_trans_multipliers>:
    62fc:	00000000 0000000a 0000000c 0000000d     ................
    630c:	0000000f 00000014 0000001a 0000001e     ................
    631c:	00000023 00000028 0000002d 00000034     #...(...-...4...
    632c:	00000037 0000003c 00000046 00000050     7...<...F...P...
    633c:	732f2e2e 6d6d5f64 64732f63 636d6d5f     ../sd_mmc/sd_mmc
    634c:	0000632e                                .c..

00006350 <_global_impure_ptr>:
    6350:	2000000c                                ... 

00006354 <__sf_fake_stderr>:
	...

00006374 <__sf_fake_stdin>:
	...

00006394 <__sf_fake_stdout>:
	...
    63b4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    63c4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    63d4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    63e4:	00006665                                ef..

000063e8 <_init>:
    63e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63ea:	bf00      	nop
    63ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    63ee:	bc08      	pop	{r3}
    63f0:	469e      	mov	lr, r3
    63f2:	4770      	bx	lr

000063f4 <__init_array_start>:
    63f4:	00000289 	.word	0x00000289

000063f8 <_fini>:
    63f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63fa:	bf00      	nop
    63fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    63fe:	bc08      	pop	{r3}
    6400:	469e      	mov	lr, r3
    6402:	4770      	bx	lr

00006404 <__fini_array_start>:
    6404:	00000265 	.word	0x00000265
